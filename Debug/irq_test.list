
irq_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000004  08008214  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000039b0  20000014  08008224  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200039c4  08008224  000239c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024ef7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000041a8  00000000  00000000  00044f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001fd8  00000000  00000000  000490e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001df0  00000000  00000000  0004b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e9a6  00000000  00000000  0004ceb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009bf1  00000000  00000000  0005b856  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00065447  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008514  00000000  00000000  000654c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	080080d0 	.word	0x080080d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	080080d0 	.word	0x080080d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b97a 	b.w	800049c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	468c      	mov	ip, r1
 80001c6:	460d      	mov	r5, r1
 80001c8:	4604      	mov	r4, r0
 80001ca:	9e08      	ldr	r6, [sp, #32]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d151      	bne.n	8000274 <__udivmoddi4+0xb4>
 80001d0:	428a      	cmp	r2, r1
 80001d2:	4617      	mov	r7, r2
 80001d4:	d96d      	bls.n	80002b2 <__udivmoddi4+0xf2>
 80001d6:	fab2 fe82 	clz	lr, r2
 80001da:	f1be 0f00 	cmp.w	lr, #0
 80001de:	d00b      	beq.n	80001f8 <__udivmoddi4+0x38>
 80001e0:	f1ce 0c20 	rsb	ip, lr, #32
 80001e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80001e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80001f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80001f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80001fc:	0c25      	lsrs	r5, r4, #16
 80001fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000202:	fa1f f987 	uxth.w	r9, r7
 8000206:	fb0a cc18 	mls	ip, sl, r8, ip
 800020a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800020e:	fb08 f309 	mul.w	r3, r8, r9
 8000212:	42ab      	cmp	r3, r5
 8000214:	d90a      	bls.n	800022c <__udivmoddi4+0x6c>
 8000216:	19ed      	adds	r5, r5, r7
 8000218:	f108 32ff 	add.w	r2, r8, #4294967295
 800021c:	f080 8123 	bcs.w	8000466 <__udivmoddi4+0x2a6>
 8000220:	42ab      	cmp	r3, r5
 8000222:	f240 8120 	bls.w	8000466 <__udivmoddi4+0x2a6>
 8000226:	f1a8 0802 	sub.w	r8, r8, #2
 800022a:	443d      	add	r5, r7
 800022c:	1aed      	subs	r5, r5, r3
 800022e:	b2a4      	uxth	r4, r4
 8000230:	fbb5 f0fa 	udiv	r0, r5, sl
 8000234:	fb0a 5510 	mls	r5, sl, r0, r5
 8000238:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800023c:	fb00 f909 	mul.w	r9, r0, r9
 8000240:	45a1      	cmp	r9, r4
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x98>
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	f100 33ff 	add.w	r3, r0, #4294967295
 800024a:	f080 810a 	bcs.w	8000462 <__udivmoddi4+0x2a2>
 800024e:	45a1      	cmp	r9, r4
 8000250:	f240 8107 	bls.w	8000462 <__udivmoddi4+0x2a2>
 8000254:	3802      	subs	r0, #2
 8000256:	443c      	add	r4, r7
 8000258:	eba4 0409 	sub.w	r4, r4, r9
 800025c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000260:	2100      	movs	r1, #0
 8000262:	2e00      	cmp	r6, #0
 8000264:	d061      	beq.n	800032a <__udivmoddi4+0x16a>
 8000266:	fa24 f40e 	lsr.w	r4, r4, lr
 800026a:	2300      	movs	r3, #0
 800026c:	6034      	str	r4, [r6, #0]
 800026e:	6073      	str	r3, [r6, #4]
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	428b      	cmp	r3, r1
 8000276:	d907      	bls.n	8000288 <__udivmoddi4+0xc8>
 8000278:	2e00      	cmp	r6, #0
 800027a:	d054      	beq.n	8000326 <__udivmoddi4+0x166>
 800027c:	2100      	movs	r1, #0
 800027e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000282:	4608      	mov	r0, r1
 8000284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000288:	fab3 f183 	clz	r1, r3
 800028c:	2900      	cmp	r1, #0
 800028e:	f040 808e 	bne.w	80003ae <__udivmoddi4+0x1ee>
 8000292:	42ab      	cmp	r3, r5
 8000294:	d302      	bcc.n	800029c <__udivmoddi4+0xdc>
 8000296:	4282      	cmp	r2, r0
 8000298:	f200 80fa 	bhi.w	8000490 <__udivmoddi4+0x2d0>
 800029c:	1a84      	subs	r4, r0, r2
 800029e:	eb65 0503 	sbc.w	r5, r5, r3
 80002a2:	2001      	movs	r0, #1
 80002a4:	46ac      	mov	ip, r5
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d03f      	beq.n	800032a <__udivmoddi4+0x16a>
 80002aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b912      	cbnz	r2, 80002ba <__udivmoddi4+0xfa>
 80002b4:	2701      	movs	r7, #1
 80002b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002ba:	fab7 fe87 	clz	lr, r7
 80002be:	f1be 0f00 	cmp.w	lr, #0
 80002c2:	d134      	bne.n	800032e <__udivmoddi4+0x16e>
 80002c4:	1beb      	subs	r3, r5, r7
 80002c6:	0c3a      	lsrs	r2, r7, #16
 80002c8:	fa1f fc87 	uxth.w	ip, r7
 80002cc:	2101      	movs	r1, #1
 80002ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80002d2:	0c25      	lsrs	r5, r4, #16
 80002d4:	fb02 3318 	mls	r3, r2, r8, r3
 80002d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002dc:	fb0c f308 	mul.w	r3, ip, r8
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0x134>
 80002e4:	19ed      	adds	r5, r5, r7
 80002e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x132>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	f200 80d1 	bhi.w	8000494 <__udivmoddi4+0x2d4>
 80002f2:	4680      	mov	r8, r0
 80002f4:	1aed      	subs	r5, r5, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80002fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000300:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000304:	fb0c fc00 	mul.w	ip, ip, r0
 8000308:	45a4      	cmp	ip, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x15c>
 800030c:	19e4      	adds	r4, r4, r7
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x15a>
 8000314:	45a4      	cmp	ip, r4
 8000316:	f200 80b8 	bhi.w	800048a <__udivmoddi4+0x2ca>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 040c 	sub.w	r4, r4, ip
 8000320:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000324:	e79d      	b.n	8000262 <__udivmoddi4+0xa2>
 8000326:	4631      	mov	r1, r6
 8000328:	4630      	mov	r0, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	f1ce 0420 	rsb	r4, lr, #32
 8000332:	fa05 f30e 	lsl.w	r3, r5, lr
 8000336:	fa07 f70e 	lsl.w	r7, r7, lr
 800033a:	fa20 f804 	lsr.w	r8, r0, r4
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa25 f404 	lsr.w	r4, r5, r4
 8000344:	ea48 0803 	orr.w	r8, r8, r3
 8000348:	fbb4 f1f2 	udiv	r1, r4, r2
 800034c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000350:	fb02 4411 	mls	r4, r2, r1, r4
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800035c:	fb01 f30c 	mul.w	r3, r1, ip
 8000360:	42ab      	cmp	r3, r5
 8000362:	fa00 f40e 	lsl.w	r4, r0, lr
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1bc>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f101 30ff 	add.w	r0, r1, #4294967295
 800036e:	f080 808a 	bcs.w	8000486 <__udivmoddi4+0x2c6>
 8000372:	42ab      	cmp	r3, r5
 8000374:	f240 8087 	bls.w	8000486 <__udivmoddi4+0x2c6>
 8000378:	3902      	subs	r1, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	fa1f f588 	uxth.w	r5, r8
 8000382:	fbb3 f0f2 	udiv	r0, r3, r2
 8000386:	fb02 3310 	mls	r3, r2, r0, r3
 800038a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800038e:	fb00 f30c 	mul.w	r3, r0, ip
 8000392:	42ab      	cmp	r3, r5
 8000394:	d907      	bls.n	80003a6 <__udivmoddi4+0x1e6>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f100 38ff 	add.w	r8, r0, #4294967295
 800039c:	d26f      	bcs.n	800047e <__udivmoddi4+0x2be>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d96d      	bls.n	800047e <__udivmoddi4+0x2be>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443d      	add	r5, r7
 80003a6:	1aeb      	subs	r3, r5, r3
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	e78f      	b.n	80002ce <__udivmoddi4+0x10e>
 80003ae:	f1c1 0720 	rsb	r7, r1, #32
 80003b2:	fa22 f807 	lsr.w	r8, r2, r7
 80003b6:	408b      	lsls	r3, r1
 80003b8:	fa05 f401 	lsl.w	r4, r5, r1
 80003bc:	ea48 0303 	orr.w	r3, r8, r3
 80003c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80003c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80003ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80003d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80003d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80003da:	fa1f f883 	uxth.w	r8, r3
 80003de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003e2:	fb09 f408 	mul.w	r4, r9, r8
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	fa02 f201 	lsl.w	r2, r2, r1
 80003ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x244>
 80003f2:	18ed      	adds	r5, r5, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	d243      	bcs.n	8000482 <__udivmoddi4+0x2c2>
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	d941      	bls.n	8000482 <__udivmoddi4+0x2c2>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	441d      	add	r5, r3
 8000404:	1b2d      	subs	r5, r5, r4
 8000406:	fa1f fe8e 	uxth.w	lr, lr
 800040a:	fbb5 f0fc 	udiv	r0, r5, ip
 800040e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000412:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000416:	fb00 f808 	mul.w	r8, r0, r8
 800041a:	45a0      	cmp	r8, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x26e>
 800041e:	18e4      	adds	r4, r4, r3
 8000420:	f100 35ff 	add.w	r5, r0, #4294967295
 8000424:	d229      	bcs.n	800047a <__udivmoddi4+0x2ba>
 8000426:	45a0      	cmp	r8, r4
 8000428:	d927      	bls.n	800047a <__udivmoddi4+0x2ba>
 800042a:	3802      	subs	r0, #2
 800042c:	441c      	add	r4, r3
 800042e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000432:	eba4 0408 	sub.w	r4, r4, r8
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	454c      	cmp	r4, r9
 800043c:	46c6      	mov	lr, r8
 800043e:	464d      	mov	r5, r9
 8000440:	d315      	bcc.n	800046e <__udivmoddi4+0x2ae>
 8000442:	d012      	beq.n	800046a <__udivmoddi4+0x2aa>
 8000444:	b156      	cbz	r6, 800045c <__udivmoddi4+0x29c>
 8000446:	ebba 030e 	subs.w	r3, sl, lr
 800044a:	eb64 0405 	sbc.w	r4, r4, r5
 800044e:	fa04 f707 	lsl.w	r7, r4, r7
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431f      	orrs	r7, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	6037      	str	r7, [r6, #0]
 800045a:	6074      	str	r4, [r6, #4]
 800045c:	2100      	movs	r1, #0
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	4618      	mov	r0, r3
 8000464:	e6f8      	b.n	8000258 <__udivmoddi4+0x98>
 8000466:	4690      	mov	r8, r2
 8000468:	e6e0      	b.n	800022c <__udivmoddi4+0x6c>
 800046a:	45c2      	cmp	sl, r8
 800046c:	d2ea      	bcs.n	8000444 <__udivmoddi4+0x284>
 800046e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000472:	eb69 0503 	sbc.w	r5, r9, r3
 8000476:	3801      	subs	r0, #1
 8000478:	e7e4      	b.n	8000444 <__udivmoddi4+0x284>
 800047a:	4628      	mov	r0, r5
 800047c:	e7d7      	b.n	800042e <__udivmoddi4+0x26e>
 800047e:	4640      	mov	r0, r8
 8000480:	e791      	b.n	80003a6 <__udivmoddi4+0x1e6>
 8000482:	4681      	mov	r9, r0
 8000484:	e7be      	b.n	8000404 <__udivmoddi4+0x244>
 8000486:	4601      	mov	r1, r0
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1bc>
 800048a:	3802      	subs	r0, #2
 800048c:	443c      	add	r4, r7
 800048e:	e745      	b.n	800031c <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xe6>
 8000494:	f1a8 0802 	sub.w	r8, r8, #2
 8000498:	443d      	add	r5, r7
 800049a:	e72b      	b.n	80002f4 <__udivmoddi4+0x134>

0800049c <__aeabi_idiv0>:
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop

080004a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004a6:	2300      	movs	r3, #0
 80004a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004aa:	4a0c      	ldr	r2, [pc, #48]	; (80004dc <HAL_Init+0x3c>)
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_Init+0x3c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b6:	2003      	movs	r0, #3
 80004b8:	f000 f8e7 	bl	800068a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004bc:	2000      	movs	r0, #0
 80004be:	f007 faff 	bl	8007ac0 <HAL_InitTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	e001      	b.n	80004d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ce:	f007 fad4 	bl	8007a7a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d2:	79fb      	ldrb	r3, [r7, #7]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	58004000 	.word	0x58004000

080004e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_IncTick+0x1c>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_IncTick+0x20>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a03      	ldr	r2, [pc, #12]	; (80004fc <HAL_IncTick+0x1c>)
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	20003448 	.word	0x20003448
 8000500:	20000008 	.word	0x20000008

08000504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return uwTick;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <HAL_GetTick+0x14>)
 800050a:	681b      	ldr	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20003448 	.word	0x20003448

0800051c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <HAL_GetTickPrio+0x14>)
 8000522:	681b      	ldr	r3, [r3, #0]
}
 8000524:	4618      	mov	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000004 	.word	0x20000004

08000534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__NVIC_SetPriorityGrouping+0x44>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <__NVIC_SetPriorityGrouping+0x44>)
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	60d3      	str	r3, [r2, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <__NVIC_GetPriorityGrouping+0x18>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	f003 0307 	and.w	r3, r3, #7
}
 800058a:	4618      	mov	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db0b      	blt.n	80005c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005aa:	4909      	ldr	r1, [pc, #36]	; (80005d0 <__NVIC_EnableIRQ+0x38>)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	095b      	lsrs	r3, r3, #5
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	f002 021f 	and.w	r2, r2, #31
 80005b8:	2001      	movs	r0, #1
 80005ba:	fa00 f202 	lsl.w	r2, r0, r2
 80005be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000e100 	.word	0xe000e100

080005d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db0a      	blt.n	80005fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	490d      	ldr	r1, [pc, #52]	; (8000620 <__NVIC_SetPriority+0x4c>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	440b      	add	r3, r1
 80005f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005fc:	e00a      	b.n	8000614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	4909      	ldr	r1, [pc, #36]	; (8000624 <__NVIC_SetPriority+0x50>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	3b04      	subs	r3, #4
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	0112      	lsls	r2, r2, #4
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	440b      	add	r3, r1
 8000612:	761a      	strb	r2, [r3, #24]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000e100 	.word	0xe000e100
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000628:	b480      	push	{r7}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	f1c3 0307 	rsb	r3, r3, #7
 8000642:	2b04      	cmp	r3, #4
 8000644:	bf28      	it	cs
 8000646:	2304      	movcs	r3, #4
 8000648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3304      	adds	r3, #4
 800064e:	2b06      	cmp	r3, #6
 8000650:	d902      	bls.n	8000658 <NVIC_EncodePriority+0x30>
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3b03      	subs	r3, #3
 8000656:	e000      	b.n	800065a <NVIC_EncodePriority+0x32>
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	2201      	movs	r2, #1
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	1e5a      	subs	r2, r3, #1
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	401a      	ands	r2, r3
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066e:	2101      	movs	r1, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	1e59      	subs	r1, r3, #1
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	4313      	orrs	r3, r2
         );
}
 800067e:	4618      	mov	r0, r3
 8000680:	3724      	adds	r7, #36	; 0x24
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff4e 	bl	8000534 <__NVIC_SetPriorityGrouping>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006ae:	f7ff ff65 	bl	800057c <__NVIC_GetPriorityGrouping>
 80006b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	6978      	ldr	r0, [r7, #20]
 80006ba:	f7ff ffb5 	bl	8000628 <NVIC_EncodePriority>
 80006be:	4602      	mov	r2, r0
 80006c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff84 	bl	80005d4 <__NVIC_SetPriority>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff58 	bl	8000598 <__NVIC_EnableIRQ>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b02      	cmp	r3, #2
 8000706:	d005      	beq.n	8000714 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2204      	movs	r2, #4
 800070c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	e047      	b.n	80007a4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	f022 020e 	bic.w	r2, r2, #14
 8000722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	f022 0201 	bic.w	r2, r2, #1
 8000732:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800074c:	f002 021c 	and.w	r2, r2, #28
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000760:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00c      	beq.n	8000784 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000778:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000782:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000798:	2b00      	cmp	r3, #0
 800079a:	d003      	beq.n	80007a4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	4798      	blx	r3
    }
  }
  return status;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007be:	e14c      	b.n	8000a5a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	2101      	movs	r1, #1
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 813e 	beq.w	8000a54 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d003      	beq.n	80007e8 <HAL_GPIO_Init+0x38>
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b12      	cmp	r3, #18
 80007e6:	d123      	bne.n	8000830 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	08da      	lsrs	r2, r3, #3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3208      	adds	r2, #8
 80007f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	220f      	movs	r2, #15
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4313      	orrs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	08da      	lsrs	r2, r3, #3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3208      	adds	r2, #8
 800082a:	6939      	ldr	r1, [r7, #16]
 800082c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0203 	and.w	r2, r3, #3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	4313      	orrs	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00b      	beq.n	8000884 <HAL_GPIO_Init+0xd4>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d007      	beq.n	8000884 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000878:	2b11      	cmp	r3, #17
 800087a:	d003      	beq.n	8000884 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b12      	cmp	r3, #18
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8098 	beq.w	8000a54 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000924:	4a54      	ldr	r2, [pc, #336]	; (8000a78 <HAL_GPIO_Init+0x2c8>)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	089b      	lsrs	r3, r3, #2
 800092a:	3302      	adds	r3, #2
 800092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	220f      	movs	r2, #15
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800094e:	d019      	beq.n	8000984 <HAL_GPIO_Init+0x1d4>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <HAL_GPIO_Init+0x2cc>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d013      	beq.n	8000980 <HAL_GPIO_Init+0x1d0>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a49      	ldr	r2, [pc, #292]	; (8000a80 <HAL_GPIO_Init+0x2d0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d00d      	beq.n	800097c <HAL_GPIO_Init+0x1cc>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a48      	ldr	r2, [pc, #288]	; (8000a84 <HAL_GPIO_Init+0x2d4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d007      	beq.n	8000978 <HAL_GPIO_Init+0x1c8>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a47      	ldr	r2, [pc, #284]	; (8000a88 <HAL_GPIO_Init+0x2d8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d101      	bne.n	8000974 <HAL_GPIO_Init+0x1c4>
 8000970:	2304      	movs	r3, #4
 8000972:	e008      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 8000974:	2307      	movs	r3, #7
 8000976:	e006      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 8000978:	2303      	movs	r3, #3
 800097a:	e004      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 800097c:	2302      	movs	r3, #2
 800097e:	e002      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <HAL_GPIO_Init+0x1d6>
 8000984:	2300      	movs	r3, #0
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	f002 0203 	and.w	r2, r2, #3
 800098c:	0092      	lsls	r2, r2, #2
 800098e:	4093      	lsls	r3, r2
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4313      	orrs	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000996:	4938      	ldr	r1, [pc, #224]	; (8000a78 <HAL_GPIO_Init+0x2c8>)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 80009a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 80009d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009f8:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a24:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <HAL_GPIO_Init+0x2dc>)
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa22 f303 	lsr.w	r3, r2, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f47f aeab 	bne.w	80007c0 <HAL_GPIO_Init+0x10>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	371c      	adds	r7, #28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	48000800 	.word	0x48000800
 8000a84:	48000c00 	.word	0x48000c00
 8000a88:	48001000 	.word	0x48001000
 8000a8c:	58000800 	.word	0x58000800

08000a90 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	4013      	ands	r3, r2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f006 ff4a 	bl	80079a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58000800 	.word	0x58000800

08000b20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	58000400 	.word	0x58000400

08000b40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	58000400 	.word	0x58000400

08000b5c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b6e:	d101      	bne.n	8000b74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c0a:	d101      	bne.n	8000c10 <LL_RCC_HSE_IsReady+0x18>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <LL_RCC_HSE_IsReady+0x1a>
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c4c:	6013      	str	r3, [r2, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6a:	d101      	bne.n	8000c70 <LL_RCC_HSI_IsReady+0x18>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <LL_RCC_HSI_IsReady+0x1a>
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	061b      	lsls	r3, r3, #24
 8000c96:	4313      	orrs	r3, r2
 8000c98:	604b      	str	r3, [r1, #4]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cd8:	f023 0301 	bic.w	r3, r3, #1
 8000cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d101      	bne.n	8000d02 <LL_RCC_HSI48_IsReady+0x18>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <LL_RCC_HSI48_IsReady+0x1a>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d84:	f023 0304 	bic.w	r3, r3, #4
 8000d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d101      	bne.n	8000dae <LL_RCC_LSE_IsReady+0x18>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <LL_RCC_LSE_IsReady+0x1a>
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d101      	bne.n	8000e16 <LL_RCC_LSI1_IsReady+0x18>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <LL_RCC_LSI1_IsReady+0x1a>
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d101      	bne.n	8000e7e <LL_RCC_LSI2_IsReady+0x18>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_RCC_LSI2_IsReady+0x1a>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6013      	str	r3, [r2, #0]
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d101      	bne.n	8000f0a <LL_RCC_MSI_IsReady+0x16>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_RCC_MSI_IsReady+0x18>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f4e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2bb0      	cmp	r3, #176	; 0xb0
 8000f54:	d901      	bls.n	8000f5a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000f56:	23b0      	movs	r3, #176	; 0xb0
 8000f58:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000f5a:	687b      	ldr	r3, [r7, #4]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 0203 	bic.w	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	608b      	str	r3, [r1, #8]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	608b      	str	r3, [r1, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800100e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4313      	orrs	r3, r2
 8001016:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800102e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800103a:	f023 020f 	bic.w	r2, r3, #15
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	4313      	orrs	r3, r2
 8001044:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800105c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	608b      	str	r3, [r1, #8]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80010da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80010f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001170:	d101      	bne.n	8001176 <LL_RCC_PLL_IsReady+0x18>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_RCC_PLL_IsReady+0x1a>
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0303 	and.w	r3, r3, #3
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f6:	d101      	bne.n	80011fc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800121c:	d101      	bne.n	8001222 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001242:	d101      	bne.n	8001248 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001266:	d101      	bne.n	800126c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800128a:	d101      	bne.n	8001290 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e34b      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 808f 	beq.w	80013da <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012bc:	f7ff fe7d 	bl	8000fba <LL_RCC_GetSysClkSource>
 80012c0:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c2:	f7ff ff83 	bl	80011cc <LL_RCC_PLL_GetMainSource>
 80012c6:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x3e>
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d149      	bne.n	8001368 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d146      	bne.n	8001368 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012da:	f7ff fe0b 	bl	8000ef4 <LL_RCC_MSI_IsReady>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_OscConfig+0x54>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e32a      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80012f4:	f7ff fe23 	bl	8000f3e <LL_RCC_MSI_GetRange>
 80012f8:	4603      	mov	r3, r0
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d914      	bls.n	8001328 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd40 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e319      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fdfd 	bl	8000f16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe21 	bl	8000f68 <LL_RCC_MSI_SetCalibTrimming>
 8001326:	e013      	b.n	8001350 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fdf2 	bl	8000f16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe16 	bl	8000f68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd21 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e2fa      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001350:	f006 fc92 	bl	8007c78 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001354:	4bb4      	ldr	r3, [pc, #720]	; (8001628 <HAL_RCC_OscConfig+0x38c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f006 fbb1 	bl	8007ac0 <HAL_InitTick>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d039      	beq.n	80013d8 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e2ee      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01e      	beq.n	80013ae <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001370:	f7ff fda2 	bl	8000eb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001374:	f7ff f8c6 	bl	8000504 <HAL_GetTick>
 8001378:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137c:	f7ff f8c2 	bl	8000504 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e2db      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 800138e:	f7ff fdb1 	bl	8000ef4 <LL_RCC_MSI_IsReady>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f1      	beq.n	800137c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fdba 	bl	8000f16 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fdde 	bl	8000f68 <LL_RCC_MSI_SetCalibTrimming>
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ae:	f7ff fd92 	bl	8000ed6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b2:	f7ff f8a7 	bl	8000504 <HAL_GetTick>
 80013b6:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff f8a3 	bl	8000504 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e2bc      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 80013cc:	f7ff fd92 	bl	8000ef4 <LL_RCC_MSI_IsReady>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x11e>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d05a      	beq.n	800149c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e6:	f7ff fde8 	bl	8000fba <LL_RCC_GetSysClkSource>
 80013ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ec:	f7ff feee 	bl	80011cc <LL_RCC_PLL_GetMainSource>
 80013f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x168>
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d10d      	bne.n	800141a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d10a      	bne.n	800141a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	f7ff fbf8 	bl	8000bf8 <LL_RCC_HSE_IsReady>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d045      	beq.n	800149a <HAL_RCC_OscConfig+0x1fe>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d141      	bne.n	800149a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e295      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x18e>
 8001424:	f7ff fbca 	bl	8000bbc <LL_RCC_HSE_Enable>
 8001428:	e00d      	b.n	8001446 <HAL_RCC_OscConfig+0x1aa>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001432:	d104      	bne.n	800143e <HAL_RCC_OscConfig+0x1a2>
 8001434:	f7ff fba4 	bl	8000b80 <LL_RCC_HSE_EnableBypass>
 8001438:	f7ff fbc0 	bl	8000bbc <LL_RCC_HSE_Enable>
 800143c:	e003      	b.n	8001446 <HAL_RCC_OscConfig+0x1aa>
 800143e:	f7ff fbcc 	bl	8000bda <LL_RCC_HSE_Disable>
 8001442:	f7ff fbac 	bl	8000b9e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d012      	beq.n	8001474 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144e:	f7ff f859 	bl	8000504 <HAL_GetTick>
 8001452:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff f855 	bl	8000504 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e26e      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001468:	f7ff fbc6 	bl	8000bf8 <LL_RCC_HSE_IsReady>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f1      	beq.n	8001456 <HAL_RCC_OscConfig+0x1ba>
 8001472:	e013      	b.n	800149c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff f846 	bl	8000504 <HAL_GetTick>
 8001478:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff f842 	bl	8000504 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e25b      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 800148e:	f7ff fbb3 	bl	8000bf8 <LL_RCC_HSE_IsReady>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f1      	bne.n	800147c <HAL_RCC_OscConfig+0x1e0>
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d051      	beq.n	800154c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a8:	f7ff fd87 	bl	8000fba <LL_RCC_GetSysClkSource>
 80014ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ae:	f7ff fe8d 	bl	80011cc <LL_RCC_PLL_GetMainSource>
 80014b2:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x22a>
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d113      	bne.n	80014e8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d110      	bne.n	80014e8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c6:	f7ff fbc7 	bl	8000c58 <LL_RCC_HSI_IsReady>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x240>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e234      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbcb 	bl	8000c7c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e6:	e031      	b.n	800154c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d019      	beq.n	8001524 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	f7ff fb94 	bl	8000c1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff f806 	bl	8000504 <HAL_GetTick>
 80014f8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff f802 	bl	8000504 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e21b      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 800150e:	f7ff fba3 	bl	8000c58 <LL_RCC_HSI_IsReady>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f1      	beq.n	80014fc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fbad 	bl	8000c7c <LL_RCC_HSI_SetCalibTrimming>
 8001522:	e013      	b.n	800154c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001524:	f7ff fb89 	bl	8000c3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7fe ffec 	bl	8000504 <HAL_GetTick>
 800152c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7fe ffe8 	bl	8000504 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e201      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001542:	f7ff fb89 	bl	8000c58 <LL_RCC_HSI_IsReady>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f1      	bne.n	8001530 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a2 	beq.w	80016aa <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d075      	beq.n	800165a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d046      	beq.n	8001608 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800157a:	f7ff fc40 	bl	8000dfe <LL_RCC_LSI1_IsReady>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d113      	bne.n	80015ac <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001584:	f7ff fc19 	bl	8000dba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001588:	f7fe ffbc 	bl	8000504 <HAL_GetTick>
 800158c:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001590:	f7fe ffb8 	bl	8000504 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1d1      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80015a2:	f7ff fc2c 	bl	8000dfe <LL_RCC_LSI1_IsReady>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f1      	beq.n	8001590 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80015ac:	f7ff fc39 	bl	8000e22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7fe ffa8 	bl	8000504 <HAL_GetTick>
 80015b4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015b8:	f7fe ffa4 	bl	8000504 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1bd      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015ca:	f7ff fc4c 	bl	8000e66 <LL_RCC_LSI2_IsReady>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f1      	beq.n	80015b8 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fc56 	bl	8000e8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80015de:	f7ff fbfd 	bl	8000ddc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7fe ff8f 	bl	8000504 <HAL_GetTick>
 80015e6:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015ea:	f7fe ff8b 	bl	8000504 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1a4      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015fc:	f7ff fbff 	bl	8000dfe <LL_RCC_LSI1_IsReady>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f1      	bne.n	80015ea <HAL_RCC_OscConfig+0x34e>
 8001606:	e050      	b.n	80016aa <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001608:	f7ff fbd7 	bl	8000dba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7fe ff7a 	bl	8000504 <HAL_GetTick>
 8001610:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001614:	f7fe ff76 	bl	8000504 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d904      	bls.n	800162c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e18f      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
 8001626:	bf00      	nop
 8001628:	20000004 	.word	0x20000004
        while (LL_RCC_LSI1_IsReady() == 0U)
 800162c:	f7ff fbe7 	bl	8000dfe <LL_RCC_LSI1_IsReady>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0ee      	beq.n	8001614 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001636:	f7ff fc05 	bl	8000e44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800163c:	f7fe ff62 	bl	8000504 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e17b      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800164e:	f7ff fc0a 	bl	8000e66 <LL_RCC_LSI2_IsReady>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f1      	bne.n	800163c <HAL_RCC_OscConfig+0x3a0>
 8001658:	e027      	b.n	80016aa <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800165a:	f7ff fbf3 	bl	8000e44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7fe ff51 	bl	8000504 <HAL_GetTick>
 8001662:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001666:	f7fe ff4d 	bl	8000504 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b03      	cmp	r3, #3
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e166      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001678:	f7ff fbf5 	bl	8000e66 <LL_RCC_LSI2_IsReady>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f1      	bne.n	8001666 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001682:	f7ff fbab 	bl	8000ddc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7fe ff3d 	bl	8000504 <HAL_GetTick>
 800168a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800168e:	f7fe ff39 	bl	8000504 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e152      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80016a0:	f7ff fbad 	bl	8000dfe <LL_RCC_LSI1_IsReady>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f1      	bne.n	800168e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d05b      	beq.n	800176e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4ba6      	ldr	r3, [pc, #664]	; (8001950 <HAL_RCC_OscConfig+0x6b4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d114      	bne.n	80016ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80016c2:	f7ff fa2d 	bl	8000b20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c6:	f7fe ff1d 	bl	8000504 <HAL_GetTick>
 80016ca:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7fe ff19 	bl	8000504 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e132      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	4b9b      	ldr	r3, [pc, #620]	; (8001950 <HAL_RCC_OscConfig+0x6b4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x45e>
 80016f4:	f7ff fb0b 	bl	8000d0e <LL_RCC_LSE_Enable>
 80016f8:	e00c      	b.n	8001714 <HAL_RCC_OscConfig+0x478>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d104      	bne.n	800170c <HAL_RCC_OscConfig+0x470>
 8001702:	f7ff fb26 	bl	8000d52 <LL_RCC_LSE_EnableBypass>
 8001706:	f7ff fb02 	bl	8000d0e <LL_RCC_LSE_Enable>
 800170a:	e003      	b.n	8001714 <HAL_RCC_OscConfig+0x478>
 800170c:	f7ff fb10 	bl	8000d30 <LL_RCC_LSE_Disable>
 8001710:	f7ff fb30 	bl	8000d74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d014      	beq.n	8001746 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7fe fef2 	bl	8000504 <HAL_GetTick>
 8001720:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7fe feee 	bl	8000504 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e105      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 800173a:	f7ff fb2c 	bl	8000d96 <LL_RCC_LSE_IsReady>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x488>
 8001744:	e013      	b.n	800176e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7fe fedd 	bl	8000504 <HAL_GetTick>
 800174a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7fe fed9 	bl	8000504 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0f0      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001764:	f7ff fb17 	bl	8000d96 <LL_RCC_LSE_IsReady>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ef      	bne.n	800174e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	2b00      	cmp	r3, #0
 8001780:	d014      	beq.n	80017ac <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001782:	f7ff fa90 	bl	8000ca6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7fe febd 	bl	8000504 <HAL_GetTick>
 800178a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800178e:	f7fe feb9 	bl	8000504 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0d2      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80017a0:	f7ff faa3 	bl	8000cea <LL_RCC_HSI48_IsReady>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f1      	beq.n	800178e <HAL_RCC_OscConfig+0x4f2>
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ac:	f7ff fa8c 	bl	8000cc8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7fe fea8 	bl	8000504 <HAL_GetTick>
 80017b4:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7fe fea4 	bl	8000504 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0bd      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017ca:	f7ff fa8e 	bl	8000cea <LL_RCC_HSI48_IsReady>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f1      	bne.n	80017b8 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80b3 	beq.w	8001944 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017de:	f7ff fbec 	bl	8000fba <LL_RCC_GetSysClkSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d076      	beq.n	80018d6 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d14b      	bne.n	8001888 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	f7ff fca6 	bl	8001140 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7fe fe86 	bl	8000504 <HAL_GetTick>
 80017f8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7fe fe82 	bl	8000504 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e09b      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800180e:	f7ff fca6 	bl	800115e <LL_RCC_PLL_IsReady>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001818:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x6b8>)
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001834:	0212      	lsls	r2, r2, #8
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001848:	430a      	orrs	r2, r1
 800184a:	4313      	orrs	r3, r2
 800184c:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184e:	f7ff fc68 	bl	8001122 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7fe fe4f 	bl	8000504 <HAL_GetTick>
 8001866:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7fe fe4b 	bl	8000504 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e064      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 800187c:	f7ff fc6f 	bl	800115e <LL_RCC_PLL_IsReady>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f1      	beq.n	800186a <HAL_RCC_OscConfig+0x5ce>
 8001886:	e05d      	b.n	8001944 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001888:	f7ff fc5a 	bl	8001140 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800188c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800189c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7fe fe28 	bl	8000504 <HAL_GetTick>
 80018b4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7fe fe24 	bl	8000504 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e03d      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80018ca:	f7ff fc48 	bl	800115e <LL_RCC_PLL_IsReady>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f1      	bne.n	80018b8 <HAL_RCC_OscConfig+0x61c>
 80018d4:	e036      	b.n	8001944 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e031      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d123      	bne.n	8001940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d114      	bne.n	8001940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	bf00      	nop
 8001950:	58000400 	.word	0x58000400
 8001954:	11c1808c 	.word	0x11c1808c

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e12a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b97      	ldr	r3, [pc, #604]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0207 	and.w	r2, r3, #7
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d21b      	bcs.n	80019b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4994      	ldr	r1, [pc, #592]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 800197c:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0207 	bic.w	r2, r3, #7
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198a:	f7fe fdbb 	bl	8000504 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001992:	f7fe fdb7 	bl	8000504 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e10e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a4:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0207 	and.w	r2, r3, #7
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d016      	beq.n	80019ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb05 	bl	8000fd2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019c8:	f7fe fd9c 	bl	8000504 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019d0:	f7fe fd98 	bl	8000504 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e0ef      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80019e2:	f7ff fbff 	bl	80011e4 <LL_RCC_IsActiveFlag_HPRE>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f1      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fafc 	bl	8000ffa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a02:	f7fe fd7f 	bl	8000504 <HAL_GetTick>
 8001a06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a0a:	f7fe fd7b 	bl	8000504 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0d2      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a1c:	f7ff fbf4 	bl	8001208 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f1      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d016      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff faf5 	bl	8001026 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a3c:	f7fe fd62 	bl	8000504 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a44:	f7fe fd5e 	bl	8000504 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0b5      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a56:	f7ff fbea 	bl	800122e <LL_RCC_IsActiveFlag_SHDHPRE>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f1      	beq.n	8001a44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d016      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff faef 	bl	8001054 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a76:	f7fe fd45 	bl	8000504 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a7e:	f7fe fd41 	bl	8000504 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e098      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a90:	f7ff fbe0 	bl	8001254 <LL_RCC_IsActiveFlag_PPRE1>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f1      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d017      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fae5 	bl	800107c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ab2:	f7fe fd27 	bl	8000504 <HAL_GetTick>
 8001ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aba:	f7fe fd23 	bl	8000504 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e07a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001acc:	f7ff fbd4 	bl	8001278 <LL_RCC_IsActiveFlag_PPRE2>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f1      	beq.n	8001aba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d043      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001aea:	f7ff f885 	bl	8000bf8 <LL_RCC_HSE_IsReady>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11e      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e064      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b00:	f7ff fb2d 	bl	800115e <LL_RCC_PLL_IsReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d113      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e059      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b16:	f7ff f9ed 	bl	8000ef4 <LL_RCC_MSI_IsReady>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d108      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e04e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b24:	f7ff f898 	bl	8000c58 <LL_RCC_HSI_IsReady>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e047      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fa2b 	bl	8000f92 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b3c:	f7fe fce2 	bl	8000504 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7fe fcde 	bl	8000504 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e033      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5a:	f7ff fa2e 	bl	8000fba <LL_RCC_GetSysClkSource>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d1ec      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0207 	and.w	r2, r3, #7
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d91b      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	4914      	ldr	r1, [pc, #80]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7fe fcbc 	bl	8000504 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b90:	f7fe fcb8 	bl	8000504 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e00f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0207 	and.w	r2, r3, #7
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ef      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8001bb0:	f006 f862 	bl	8007c78 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001bb4:	f7fe fcb2 	bl	800051c <HAL_GetTickPrio>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 ff80 	bl	8007ac0 <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	58004000 	.word	0x58004000

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	f7ff f9f0 	bl	8000fba <LL_RCC_GetSysClkSource>
 8001bda:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001be2:	f7ff f9ac 	bl	8000f3e <LL_RCC_MSI_GetRange>
 8001be6:	4603      	mov	r3, r0
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e04a      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e044      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d10a      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c0a:	f7fe ffa7 	bl	8000b5c <LL_RCC_HSE_IsEnabledDiv2>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e039      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e036      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c20:	f7ff fad4 	bl	80011cc <LL_RCC_PLL_GetMainSource>
 8001c24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d002      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x62>
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d003      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x68>
 8001c30:	e00d      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c34:	60bb      	str	r3, [r7, #8]
        break;
 8001c36:	e015      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c38:	f7fe ff90 	bl	8000b5c <LL_RCC_HSE_IsEnabledDiv2>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c44:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c46:	e00d      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c4a:	60bb      	str	r3, [r7, #8]
        break;
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c4e:	f7ff f976 	bl	8000f3e <LL_RCC_MSI_GetRange>
 8001c52:	4603      	mov	r3, r0
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	60bb      	str	r3, [r7, #8]
        break;
 8001c62:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8001c64:	f7ff fa8d 	bl	8001182 <LL_RCC_PLL_GetN>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	fb03 f402 	mul.w	r4, r3, r2
 8001c70:	f7ff faa0 	bl	80011b4 <LL_RCC_PLL_GetDivider>
 8001c74:	4603      	mov	r3, r0
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	3301      	adds	r3, #1
 8001c7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c7e:	f7ff fa8d 	bl	800119c <LL_RCC_PLL_GetR>
 8001c82:	4603      	mov	r3, r0
 8001c84:	0f5b      	lsrs	r3, r3, #29
 8001c86:	3301      	adds	r3, #1
 8001c88:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	080081c4 	.word	0x080081c4
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	01e84800 	.word	0x01e84800

08001ca4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b598      	push	{r3, r4, r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ca8:	f7ff ff92 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001cac:	4604      	mov	r4, r0
 8001cae:	f7ff f9f9 	bl	80010a4 <LL_RCC_GetAHBPrescaler>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd98      	pop	{r3, r4, r7, pc}
 8001cc8:	08008164 	.word	0x08008164

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b598      	push	{r3, r4, r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cd0:	f7ff ffe8 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	f7ff fa0c 	bl	80010f2 <LL_RCC_GetAPB1Prescaler>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd98      	pop	{r3, r4, r7, pc}
 8001cf4:	080081a4 	.word	0x080081a4

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b598      	push	{r3, r4, r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001cfc:	f7ff ffd2 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001d00:	4604      	mov	r4, r0
 8001d02:	f7ff fa02 	bl	800110a <LL_RCC_GetAPB2Prescaler>
 8001d06:	4603      	mov	r3, r0
 8001d08:	0adb      	lsrs	r3, r3, #11
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd98      	pop	{r3, r4, r7, pc}
 8001d20:	080081a4 	.word	0x080081a4

08001d24 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	226f      	movs	r2, #111	; 0x6f
 8001d32:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8001d34:	f7ff f941 	bl	8000fba <LL_RCC_GetSysClkSource>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8001d3e:	f7ff f9b1 	bl	80010a4 <LL_RCC_GetAHBPrescaler>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8001d48:	f7ff f9d3 	bl	80010f2 <LL_RCC_GetAPB1Prescaler>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8001d52:	f7ff f9da 	bl	800110a <LL_RCC_GetAPB2Prescaler>
 8001d56:	4602      	mov	r2, r0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8001d5c:	f7ff f9ae 	bl	80010bc <LL_C2_RCC_GetAHBPrescaler>
 8001d60:	4602      	mov	r2, r0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8001d66:	f7ff f9b6 	bl	80010d6 <LL_RCC_GetAHB4Prescaler>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_RCC_GetClockConfig+0x60>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0207 	and.w	r2, r3, #7
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58004000 	.word	0x58004000

08001d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2bb0      	cmp	r3, #176	; 0xb0
 8001d94:	d903      	bls.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e007      	b.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001dae:	f7ff f992 	bl	80010d6 <LL_RCC_GetAHB4Prescaler>
 8001db2:	4603      	mov	r3, r0
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9c      	lsrs	r4, r3, #18
 8001dd2:	f7fe feb5 	bl	8000b40 <HAL_PWREx_GetVoltageRange>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f000 f80c 	bl	8001df8 <RCC_SetFlashLatency>
 8001de0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	080081c4 	.word	0x080081c4
 8001df0:	08008164 	.word	0x08008164
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b093      	sub	sp, #76	; 0x4c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <RCC_SetFlashLatency+0xf0>)
 8001e04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001e0e:	4a37      	ldr	r2, [pc, #220]	; (8001eec <RCC_SetFlashLatency+0xf4>)
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <RCC_SetFlashLatency+0xf8>)
 8001e1c:	f107 040c 	add.w	r4, r7, #12
 8001e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001e26:	2300      	movs	r3, #0
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e30:	d11c      	bne.n	8001e6c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	643b      	str	r3, [r7, #64]	; 0x40
 8001e36:	e015      	b.n	8001e64 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e40:	4413      	add	r3, r2
 8001e42:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d308      	bcc.n	8001e5e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e54:	4413      	add	r3, r2
 8001e56:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e5c:	e022      	b.n	8001ea4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e60:	3301      	adds	r3, #1
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
 8001e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d9e6      	bls.n	8001e38 <RCC_SetFlashLatency+0x40>
 8001e6a:	e01b      	b.n	8001ea4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e70:	e015      	b.n	8001e9e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d308      	bcc.n	8001e98 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e8e:	4413      	add	r3, r2
 8001e90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e96:	e005      	b.n	8001ea4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d9e6      	bls.n	8001e72 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea4:	4913      	ldr	r1, [pc, #76]	; (8001ef4 <RCC_SetFlashLatency+0xfc>)
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <RCC_SetFlashLatency+0xfc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001eb4:	f7fe fb26 	bl	8000504 <HAL_GetTick>
 8001eb8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001eba:	e008      	b.n	8001ece <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ebc:	f7fe fb22 	bl	8000504 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e007      	b.n	8001ede <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <RCC_SetFlashLatency+0xfc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0207 	and.w	r2, r3, #7
 8001ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1ef      	bne.n	8001ebc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	374c      	adds	r7, #76	; 0x4c
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	080080e8 	.word	0x080080e8
 8001eec:	080080f8 	.word	0x080080f8
 8001ef0:	08008104 	.word	0x08008104
 8001ef4:	58004000 	.word	0x58004000

08001ef8 <LL_RCC_LSE_IsEnabled>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <LL_RCC_LSE_IsEnabled+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_RCC_LSE_IsEnabled+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_LSE_IsReady>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d101      	bne.n	8001f34 <LL_RCC_LSE_IsReady+0x18>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <LL_RCC_LSE_IsReady+0x1a>
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_SetRFWKPClockSource>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_RCC_SetSMPSClockSource>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_RCC_SetSMPSPrescaler>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_SetUSARTClockSource>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f023 0203 	bic.w	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_RCC_SetLPUARTClockSource>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_RCC_SetI2CClockSource>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800201c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_RCC_SetLPTIMClockSource>:
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	041b      	lsls	r3, r3, #16
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_SetSAIClockSource>:
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800208a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_RCC_SetRNGClockSource>:
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80020b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_RCC_SetCLK48ClockSource>:
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80020e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_RCC_SetUSBClockSource>:
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffe3 	bl	80020da <LL_RCC_SetCLK48ClockSource>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <LL_RCC_SetADCClockSource>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_SetRTCClockSource>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_GetRTCClockSource>:
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_RCC_ForceBackupDomainReset>:
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_RCC_PLLSAI1_Enable>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80021d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021e4:	6013      	str	r3, [r2, #0]
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_PLLSAI1_Disable>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80021f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_RCC_PLLSAI1_IsReady>:
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002220:	d101      	bne.n	8002226 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b088      	sub	sp, #32
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800223a:	2300      	movs	r3, #0
 800223c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800223e:	2300      	movs	r3, #0
 8002240:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d033      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002256:	d00c      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225c:	d802      	bhi.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002262:	e017      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002268:	d017      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x68>
 800226a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800226e:	d016      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002270:	e010      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002282:	e00d      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f947 	bl	800251c <RCCEx_PLLSAI1_ConfigNP>
 800228e:	4603      	mov	r3, r0
 8002290:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002292:	e005      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
        break;
 8002298:	e002      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800229a:	bf00      	nop
 800229c:	e000      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800229e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fee9 	bl	8002082 <LL_RCC_SetSAIClockSource>
 80022b0:	e001      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d046      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80022c2:	f7ff ff57 	bl	8002174 <LL_RCC_GetRTCClockSource>
 80022c6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d03c      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022d2:	f7fe fc25 	bl	8000b20 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff31 	bl	8002148 <LL_RCC_SetRTCClockSource>
 80022e6:	e02e      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80022f2:	f7ff ff4c 	bl	800218e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80022f6:	f7ff ff5b 	bl	80021b0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002312:	f7ff fdf1 	bl	8001ef8 <LL_RCC_LSE_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b01      	cmp	r3, #1
 800231a:	d114      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800231c:	f7fe f8f2 	bl	8000504 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002322:	e00b      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe f8ee 	bl	8000504 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d902      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	77fb      	strb	r3, [r7, #31]
              break;
 800233a:	e004      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800233c:	f7ff fdee 	bl	8001f1c <LL_RCC_LSE_IsReady>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	d1ee      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002346:	7ffb      	ldrb	r3, [r7, #31]
 8002348:	77bb      	strb	r3, [r7, #30]
 800234a:	e001      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe2b 	bl	8001fbc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe36 	bl	8001fe8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe5e 	bl	800204e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fe53 	bl	800204e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fe2b 	bl	8002014 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe20 	bl	8002014 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d022      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe8e 	bl	8002106 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f2:	d107      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80023f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002402:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800240c:	d10b      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f8dd 	bl	80025d2 <RCCEx_PLLSAI1_ConfigNQ>
 8002418:	4603      	mov	r3, r0
 800241a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8002422:	7ffb      	ldrb	r3, [r7, #31]
 8002424:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d02b      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d008      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002444:	d003      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fe2b 	bl	80020ae <LL_RCC_SetRNGClockSource>
 8002458:	e00a      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fe22 	bl	80020ae <LL_RCC_SetRNGClockSource>
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff fe35 	bl	80020da <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002478:	d107      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800247a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002488:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d022      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fe3e 	bl	800211c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a8:	d107      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f8dd 	bl	8002688 <RCCEx_PLLSAI1_ConfigNR>
 80024ce:	4603      	mov	r3, r0
 80024d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
 80024da:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d004      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fd27 	bl	8001f40 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fd46 	bl	8001f94 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fd2d 	bl	8001f6c <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8002512:	7fbb      	ldrb	r3, [r7, #30]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002528:	f7ff fe62 	bl	80021f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800252c:	f7fd ffea 	bl	8000504 <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002532:	e009      	b.n	8002548 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002534:	f7fd ffe6 	bl	8000504 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d902      	bls.n	8002548 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	73fb      	strb	r3, [r7, #15]
      break;
 8002546:	e004      	b.n	8002552 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002548:	f7ff fe61 	bl	800220e <LL_RCC_PLLSAI1_IsReady>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d137      	bne.n	80025c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	4313      	orrs	r3, r2
 800256e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4313      	orrs	r3, r2
 8002584:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002586:	f7ff fe24 	bl	80021d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258a:	f7fd ffbb 	bl	8000504 <HAL_GetTick>
 800258e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002590:	e009      	b.n	80025a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002592:	f7fd ffb7 	bl	8000504 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d902      	bls.n	80025a6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	73fb      	strb	r3, [r7, #15]
        break;
 80025a4:	e004      	b.n	80025b0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025a6:	f7ff fe32 	bl	800220e <LL_RCC_PLLSAI1_IsReady>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d1f0      	bne.n	8002592 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80025b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80025de:	f7ff fe07 	bl	80021f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025e2:	f7fd ff8f 	bl	8000504 <HAL_GetTick>
 80025e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025e8:	e009      	b.n	80025fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ea:	f7fd ff8b 	bl	8000504 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d902      	bls.n	80025fe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e004      	b.n	8002608 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80025fe:	f7ff fe06 	bl	800220e <LL_RCC_PLLSAI1_IsReady>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d137      	bne.n	800267e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800260e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	4313      	orrs	r3, r2
 8002624:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4313      	orrs	r3, r2
 800263a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800263c:	f7ff fdc9 	bl	80021d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	f7fd ff60 	bl	8000504 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002648:	f7fd ff5c 	bl	8000504 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
        break;
 800265a:	e004      	b.n	8002666 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800265c:	f7ff fdd7 	bl	800220e <LL_RCC_PLLSAI1_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d1f0      	bne.n	8002648 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800266c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002694:	f7ff fdac 	bl	80021f0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002698:	f7fd ff34 	bl	8000504 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800269e:	e009      	b.n	80026b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026a0:	f7fd ff30 	bl	8000504 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	73fb      	strb	r3, [r7, #15]
      break;
 80026b2:	e004      	b.n	80026be <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026b4:	f7ff fdab 	bl	800220e <LL_RCC_PLLSAI1_IsReady>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d137      	bne.n	8002734 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80026c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	4313      	orrs	r3, r2
 80026da:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80026dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80026f2:	f7ff fd6e 	bl	80021d2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f6:	f7fd ff05 	bl	8000504 <HAL_GetTick>
 80026fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026fc:	e009      	b.n	8002712 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fe:	f7fd ff01 	bl	8000504 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d902      	bls.n	8002712 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	73fb      	strb	r3, [r7, #15]
        break;
 8002710:	e004      	b.n	800271c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002712:	f7ff fd7c 	bl	800220e <LL_RCC_PLLSAI1_IsReady>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d1f0      	bne.n	80026fe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e01d      	b.n	800278c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 fb69 	bl	8007e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f000 f9a5 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_TIM_Base_Start+0x50>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d00b      	beq.n	80027ce <HAL_TIM_Base_Start+0x3a>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d007      	beq.n	80027ce <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	00010007 	.word	0x00010007

080027e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	68d2      	ldr	r2, [r2, #12]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_TIM_Base_Start_IT+0x50>)
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d00b      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x42>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d007      	beq.n	800282a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	00010007 	.word	0x00010007

0800283c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d122      	bne.n	8002898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d11b      	bne.n	8002898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0202 	mvn.w	r2, #2
 8002868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f905 	bl	8002a8e <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8f7 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f908 	bl	8002aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d122      	bne.n	80028ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d11b      	bne.n	80028ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0204 	mvn.w	r2, #4
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f8db 	bl	8002a8e <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8cd 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f8de 	bl	8002aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b08      	cmp	r3, #8
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8b1 	bl	8002a8e <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8a3 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f8b4 	bl	8002aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b10      	cmp	r3, #16
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0210 	mvn.w	r2, #16
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2208      	movs	r2, #8
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f887 	bl	8002a8e <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f879 	bl	8002a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f88a 	bl	8002aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0201 	mvn.w	r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f005 f844 	bl	8007a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8de 	bl	8002ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	d10e      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b80      	cmp	r3, #128	; 0x80
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f8d1 	bl	8002bbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f838 	bl	8002ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d10e      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d107      	bne.n	8002a72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0220 	mvn.w	r2, #32
 8002a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f891 	bl	8002b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <TIM_Base_SetConfig+0xbc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x20>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <TIM_Base_SetConfig+0xbc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <TIM_Base_SetConfig+0x52>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d007      	beq.n	8002b1e <TIM_Base_SetConfig+0x52>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <TIM_Base_SetConfig+0xc0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <TIM_Base_SetConfig+0x52>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <TIM_Base_SetConfig+0xc4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d108      	bne.n	8002b30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <TIM_Base_SetConfig+0xbc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <TIM_Base_SetConfig+0xa0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <TIM_Base_SetConfig+0xc0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <TIM_Base_SetConfig+0xa0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <TIM_Base_SetConfig+0xc4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d103      	bne.n	8002b74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	615a      	str	r2, [r3, #20]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800

08002b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_GetUSARTClockSource>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4013      	ands	r3, r2
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_GetLPUARTClockSource>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4013      	ands	r3, r2
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e042      	b.n	8002ca8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f005 f99b 	bl	8007f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2224      	movs	r2, #36	; 0x24
 8002c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa58 	bl	8003108 <UART_SetConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e022      	b.n	8002ca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 fa9c 	bl	80041a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	6852      	ldr	r2, [r2, #4]
 8002c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	6892      	ldr	r2, [r2, #8]
 8002c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f001 fb23 	bl	80042ec <UART_CheckIdleState>
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 8082 	bne.w	8002dd0 <HAL_UART_Transmit+0x120>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_UART_Transmit+0x28>
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e07a      	b.n	8002dd2 <HAL_UART_Transmit+0x122>
    }

    __HAL_LOCK(huart);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Transmit+0x3a>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e073      	b.n	8002dd2 <HAL_UART_Transmit+0x122>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002d02:	f7fd fbff 	bl	8000504 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d20:	d108      	bne.n	8002d34 <HAL_UART_Transmit+0x84>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e003      	b.n	8002d3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d3c:	e02b      	b.n	8002d96 <HAL_UART_Transmit+0xe6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f001 fb17 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e03c      	b.n	8002dd2 <HAL_UART_Transmit+0x122>
      }
      if (pdata8bits == NULL)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_UART_Transmit+0xc4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	8812      	ldrh	r2, [r2, #0]
 8002d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e007      	b.n	8002d84 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3301      	adds	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1cd      	bne.n	8002d3e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f001 fae5 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e00a      	b.n	8002dd2 <HAL_UART_Transmit+0x122>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_Transmit+0x122>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d118      	bne.n	8002e3e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d013      	beq.n	8002e3e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8145 	beq.w	80030be <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
      }
      return;
 8002e3c:	e13f      	b.n	80030be <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80e8 	beq.w	8003016 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <HAL_UART_IRQHandler+0x2f4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4ba0      	ldr	r3, [pc, #640]	; (80030d4 <HAL_UART_IRQHandler+0x2f8>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80dd 	beq.w	8003016 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <HAL_UART_IRQHandler+0xac>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_UART_IRQHandler+0xd8>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f043 0204 	orr.w	r2, r3, #4
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x104>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d104      	bne.n	8002efe <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_UART_IRQHandler+0x2f4>)
 8002ef8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2208      	movs	r2, #8
 8002f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f043 0208 	orr.w	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d011      	beq.n	8002f44 <HAL_UART_IRQHandler+0x168>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80b9 	beq.w	80030c2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d011      	beq.n	8002f7e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f84:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d004      	beq.n	8002f9e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d031      	beq.n	8003002 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 fa6c 	bl	800447c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d123      	bne.n	8002ffa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	6892      	ldr	r2, [r2, #8]
 8002fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d013      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fce:	4a42      	ldr	r2, [pc, #264]	; (80030d8 <HAL_UART_IRQHandler+0x2fc>)
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fb8a 	bl	80006f0 <HAL_DMA_Abort_IT>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002fec:	4610      	mov	r0, r2
 8002fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e00f      	b.n	8003012 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f87c 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	e00b      	b.n	8003012 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f878 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	e007      	b.n	8003012 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f874 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003010:	e057      	b.n	80030c2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003012:	bf00      	nop
    return;
 8003014:	e055      	b.n	80030c2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_UART_IRQHandler+0x260>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 fa74 	bl	8004522 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800303a:	e045      	b.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d012      	beq.n	800306c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	2b00      	cmp	r3, #0
 8003060:	d031      	beq.n	80030c6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
    }
    return;
 800306a:	e02c      	b.n	80030c6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_UART_IRQHandler+0x2ac>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f001 fa34 	bl	80044ee <UART_EndTransmit_IT>
    return;
 8003086:	e01f      	b.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_UART_IRQHandler+0x2c8>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f001 fa54 	bl	800454a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a2:	e011      	b.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da09      	bge.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f001 fa3e 	bl	8004536 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030ba:	bf00      	nop
 80030bc:	e004      	b.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80030c6:	bf00      	nop
  }
}
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	10000001 	.word	0x10000001
 80030d4:	04000120 	.word	0x04000120
 80030d8:	080044c3 	.word	0x080044c3

080030dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	0000      	movs	r0, r0
	...

08003108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800310c:	b08b      	sub	sp, #44	; 0x2c
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4313      	orrs	r3, r2
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	4313      	orrs	r3, r2
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	4ba4      	ldr	r3, [pc, #656]	; (80033dc <UART_SetConfig+0x2d4>)
 800314c:	400b      	ands	r3, r1
 800314e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003150:	430b      	orrs	r3, r1
 8003152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	6852      	ldr	r2, [r2, #4]
 800315e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68d2      	ldr	r2, [r2, #12]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a9a      	ldr	r2, [pc, #616]	; (80033e0 <UART_SetConfig+0x2d8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	4313      	orrs	r3, r2
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003192:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003198:	430b      	orrs	r3, r1
 800319a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031a6:	f022 010f 	bic.w	r1, r2, #15
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ae:	430a      	orrs	r2, r1
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a8b      	ldr	r2, [pc, #556]	; (80033e4 <UART_SetConfig+0x2dc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d126      	bne.n	800320a <UART_SetConfig+0x102>
 80031bc:	2003      	movs	r0, #3
 80031be:	f7ff fd07 	bl	8002bd0 <LL_RCC_GetUSARTClockSource>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d81b      	bhi.n	8003200 <UART_SetConfig+0xf8>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0xc8>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f9 	.word	0x080031f9
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e6:	e042      	b.n	800326e <UART_SetConfig+0x166>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e03e      	b.n	800326e <UART_SetConfig+0x166>
 80031f0:	2304      	movs	r3, #4
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e03a      	b.n	800326e <UART_SetConfig+0x166>
 80031f8:	2308      	movs	r3, #8
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e036      	b.n	800326e <UART_SetConfig+0x166>
 8003200:	2310      	movs	r3, #16
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	bf00      	nop
 8003208:	e031      	b.n	800326e <UART_SetConfig+0x166>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a74      	ldr	r2, [pc, #464]	; (80033e0 <UART_SetConfig+0x2d8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d129      	bne.n	8003268 <UART_SetConfig+0x160>
 8003214:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003218:	f7ff fcea 	bl	8002bf0 <LL_RCC_GetLPUARTClockSource>
 800321c:	4603      	mov	r3, r0
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d014      	beq.n	800324e <UART_SetConfig+0x146>
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	d802      	bhi.n	8003230 <UART_SetConfig+0x128>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <UART_SetConfig+0x136>
 800322e:	e016      	b.n	800325e <UART_SetConfig+0x156>
 8003230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003234:	d007      	beq.n	8003246 <UART_SetConfig+0x13e>
 8003236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800323a:	d00c      	beq.n	8003256 <UART_SetConfig+0x14e>
 800323c:	e00f      	b.n	800325e <UART_SetConfig+0x156>
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003244:	e013      	b.n	800326e <UART_SetConfig+0x166>
 8003246:	2302      	movs	r3, #2
 8003248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324c:	e00f      	b.n	800326e <UART_SetConfig+0x166>
 800324e:	2304      	movs	r3, #4
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003254:	e00b      	b.n	800326e <UART_SetConfig+0x166>
 8003256:	2308      	movs	r3, #8
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325c:	e007      	b.n	800326e <UART_SetConfig+0x166>
 800325e:	2310      	movs	r3, #16
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <UART_SetConfig+0x166>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5b      	ldr	r2, [pc, #364]	; (80033e0 <UART_SetConfig+0x2d8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	f040 8413 	bne.w	8003aa0 <UART_SetConfig+0x998>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327e:	2b08      	cmp	r3, #8
 8003280:	f200 8173 	bhi.w	800356a <UART_SetConfig+0x462>
 8003284:	a201      	add	r2, pc, #4	; (adr r2, 800328c <UART_SetConfig+0x184>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032b1 	.word	0x080032b1
 8003290:	0800356b 	.word	0x0800356b
 8003294:	08003353 	.word	0x08003353
 8003298:	0800356b 	.word	0x0800356b
 800329c:	0800341b 	.word	0x0800341b
 80032a0:	0800356b 	.word	0x0800356b
 80032a4:	0800356b 	.word	0x0800356b
 80032a8:	0800356b 	.word	0x0800356b
 80032ac:	080034bd 	.word	0x080034bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80032b0:	f7fe fd0c 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d044      	beq.n	8003348 <UART_SetConfig+0x240>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d03e      	beq.n	8003344 <UART_SetConfig+0x23c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d038      	beq.n	8003340 <UART_SetConfig+0x238>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d032      	beq.n	800333c <UART_SetConfig+0x234>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d02c      	beq.n	8003338 <UART_SetConfig+0x230>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d026      	beq.n	8003334 <UART_SetConfig+0x22c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d020      	beq.n	8003330 <UART_SetConfig+0x228>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2b07      	cmp	r3, #7
 80032f4:	d01a      	beq.n	800332c <UART_SetConfig+0x224>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d014      	beq.n	8003328 <UART_SetConfig+0x220>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b09      	cmp	r3, #9
 8003304:	d00e      	beq.n	8003324 <UART_SetConfig+0x21c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d008      	beq.n	8003320 <UART_SetConfig+0x218>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b0b      	cmp	r3, #11
 8003314:	d102      	bne.n	800331c <UART_SetConfig+0x214>
 8003316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331a:	e016      	b.n	800334a <UART_SetConfig+0x242>
 800331c:	2301      	movs	r3, #1
 800331e:	e014      	b.n	800334a <UART_SetConfig+0x242>
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	e012      	b.n	800334a <UART_SetConfig+0x242>
 8003324:	2340      	movs	r3, #64	; 0x40
 8003326:	e010      	b.n	800334a <UART_SetConfig+0x242>
 8003328:	2320      	movs	r3, #32
 800332a:	e00e      	b.n	800334a <UART_SetConfig+0x242>
 800332c:	2310      	movs	r3, #16
 800332e:	e00c      	b.n	800334a <UART_SetConfig+0x242>
 8003330:	230c      	movs	r3, #12
 8003332:	e00a      	b.n	800334a <UART_SetConfig+0x242>
 8003334:	230a      	movs	r3, #10
 8003336:	e008      	b.n	800334a <UART_SetConfig+0x242>
 8003338:	2308      	movs	r3, #8
 800333a:	e006      	b.n	800334a <UART_SetConfig+0x242>
 800333c:	2306      	movs	r3, #6
 800333e:	e004      	b.n	800334a <UART_SetConfig+0x242>
 8003340:	2304      	movs	r3, #4
 8003342:	e002      	b.n	800334a <UART_SetConfig+0x242>
 8003344:	2302      	movs	r3, #2
 8003346:	e000      	b.n	800334a <UART_SetConfig+0x242>
 8003348:	2301      	movs	r3, #1
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
        break;
 8003350:	e10e      	b.n	8003570 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b00      	cmp	r3, #0
 8003358:	d05c      	beq.n	8003414 <UART_SetConfig+0x30c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b01      	cmp	r3, #1
 8003360:	d056      	beq.n	8003410 <UART_SetConfig+0x308>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	2b02      	cmp	r3, #2
 8003368:	d050      	beq.n	800340c <UART_SetConfig+0x304>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	2b03      	cmp	r3, #3
 8003370:	d032      	beq.n	80033d8 <UART_SetConfig+0x2d0>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b04      	cmp	r3, #4
 8003378:	d02c      	beq.n	80033d4 <UART_SetConfig+0x2cc>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	2b05      	cmp	r3, #5
 8003380:	d026      	beq.n	80033d0 <UART_SetConfig+0x2c8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	2b06      	cmp	r3, #6
 8003388:	d020      	beq.n	80033cc <UART_SetConfig+0x2c4>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b07      	cmp	r3, #7
 8003390:	d01a      	beq.n	80033c8 <UART_SetConfig+0x2c0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b08      	cmp	r3, #8
 8003398:	d014      	beq.n	80033c4 <UART_SetConfig+0x2bc>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b09      	cmp	r3, #9
 80033a0:	d00e      	beq.n	80033c0 <UART_SetConfig+0x2b8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b0a      	cmp	r3, #10
 80033a8:	d008      	beq.n	80033bc <UART_SetConfig+0x2b4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b0b      	cmp	r3, #11
 80033b0:	d102      	bne.n	80033b8 <UART_SetConfig+0x2b0>
 80033b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80033b6:	e02e      	b.n	8003416 <UART_SetConfig+0x30e>
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <UART_SetConfig+0x2e0>)
 80033ba:	e02c      	b.n	8003416 <UART_SetConfig+0x30e>
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <UART_SetConfig+0x2e4>)
 80033be:	e02a      	b.n	8003416 <UART_SetConfig+0x30e>
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <UART_SetConfig+0x2e8>)
 80033c2:	e028      	b.n	8003416 <UART_SetConfig+0x30e>
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <UART_SetConfig+0x2ec>)
 80033c6:	e026      	b.n	8003416 <UART_SetConfig+0x30e>
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <UART_SetConfig+0x2f0>)
 80033ca:	e024      	b.n	8003416 <UART_SetConfig+0x30e>
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <UART_SetConfig+0x2f4>)
 80033ce:	e022      	b.n	8003416 <UART_SetConfig+0x30e>
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <UART_SetConfig+0x2f8>)
 80033d2:	e020      	b.n	8003416 <UART_SetConfig+0x30e>
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <UART_SetConfig+0x2fc>)
 80033d6:	e01e      	b.n	8003416 <UART_SetConfig+0x30e>
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <UART_SetConfig+0x300>)
 80033da:	e01c      	b.n	8003416 <UART_SetConfig+0x30e>
 80033dc:	cfff69f3 	.word	0xcfff69f3
 80033e0:	40008000 	.word	0x40008000
 80033e4:	40013800 	.word	0x40013800
 80033e8:	00f42400 	.word	0x00f42400
 80033ec:	0001e848 	.word	0x0001e848
 80033f0:	0003d090 	.word	0x0003d090
 80033f4:	0007a120 	.word	0x0007a120
 80033f8:	000f4240 	.word	0x000f4240
 80033fc:	00145855 	.word	0x00145855
 8003400:	00186a00 	.word	0x00186a00
 8003404:	001e8480 	.word	0x001e8480
 8003408:	0028b0aa 	.word	0x0028b0aa
 800340c:	4ba7      	ldr	r3, [pc, #668]	; (80036ac <UART_SetConfig+0x5a4>)
 800340e:	e002      	b.n	8003416 <UART_SetConfig+0x30e>
 8003410:	4ba7      	ldr	r3, [pc, #668]	; (80036b0 <UART_SetConfig+0x5a8>)
 8003412:	e000      	b.n	8003416 <UART_SetConfig+0x30e>
 8003414:	4ba7      	ldr	r3, [pc, #668]	; (80036b4 <UART_SetConfig+0x5ac>)
 8003416:	617b      	str	r3, [r7, #20]
        break;
 8003418:	e0aa      	b.n	8003570 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800341a:	f7fe fbd9 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d044      	beq.n	80034b2 <UART_SetConfig+0x3aa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b01      	cmp	r3, #1
 800342e:	d03e      	beq.n	80034ae <UART_SetConfig+0x3a6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2b02      	cmp	r3, #2
 8003436:	d038      	beq.n	80034aa <UART_SetConfig+0x3a2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b03      	cmp	r3, #3
 800343e:	d032      	beq.n	80034a6 <UART_SetConfig+0x39e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b04      	cmp	r3, #4
 8003446:	d02c      	beq.n	80034a2 <UART_SetConfig+0x39a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b05      	cmp	r3, #5
 800344e:	d026      	beq.n	800349e <UART_SetConfig+0x396>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2b06      	cmp	r3, #6
 8003456:	d020      	beq.n	800349a <UART_SetConfig+0x392>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b07      	cmp	r3, #7
 800345e:	d01a      	beq.n	8003496 <UART_SetConfig+0x38e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b08      	cmp	r3, #8
 8003466:	d014      	beq.n	8003492 <UART_SetConfig+0x38a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b09      	cmp	r3, #9
 800346e:	d00e      	beq.n	800348e <UART_SetConfig+0x386>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b0a      	cmp	r3, #10
 8003476:	d008      	beq.n	800348a <UART_SetConfig+0x382>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d102      	bne.n	8003486 <UART_SetConfig+0x37e>
 8003480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003484:	e016      	b.n	80034b4 <UART_SetConfig+0x3ac>
 8003486:	2301      	movs	r3, #1
 8003488:	e014      	b.n	80034b4 <UART_SetConfig+0x3ac>
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	e012      	b.n	80034b4 <UART_SetConfig+0x3ac>
 800348e:	2340      	movs	r3, #64	; 0x40
 8003490:	e010      	b.n	80034b4 <UART_SetConfig+0x3ac>
 8003492:	2320      	movs	r3, #32
 8003494:	e00e      	b.n	80034b4 <UART_SetConfig+0x3ac>
 8003496:	2310      	movs	r3, #16
 8003498:	e00c      	b.n	80034b4 <UART_SetConfig+0x3ac>
 800349a:	230c      	movs	r3, #12
 800349c:	e00a      	b.n	80034b4 <UART_SetConfig+0x3ac>
 800349e:	230a      	movs	r3, #10
 80034a0:	e008      	b.n	80034b4 <UART_SetConfig+0x3ac>
 80034a2:	2308      	movs	r3, #8
 80034a4:	e006      	b.n	80034b4 <UART_SetConfig+0x3ac>
 80034a6:	2306      	movs	r3, #6
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x3ac>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e002      	b.n	80034b4 <UART_SetConfig+0x3ac>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e000      	b.n	80034b4 <UART_SetConfig+0x3ac>
 80034b2:	2301      	movs	r3, #1
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	617b      	str	r3, [r7, #20]
        break;
 80034ba:	e059      	b.n	8003570 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d04e      	beq.n	8003562 <UART_SetConfig+0x45a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d047      	beq.n	800355c <UART_SetConfig+0x454>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d040      	beq.n	8003556 <UART_SetConfig+0x44e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d039      	beq.n	8003550 <UART_SetConfig+0x448>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d032      	beq.n	800354a <UART_SetConfig+0x442>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d02b      	beq.n	8003544 <UART_SetConfig+0x43c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d024      	beq.n	800353e <UART_SetConfig+0x436>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b07      	cmp	r3, #7
 80034fa:	d01d      	beq.n	8003538 <UART_SetConfig+0x430>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b08      	cmp	r3, #8
 8003502:	d016      	beq.n	8003532 <UART_SetConfig+0x42a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b09      	cmp	r3, #9
 800350a:	d00f      	beq.n	800352c <UART_SetConfig+0x424>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b0a      	cmp	r3, #10
 8003512:	d008      	beq.n	8003526 <UART_SetConfig+0x41e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	2b0b      	cmp	r3, #11
 800351a:	d101      	bne.n	8003520 <UART_SetConfig+0x418>
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	e022      	b.n	8003566 <UART_SetConfig+0x45e>
 8003520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003524:	e01f      	b.n	8003566 <UART_SetConfig+0x45e>
 8003526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800352a:	e01c      	b.n	8003566 <UART_SetConfig+0x45e>
 800352c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003530:	e019      	b.n	8003566 <UART_SetConfig+0x45e>
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	e016      	b.n	8003566 <UART_SetConfig+0x45e>
 8003538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800353c:	e013      	b.n	8003566 <UART_SetConfig+0x45e>
 800353e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003542:	e010      	b.n	8003566 <UART_SetConfig+0x45e>
 8003544:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003548:	e00d      	b.n	8003566 <UART_SetConfig+0x45e>
 800354a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800354e:	e00a      	b.n	8003566 <UART_SetConfig+0x45e>
 8003550:	f241 5355 	movw	r3, #5461	; 0x1555
 8003554:	e007      	b.n	8003566 <UART_SetConfig+0x45e>
 8003556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800355a:	e004      	b.n	8003566 <UART_SetConfig+0x45e>
 800355c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003560:	e001      	b.n	8003566 <UART_SetConfig+0x45e>
 8003562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003566:	617b      	str	r3, [r7, #20]
        break;
 8003568:	e002      	b.n	8003570 <UART_SetConfig+0x468>
      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	76fb      	strb	r3, [r7, #27]
        break;
 800356e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 85ee 	beq.w	8004154 <UART_SetConfig+0x104c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	441a      	add	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	d805      	bhi.n	8003594 <UART_SetConfig+0x48c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d203      	bcs.n	800359c <UART_SetConfig+0x494>
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	76fb      	strb	r3, [r7, #27]
 8003598:	f000 bddc 	b.w	8004154 <UART_SetConfig+0x104c>
      }
      else
      {
        switch (clocksource)
 800359c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	f200 826a 	bhi.w	8003a7a <UART_SetConfig+0x972>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0x4a4>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035d1 	.word	0x080035d1
 80035b0:	08003a7b 	.word	0x08003a7b
 80035b4:	0800370d 	.word	0x0800370d
 80035b8:	08003a7b 	.word	0x08003a7b
 80035bc:	080037fd 	.word	0x080037fd
 80035c0:	08003a7b 	.word	0x08003a7b
 80035c4:	08003a7b 	.word	0x08003a7b
 80035c8:	08003a7b 	.word	0x08003a7b
 80035cc:	08003927 	.word	0x08003927
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80035d0:	f7fe fb7c 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 80035d4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4618      	mov	r0, r3
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d06d      	beq.n	80036c2 <UART_SetConfig+0x5ba>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d064      	beq.n	80036b8 <UART_SetConfig+0x5b0>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d055      	beq.n	80036a2 <UART_SetConfig+0x59a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d04c      	beq.n	8003698 <UART_SetConfig+0x590>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b04      	cmp	r3, #4
 8003604:	d043      	beq.n	800368e <UART_SetConfig+0x586>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b05      	cmp	r3, #5
 800360c:	d03a      	beq.n	8003684 <UART_SetConfig+0x57c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b06      	cmp	r3, #6
 8003614:	d031      	beq.n	800367a <UART_SetConfig+0x572>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b07      	cmp	r3, #7
 800361c:	d028      	beq.n	8003670 <UART_SetConfig+0x568>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b08      	cmp	r3, #8
 8003624:	d01f      	beq.n	8003666 <UART_SetConfig+0x55e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b09      	cmp	r3, #9
 800362c:	d016      	beq.n	800365c <UART_SetConfig+0x554>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b0a      	cmp	r3, #10
 8003634:	d00d      	beq.n	8003652 <UART_SetConfig+0x54a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b0b      	cmp	r3, #11
 800363c:	d104      	bne.n	8003648 <UART_SetConfig+0x540>
 800363e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	e040      	b.n	80036ca <UART_SetConfig+0x5c2>
 8003648:	f04f 0301 	mov.w	r3, #1
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	e03b      	b.n	80036ca <UART_SetConfig+0x5c2>
 8003652:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	e036      	b.n	80036ca <UART_SetConfig+0x5c2>
 800365c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	e031      	b.n	80036ca <UART_SetConfig+0x5c2>
 8003666:	f04f 0320 	mov.w	r3, #32
 800366a:	f04f 0400 	mov.w	r4, #0
 800366e:	e02c      	b.n	80036ca <UART_SetConfig+0x5c2>
 8003670:	f04f 0310 	mov.w	r3, #16
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	e027      	b.n	80036ca <UART_SetConfig+0x5c2>
 800367a:	f04f 030c 	mov.w	r3, #12
 800367e:	f04f 0400 	mov.w	r4, #0
 8003682:	e022      	b.n	80036ca <UART_SetConfig+0x5c2>
 8003684:	f04f 030a 	mov.w	r3, #10
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	e01d      	b.n	80036ca <UART_SetConfig+0x5c2>
 800368e:	f04f 0308 	mov.w	r3, #8
 8003692:	f04f 0400 	mov.w	r4, #0
 8003696:	e018      	b.n	80036ca <UART_SetConfig+0x5c2>
 8003698:	f04f 0306 	mov.w	r3, #6
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	e013      	b.n	80036ca <UART_SetConfig+0x5c2>
 80036a2:	f04f 0304 	mov.w	r3, #4
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	e00e      	b.n	80036ca <UART_SetConfig+0x5c2>
 80036ac:	003d0900 	.word	0x003d0900
 80036b0:	007a1200 	.word	0x007a1200
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	f04f 0302 	mov.w	r3, #2
 80036bc:	f04f 0400 	mov.w	r4, #0
 80036c0:	e003      	b.n	80036ca <UART_SetConfig+0x5c2>
 80036c2:	f04f 0301 	mov.w	r3, #1
 80036c6:	f04f 0400 	mov.w	r4, #0
 80036ca:	461a      	mov	r2, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	f7fc fd5f 	bl	8000190 <__aeabi_uldivmod>
 80036d2:	4603      	mov	r3, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80036da:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80036de:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	f04f 0400 	mov.w	r4, #0
 80036ec:	eb18 0003 	adds.w	r0, r8, r3
 80036f0:	eb49 0104 	adc.w	r1, r9, r4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	461a      	mov	r2, r3
 80036fe:	4623      	mov	r3, r4
 8003700:	f7fc fd46 	bl	8000190 <__aeabi_uldivmod>
 8003704:	4603      	mov	r3, r0
 8003706:	460c      	mov	r4, r1
 8003708:	61fb      	str	r3, [r7, #28]
            break;
 800370a:	e1b9      	b.n	8003a80 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d059      	beq.n	80037c8 <UART_SetConfig+0x6c0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b01      	cmp	r3, #1
 800371a:	d051      	beq.n	80037c0 <UART_SetConfig+0x6b8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b02      	cmp	r3, #2
 8003722:	d049      	beq.n	80037b8 <UART_SetConfig+0x6b0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2b03      	cmp	r3, #3
 800372a:	d042      	beq.n	80037b2 <UART_SetConfig+0x6aa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b04      	cmp	r3, #4
 8003732:	d03a      	beq.n	80037aa <UART_SetConfig+0x6a2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b05      	cmp	r3, #5
 800373a:	d032      	beq.n	80037a2 <UART_SetConfig+0x69a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	2b06      	cmp	r3, #6
 8003742:	d02b      	beq.n	800379c <UART_SetConfig+0x694>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2b07      	cmp	r3, #7
 800374a:	d023      	beq.n	8003794 <UART_SetConfig+0x68c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b08      	cmp	r3, #8
 8003752:	d01b      	beq.n	800378c <UART_SetConfig+0x684>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2b09      	cmp	r3, #9
 800375a:	d013      	beq.n	8003784 <UART_SetConfig+0x67c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2b0a      	cmp	r3, #10
 8003762:	d00b      	beq.n	800377c <UART_SetConfig+0x674>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b0b      	cmp	r3, #11
 800376a:	d103      	bne.n	8003774 <UART_SetConfig+0x66c>
 800376c:	4ba8      	ldr	r3, [pc, #672]	; (8003a10 <UART_SetConfig+0x908>)
 800376e:	f04f 0400 	mov.w	r4, #0
 8003772:	e02c      	b.n	80037ce <UART_SetConfig+0x6c6>
 8003774:	4ba7      	ldr	r3, [pc, #668]	; (8003a14 <UART_SetConfig+0x90c>)
 8003776:	f04f 0400 	mov.w	r4, #0
 800377a:	e028      	b.n	80037ce <UART_SetConfig+0x6c6>
 800377c:	4ba6      	ldr	r3, [pc, #664]	; (8003a18 <UART_SetConfig+0x910>)
 800377e:	f04f 0400 	mov.w	r4, #0
 8003782:	e024      	b.n	80037ce <UART_SetConfig+0x6c6>
 8003784:	4ba5      	ldr	r3, [pc, #660]	; (8003a1c <UART_SetConfig+0x914>)
 8003786:	f04f 0400 	mov.w	r4, #0
 800378a:	e020      	b.n	80037ce <UART_SetConfig+0x6c6>
 800378c:	4ba4      	ldr	r3, [pc, #656]	; (8003a20 <UART_SetConfig+0x918>)
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	e01c      	b.n	80037ce <UART_SetConfig+0x6c6>
 8003794:	4ba3      	ldr	r3, [pc, #652]	; (8003a24 <UART_SetConfig+0x91c>)
 8003796:	f04f 0400 	mov.w	r4, #0
 800379a:	e018      	b.n	80037ce <UART_SetConfig+0x6c6>
 800379c:	a498      	add	r4, pc, #608	; (adr r4, 8003a00 <UART_SetConfig+0x8f8>)
 800379e:	cc18      	ldmia	r4, {r3, r4}
 80037a0:	e015      	b.n	80037ce <UART_SetConfig+0x6c6>
 80037a2:	4ba1      	ldr	r3, [pc, #644]	; (8003a28 <UART_SetConfig+0x920>)
 80037a4:	f04f 0400 	mov.w	r4, #0
 80037a8:	e011      	b.n	80037ce <UART_SetConfig+0x6c6>
 80037aa:	4ba0      	ldr	r3, [pc, #640]	; (8003a2c <UART_SetConfig+0x924>)
 80037ac:	f04f 0400 	mov.w	r4, #0
 80037b0:	e00d      	b.n	80037ce <UART_SetConfig+0x6c6>
 80037b2:	a495      	add	r4, pc, #596	; (adr r4, 8003a08 <UART_SetConfig+0x900>)
 80037b4:	cc18      	ldmia	r4, {r3, r4}
 80037b6:	e00a      	b.n	80037ce <UART_SetConfig+0x6c6>
 80037b8:	4b9d      	ldr	r3, [pc, #628]	; (8003a30 <UART_SetConfig+0x928>)
 80037ba:	f04f 0400 	mov.w	r4, #0
 80037be:	e006      	b.n	80037ce <UART_SetConfig+0x6c6>
 80037c0:	4b9c      	ldr	r3, [pc, #624]	; (8003a34 <UART_SetConfig+0x92c>)
 80037c2:	f04f 0400 	mov.w	r4, #0
 80037c6:	e002      	b.n	80037ce <UART_SetConfig+0x6c6>
 80037c8:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <UART_SetConfig+0x90c>)
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6852      	ldr	r2, [r2, #4]
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	4611      	mov	r1, r2
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	185d      	adds	r5, r3, r1
 80037dc:	eb44 0602 	adc.w	r6, r4, r2
 80037e0:	4628      	mov	r0, r5
 80037e2:	4631      	mov	r1, r6
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	f7fc fcce 	bl	8000190 <__aeabi_uldivmod>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	61fb      	str	r3, [r7, #28]
            break;
 80037fa:	e141      	b.n	8003a80 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80037fc:	f7fe f9e8 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8003800:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4618      	mov	r0, r3
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d067      	beq.n	80038e2 <UART_SetConfig+0x7da>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b01      	cmp	r3, #1
 8003818:	d05e      	beq.n	80038d8 <UART_SetConfig+0x7d0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b02      	cmp	r3, #2
 8003820:	d055      	beq.n	80038ce <UART_SetConfig+0x7c6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b03      	cmp	r3, #3
 8003828:	d04c      	beq.n	80038c4 <UART_SetConfig+0x7bc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b04      	cmp	r3, #4
 8003830:	d043      	beq.n	80038ba <UART_SetConfig+0x7b2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b05      	cmp	r3, #5
 8003838:	d03a      	beq.n	80038b0 <UART_SetConfig+0x7a8>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b06      	cmp	r3, #6
 8003840:	d031      	beq.n	80038a6 <UART_SetConfig+0x79e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b07      	cmp	r3, #7
 8003848:	d028      	beq.n	800389c <UART_SetConfig+0x794>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b08      	cmp	r3, #8
 8003850:	d01f      	beq.n	8003892 <UART_SetConfig+0x78a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b09      	cmp	r3, #9
 8003858:	d016      	beq.n	8003888 <UART_SetConfig+0x780>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b0a      	cmp	r3, #10
 8003860:	d00d      	beq.n	800387e <UART_SetConfig+0x776>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b0b      	cmp	r3, #11
 8003868:	d104      	bne.n	8003874 <UART_SetConfig+0x76c>
 800386a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800386e:	f04f 0400 	mov.w	r4, #0
 8003872:	e03a      	b.n	80038ea <UART_SetConfig+0x7e2>
 8003874:	f04f 0301 	mov.w	r3, #1
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	e035      	b.n	80038ea <UART_SetConfig+0x7e2>
 800387e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	e030      	b.n	80038ea <UART_SetConfig+0x7e2>
 8003888:	f04f 0340 	mov.w	r3, #64	; 0x40
 800388c:	f04f 0400 	mov.w	r4, #0
 8003890:	e02b      	b.n	80038ea <UART_SetConfig+0x7e2>
 8003892:	f04f 0320 	mov.w	r3, #32
 8003896:	f04f 0400 	mov.w	r4, #0
 800389a:	e026      	b.n	80038ea <UART_SetConfig+0x7e2>
 800389c:	f04f 0310 	mov.w	r3, #16
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	e021      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038a6:	f04f 030c 	mov.w	r3, #12
 80038aa:	f04f 0400 	mov.w	r4, #0
 80038ae:	e01c      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038b0:	f04f 030a 	mov.w	r3, #10
 80038b4:	f04f 0400 	mov.w	r4, #0
 80038b8:	e017      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038ba:	f04f 0308 	mov.w	r3, #8
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	e012      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038c4:	f04f 0306 	mov.w	r3, #6
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	e00d      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038ce:	f04f 0304 	mov.w	r3, #4
 80038d2:	f04f 0400 	mov.w	r4, #0
 80038d6:	e008      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038d8:	f04f 0302 	mov.w	r3, #2
 80038dc:	f04f 0400 	mov.w	r4, #0
 80038e0:	e003      	b.n	80038ea <UART_SetConfig+0x7e2>
 80038e2:	f04f 0301 	mov.w	r3, #1
 80038e6:	f04f 0400 	mov.w	r4, #0
 80038ea:	461a      	mov	r2, r3
 80038ec:	4623      	mov	r3, r4
 80038ee:	f7fc fc4f 	bl	8000190 <__aeabi_uldivmod>
 80038f2:	4603      	mov	r3, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	0226      	lsls	r6, r4, #8
 80038f8:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 80038fc:	021d      	lsls	r5, r3, #8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	18e8      	adds	r0, r5, r3
 800390a:	eb46 0104 	adc.w	r1, r6, r4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f04f 0400 	mov.w	r4, #0
 8003916:	461a      	mov	r2, r3
 8003918:	4623      	mov	r3, r4
 800391a:	f7fc fc39 	bl	8000190 <__aeabi_uldivmod>
 800391e:	4603      	mov	r3, r0
 8003920:	460c      	mov	r4, r1
 8003922:	61fb      	str	r3, [r7, #28]
            break;
 8003924:	e0ac      	b.n	8003a80 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 808a 	beq.w	8003a44 <UART_SetConfig+0x93c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b01      	cmp	r3, #1
 8003936:	d05b      	beq.n	80039f0 <UART_SetConfig+0x8e8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b02      	cmp	r3, #2
 800393e:	d052      	beq.n	80039e6 <UART_SetConfig+0x8de>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b03      	cmp	r3, #3
 8003946:	d04a      	beq.n	80039de <UART_SetConfig+0x8d6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2b04      	cmp	r3, #4
 800394e:	d041      	beq.n	80039d4 <UART_SetConfig+0x8cc>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	2b05      	cmp	r3, #5
 8003956:	d039      	beq.n	80039cc <UART_SetConfig+0x8c4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	2b06      	cmp	r3, #6
 800395e:	d031      	beq.n	80039c4 <UART_SetConfig+0x8bc>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b07      	cmp	r3, #7
 8003966:	d028      	beq.n	80039ba <UART_SetConfig+0x8b2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b08      	cmp	r3, #8
 800396e:	d01f      	beq.n	80039b0 <UART_SetConfig+0x8a8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2b09      	cmp	r3, #9
 8003976:	d016      	beq.n	80039a6 <UART_SetConfig+0x89e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2b0a      	cmp	r3, #10
 800397e:	d00d      	beq.n	800399c <UART_SetConfig+0x894>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b0b      	cmp	r3, #11
 8003986:	d104      	bne.n	8003992 <UART_SetConfig+0x88a>
 8003988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	e05c      	b.n	8003a4c <UART_SetConfig+0x944>
 8003992:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003996:	f04f 0400 	mov.w	r4, #0
 800399a:	e057      	b.n	8003a4c <UART_SetConfig+0x944>
 800399c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	e052      	b.n	8003a4c <UART_SetConfig+0x944>
 80039a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039aa:	f04f 0400 	mov.w	r4, #0
 80039ae:	e04d      	b.n	8003a4c <UART_SetConfig+0x944>
 80039b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039b4:	f04f 0400 	mov.w	r4, #0
 80039b8:	e048      	b.n	8003a4c <UART_SetConfig+0x944>
 80039ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	e043      	b.n	8003a4c <UART_SetConfig+0x944>
 80039c4:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <UART_SetConfig+0x930>)
 80039c6:	f04f 0400 	mov.w	r4, #0
 80039ca:	e03f      	b.n	8003a4c <UART_SetConfig+0x944>
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <UART_SetConfig+0x934>)
 80039ce:	f04f 0400 	mov.w	r4, #0
 80039d2:	e03b      	b.n	8003a4c <UART_SetConfig+0x944>
 80039d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039d8:	f04f 0400 	mov.w	r4, #0
 80039dc:	e036      	b.n	8003a4c <UART_SetConfig+0x944>
 80039de:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <UART_SetConfig+0x938>)
 80039e0:	f04f 0400 	mov.w	r4, #0
 80039e4:	e032      	b.n	8003a4c <UART_SetConfig+0x944>
 80039e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	e02d      	b.n	8003a4c <UART_SetConfig+0x944>
 80039f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039f4:	f04f 0400 	mov.w	r4, #0
 80039f8:	e028      	b.n	8003a4c <UART_SetConfig+0x944>
 80039fa:	bf00      	nop
 80039fc:	f3af 8000 	nop.w
 8003a00:	14585500 	.word	0x14585500
 8003a04:	00000000 	.word	0x00000000
 8003a08:	28b0aa00 	.word	0x28b0aa00
 8003a0c:	00000000 	.word	0x00000000
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	f4240000 	.word	0xf4240000
 8003a18:	01e84800 	.word	0x01e84800
 8003a1c:	03d09000 	.word	0x03d09000
 8003a20:	07a12000 	.word	0x07a12000
 8003a24:	0f424000 	.word	0x0f424000
 8003a28:	186a0000 	.word	0x186a0000
 8003a2c:	1e848000 	.word	0x1e848000
 8003a30:	3d090000 	.word	0x3d090000
 8003a34:	7a120000 	.word	0x7a120000
 8003a38:	000aaa00 	.word	0x000aaa00
 8003a3c:	000ccc00 	.word	0x000ccc00
 8003a40:	00155500 	.word	0x00155500
 8003a44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003a48:	f04f 0400 	mov.w	r4, #0
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	0852      	lsrs	r2, r2, #1
 8003a52:	4611      	mov	r1, r2
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	185d      	adds	r5, r3, r1
 8003a5a:	eb44 0602 	adc.w	r6, r4, r2
 8003a5e:	4628      	mov	r0, r5
 8003a60:	4631      	mov	r1, r6
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	f7fc fb8f 	bl	8000190 <__aeabi_uldivmod>
 8003a72:	4603      	mov	r3, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	61fb      	str	r3, [r7, #28]
            break;
 8003a78:	e002      	b.n	8003a80 <UART_SetConfig+0x978>
          default:
            ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	76fb      	strb	r3, [r7, #27]
            break;
 8003a7e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a86:	d308      	bcc.n	8003a9a <UART_SetConfig+0x992>
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8e:	d204      	bcs.n	8003a9a <UART_SetConfig+0x992>
        {
          huart->Instance->BRR = usartdiv;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e35c      	b.n	8004154 <UART_SetConfig+0x104c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e359      	b.n	8004154 <UART_SetConfig+0x104c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa8:	f040 81a7 	bne.w	8003dfa <UART_SetConfig+0xcf2>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	2b07      	cmp	r3, #7
 8003ab4:	f200 8181 	bhi.w	8003dba <UART_SetConfig+0xcb2>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <UART_SetConfig+0x9b8>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ae1 	.word	0x08003ae1
 8003ac4:	08003b99 	.word	0x08003b99
 8003ac8:	08003dbb 	.word	0x08003dbb
 8003acc:	08003c41 	.word	0x08003c41
 8003ad0:	08003dbb 	.word	0x08003dbb
 8003ad4:	08003dbb 	.word	0x08003dbb
 8003ad8:	08003dbb 	.word	0x08003dbb
 8003adc:	08003cf9 	.word	0x08003cf9
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7fe f90a 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d044      	beq.n	8003b78 <UART_SetConfig+0xa70>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d03e      	beq.n	8003b74 <UART_SetConfig+0xa6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d038      	beq.n	8003b70 <UART_SetConfig+0xa68>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d032      	beq.n	8003b6c <UART_SetConfig+0xa64>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d02c      	beq.n	8003b68 <UART_SetConfig+0xa60>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d026      	beq.n	8003b64 <UART_SetConfig+0xa5c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d020      	beq.n	8003b60 <UART_SetConfig+0xa58>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b07      	cmp	r3, #7
 8003b24:	d01a      	beq.n	8003b5c <UART_SetConfig+0xa54>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d014      	beq.n	8003b58 <UART_SetConfig+0xa50>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	d00e      	beq.n	8003b54 <UART_SetConfig+0xa4c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b0a      	cmp	r3, #10
 8003b3c:	d008      	beq.n	8003b50 <UART_SetConfig+0xa48>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b0b      	cmp	r3, #11
 8003b44:	d102      	bne.n	8003b4c <UART_SetConfig+0xa44>
 8003b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b4a:	e016      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e014      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	e012      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b54:	2340      	movs	r3, #64	; 0x40
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b58:	2320      	movs	r3, #32
 8003b5a:	e00e      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	e00c      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b60:	230c      	movs	r3, #12
 8003b62:	e00a      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b64:	230a      	movs	r3, #10
 8003b66:	e008      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	e006      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b6c:	2306      	movs	r3, #6
 8003b6e:	e004      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b70:	2304      	movs	r3, #4
 8003b72:	e002      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e000      	b.n	8003b7a <UART_SetConfig+0xa72>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	005a      	lsls	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	61fb      	str	r3, [r7, #28]
        break;
 8003b96:	e113      	b.n	8003dc0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d043      	beq.n	8003c28 <UART_SetConfig+0xb20>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d03d      	beq.n	8003c24 <UART_SetConfig+0xb1c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d037      	beq.n	8003c20 <UART_SetConfig+0xb18>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d031      	beq.n	8003c1c <UART_SetConfig+0xb14>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d02b      	beq.n	8003c18 <UART_SetConfig+0xb10>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d025      	beq.n	8003c14 <UART_SetConfig+0xb0c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b06      	cmp	r3, #6
 8003bce:	d01f      	beq.n	8003c10 <UART_SetConfig+0xb08>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b07      	cmp	r3, #7
 8003bd6:	d019      	beq.n	8003c0c <UART_SetConfig+0xb04>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d013      	beq.n	8003c08 <UART_SetConfig+0xb00>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d00d      	beq.n	8003c04 <UART_SetConfig+0xafc>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b0a      	cmp	r3, #10
 8003bee:	d007      	beq.n	8003c00 <UART_SetConfig+0xaf8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b0b      	cmp	r3, #11
 8003bf6:	d101      	bne.n	8003bfc <UART_SetConfig+0xaf4>
 8003bf8:	4b8c      	ldr	r3, [pc, #560]	; (8003e2c <UART_SetConfig+0xd24>)
 8003bfa:	e016      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <UART_SetConfig+0xd28>)
 8003bfe:	e014      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c00:	4b8c      	ldr	r3, [pc, #560]	; (8003e34 <UART_SetConfig+0xd2c>)
 8003c02:	e012      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c04:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <UART_SetConfig+0xd30>)
 8003c06:	e010      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c08:	4b8c      	ldr	r3, [pc, #560]	; (8003e3c <UART_SetConfig+0xd34>)
 8003c0a:	e00e      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	; (8003e40 <UART_SetConfig+0xd38>)
 8003c0e:	e00c      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c10:	4b8c      	ldr	r3, [pc, #560]	; (8003e44 <UART_SetConfig+0xd3c>)
 8003c12:	e00a      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c14:	4b8c      	ldr	r3, [pc, #560]	; (8003e48 <UART_SetConfig+0xd40>)
 8003c16:	e008      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c18:	4b8c      	ldr	r3, [pc, #560]	; (8003e4c <UART_SetConfig+0xd44>)
 8003c1a:	e006      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c1c:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <UART_SetConfig+0xd48>)
 8003c1e:	e004      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c20:	4b8c      	ldr	r3, [pc, #560]	; (8003e54 <UART_SetConfig+0xd4c>)
 8003c22:	e002      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c24:	4b8c      	ldr	r3, [pc, #560]	; (8003e58 <UART_SetConfig+0xd50>)
 8003c26:	e000      	b.n	8003c2a <UART_SetConfig+0xb22>
 8003c28:	4b81      	ldr	r3, [pc, #516]	; (8003e30 <UART_SetConfig+0xd28>)
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6852      	ldr	r2, [r2, #4]
 8003c2e:	0852      	lsrs	r2, r2, #1
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	61fb      	str	r3, [r7, #28]
        break;
 8003c3e:	e0bf      	b.n	8003dc0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c40:	f7fd ffc6 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8003c44:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d044      	beq.n	8003cd8 <UART_SetConfig+0xbd0>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d03e      	beq.n	8003cd4 <UART_SetConfig+0xbcc>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d038      	beq.n	8003cd0 <UART_SetConfig+0xbc8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d032      	beq.n	8003ccc <UART_SetConfig+0xbc4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d02c      	beq.n	8003cc8 <UART_SetConfig+0xbc0>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d026      	beq.n	8003cc4 <UART_SetConfig+0xbbc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d020      	beq.n	8003cc0 <UART_SetConfig+0xbb8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b07      	cmp	r3, #7
 8003c84:	d01a      	beq.n	8003cbc <UART_SetConfig+0xbb4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d014      	beq.n	8003cb8 <UART_SetConfig+0xbb0>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d00e      	beq.n	8003cb4 <UART_SetConfig+0xbac>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2b0a      	cmp	r3, #10
 8003c9c:	d008      	beq.n	8003cb0 <UART_SetConfig+0xba8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b0b      	cmp	r3, #11
 8003ca4:	d102      	bne.n	8003cac <UART_SetConfig+0xba4>
 8003ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003caa:	e016      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e014      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	e012      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cb4:	2340      	movs	r3, #64	; 0x40
 8003cb6:	e010      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e00e      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	e00c      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	e00a      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cc4:	230a      	movs	r3, #10
 8003cc6:	e008      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cc8:	2308      	movs	r3, #8
 8003cca:	e006      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003ccc:	2306      	movs	r3, #6
 8003cce:	e004      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	e002      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e000      	b.n	8003cda <UART_SetConfig+0xbd2>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	005a      	lsls	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	441a      	add	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	61fb      	str	r3, [r7, #28]
        break;
 8003cf6:	e063      	b.n	8003dc0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d04f      	beq.n	8003da0 <UART_SetConfig+0xc98>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d048      	beq.n	8003d9a <UART_SetConfig+0xc92>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d041      	beq.n	8003d94 <UART_SetConfig+0xc8c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d03a      	beq.n	8003d8e <UART_SetConfig+0xc86>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d033      	beq.n	8003d88 <UART_SetConfig+0xc80>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d02c      	beq.n	8003d82 <UART_SetConfig+0xc7a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d025      	beq.n	8003d7c <UART_SetConfig+0xc74>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b07      	cmp	r3, #7
 8003d36:	d01e      	beq.n	8003d76 <UART_SetConfig+0xc6e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d017      	beq.n	8003d70 <UART_SetConfig+0xc68>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d010      	beq.n	8003d6a <UART_SetConfig+0xc62>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b0a      	cmp	r3, #10
 8003d4e:	d009      	beq.n	8003d64 <UART_SetConfig+0xc5c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b0b      	cmp	r3, #11
 8003d56:	d102      	bne.n	8003d5e <UART_SetConfig+0xc56>
 8003d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d5c:	e022      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d62:	e01f      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d68:	e01c      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6e:	e019      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d74:	e016      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7a:	e013      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d7c:	f241 5354 	movw	r3, #5460	; 0x1554
 8003d80:	e010      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d82:	f641 1398 	movw	r3, #6552	; 0x1998
 8003d86:	e00d      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d8c:	e00a      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d8e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003d92:	e007      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d98:	e004      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9e:	e001      	b.n	8003da4 <UART_SetConfig+0xc9c>
 8003da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6852      	ldr	r2, [r2, #4]
 8003da8:	0852      	lsrs	r2, r2, #1
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	61fb      	str	r3, [r7, #28]
        break;
 8003db8:	e002      	b.n	8003dc0 <UART_SetConfig+0xcb8>
      default:
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	76fb      	strb	r3, [r7, #27]
        break;
 8003dbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d916      	bls.n	8003df4 <UART_SetConfig+0xcec>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d212      	bcs.n	8003df4 <UART_SetConfig+0xcec>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	89fb      	ldrh	r3, [r7, #14]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	89fa      	ldrh	r2, [r7, #14]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e1af      	b.n	8004154 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	76fb      	strb	r3, [r7, #27]
 8003df8:	e1ac      	b.n	8004154 <UART_SetConfig+0x104c>
    }
  }
  else
  {
    switch (clocksource)
 8003dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	f200 8196 	bhi.w	8004132 <UART_SetConfig+0x102a>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0xd04>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e5d 	.word	0x08003e5d
 8003e10:	08003f13 	.word	0x08003f13
 8003e14:	08004133 	.word	0x08004133
 8003e18:	08003fbd 	.word	0x08003fbd
 8003e1c:	08004133 	.word	0x08004133
 8003e20:	08004133 	.word	0x08004133
 8003e24:	08004133 	.word	0x08004133
 8003e28:	08004073 	.word	0x08004073
 8003e2c:	0001e848 	.word	0x0001e848
 8003e30:	01e84800 	.word	0x01e84800
 8003e34:	0003d090 	.word	0x0003d090
 8003e38:	0007a120 	.word	0x0007a120
 8003e3c:	000f4240 	.word	0x000f4240
 8003e40:	001e8480 	.word	0x001e8480
 8003e44:	0028b0aa 	.word	0x0028b0aa
 8003e48:	0030d400 	.word	0x0030d400
 8003e4c:	003d0900 	.word	0x003d0900
 8003e50:	00516154 	.word	0x00516154
 8003e54:	007a1200 	.word	0x007a1200
 8003e58:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7fd ff4c 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8003e60:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d044      	beq.n	8003ef4 <UART_SetConfig+0xdec>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d03e      	beq.n	8003ef0 <UART_SetConfig+0xde8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d038      	beq.n	8003eec <UART_SetConfig+0xde4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d032      	beq.n	8003ee8 <UART_SetConfig+0xde0>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d02c      	beq.n	8003ee4 <UART_SetConfig+0xddc>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d026      	beq.n	8003ee0 <UART_SetConfig+0xdd8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d020      	beq.n	8003edc <UART_SetConfig+0xdd4>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2b07      	cmp	r3, #7
 8003ea0:	d01a      	beq.n	8003ed8 <UART_SetConfig+0xdd0>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d014      	beq.n	8003ed4 <UART_SetConfig+0xdcc>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	d00e      	beq.n	8003ed0 <UART_SetConfig+0xdc8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	2b0a      	cmp	r3, #10
 8003eb8:	d008      	beq.n	8003ecc <UART_SetConfig+0xdc4>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b0b      	cmp	r3, #11
 8003ec0:	d102      	bne.n	8003ec8 <UART_SetConfig+0xdc0>
 8003ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec6:	e016      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e014      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	e012      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ed0:	2340      	movs	r3, #64	; 0x40
 8003ed2:	e010      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e00e      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	e00c      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003edc:	230c      	movs	r3, #12
 8003ede:	e00a      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ee0:	230a      	movs	r3, #10
 8003ee2:	e008      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	e006      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ee8:	2306      	movs	r3, #6
 8003eea:	e004      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003eec:	2304      	movs	r3, #4
 8003eee:	e002      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e000      	b.n	8003ef6 <UART_SetConfig+0xdee>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	61fb      	str	r3, [r7, #28]
        break;
 8003f10:	e112      	b.n	8004138 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d044      	beq.n	8003fa4 <UART_SetConfig+0xe9c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d03e      	beq.n	8003fa0 <UART_SetConfig+0xe98>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d038      	beq.n	8003f9c <UART_SetConfig+0xe94>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d032      	beq.n	8003f98 <UART_SetConfig+0xe90>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d02c      	beq.n	8003f94 <UART_SetConfig+0xe8c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d026      	beq.n	8003f90 <UART_SetConfig+0xe88>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d020      	beq.n	8003f8c <UART_SetConfig+0xe84>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	d01a      	beq.n	8003f88 <UART_SetConfig+0xe80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d014      	beq.n	8003f84 <UART_SetConfig+0xe7c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	d00e      	beq.n	8003f80 <UART_SetConfig+0xe78>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b0a      	cmp	r3, #10
 8003f68:	d008      	beq.n	8003f7c <UART_SetConfig+0xe74>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b0b      	cmp	r3, #11
 8003f70:	d102      	bne.n	8003f78 <UART_SetConfig+0xe70>
 8003f72:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f76:	e016      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f78:	4b80      	ldr	r3, [pc, #512]	; (800417c <UART_SetConfig+0x1074>)
 8003f7a:	e014      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f7c:	4b80      	ldr	r3, [pc, #512]	; (8004180 <UART_SetConfig+0x1078>)
 8003f7e:	e012      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f80:	4b80      	ldr	r3, [pc, #512]	; (8004184 <UART_SetConfig+0x107c>)
 8003f82:	e010      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f84:	4b80      	ldr	r3, [pc, #512]	; (8004188 <UART_SetConfig+0x1080>)
 8003f86:	e00e      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f88:	4b80      	ldr	r3, [pc, #512]	; (800418c <UART_SetConfig+0x1084>)
 8003f8a:	e00c      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f8c:	4b80      	ldr	r3, [pc, #512]	; (8004190 <UART_SetConfig+0x1088>)
 8003f8e:	e00a      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f90:	4b80      	ldr	r3, [pc, #512]	; (8004194 <UART_SetConfig+0x108c>)
 8003f92:	e008      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f94:	4b80      	ldr	r3, [pc, #512]	; (8004198 <UART_SetConfig+0x1090>)
 8003f96:	e006      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f98:	4b80      	ldr	r3, [pc, #512]	; (800419c <UART_SetConfig+0x1094>)
 8003f9a:	e004      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003f9c:	4b80      	ldr	r3, [pc, #512]	; (80041a0 <UART_SetConfig+0x1098>)
 8003f9e:	e002      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003fa0:	4b80      	ldr	r3, [pc, #512]	; (80041a4 <UART_SetConfig+0x109c>)
 8003fa2:	e000      	b.n	8003fa6 <UART_SetConfig+0xe9e>
 8003fa4:	4b75      	ldr	r3, [pc, #468]	; (800417c <UART_SetConfig+0x1074>)
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6852      	ldr	r2, [r2, #4]
 8003faa:	0852      	lsrs	r2, r2, #1
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	61fb      	str	r3, [r7, #28]
        break;
 8003fba:	e0bd      	b.n	8004138 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbc:	f7fd fe08 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8003fc0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d044      	beq.n	8004054 <UART_SetConfig+0xf4c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d03e      	beq.n	8004050 <UART_SetConfig+0xf48>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d038      	beq.n	800404c <UART_SetConfig+0xf44>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d032      	beq.n	8004048 <UART_SetConfig+0xf40>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d02c      	beq.n	8004044 <UART_SetConfig+0xf3c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d026      	beq.n	8004040 <UART_SetConfig+0xf38>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d020      	beq.n	800403c <UART_SetConfig+0xf34>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b07      	cmp	r3, #7
 8004000:	d01a      	beq.n	8004038 <UART_SetConfig+0xf30>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b08      	cmp	r3, #8
 8004008:	d014      	beq.n	8004034 <UART_SetConfig+0xf2c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	2b09      	cmp	r3, #9
 8004010:	d00e      	beq.n	8004030 <UART_SetConfig+0xf28>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b0a      	cmp	r3, #10
 8004018:	d008      	beq.n	800402c <UART_SetConfig+0xf24>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b0b      	cmp	r3, #11
 8004020:	d102      	bne.n	8004028 <UART_SetConfig+0xf20>
 8004022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004026:	e016      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004028:	2301      	movs	r3, #1
 800402a:	e014      	b.n	8004056 <UART_SetConfig+0xf4e>
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	e012      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	e010      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004034:	2320      	movs	r3, #32
 8004036:	e00e      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004038:	2310      	movs	r3, #16
 800403a:	e00c      	b.n	8004056 <UART_SetConfig+0xf4e>
 800403c:	230c      	movs	r3, #12
 800403e:	e00a      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004040:	230a      	movs	r3, #10
 8004042:	e008      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004044:	2308      	movs	r3, #8
 8004046:	e006      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004048:	2306      	movs	r3, #6
 800404a:	e004      	b.n	8004056 <UART_SetConfig+0xf4e>
 800404c:	2304      	movs	r3, #4
 800404e:	e002      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004050:	2302      	movs	r3, #2
 8004052:	e000      	b.n	8004056 <UART_SetConfig+0xf4e>
 8004054:	2301      	movs	r3, #1
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	fbb2 f2f3 	udiv	r2, r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	441a      	add	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	b29b      	uxth	r3, r3
 800406e:	61fb      	str	r3, [r7, #28]
        break;
 8004070:	e062      	b.n	8004138 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d04e      	beq.n	8004118 <UART_SetConfig+0x1010>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b01      	cmp	r3, #1
 8004080:	d047      	beq.n	8004112 <UART_SetConfig+0x100a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b02      	cmp	r3, #2
 8004088:	d040      	beq.n	800410c <UART_SetConfig+0x1004>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b03      	cmp	r3, #3
 8004090:	d039      	beq.n	8004106 <UART_SetConfig+0xffe>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b04      	cmp	r3, #4
 8004098:	d032      	beq.n	8004100 <UART_SetConfig+0xff8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d02b      	beq.n	80040fa <UART_SetConfig+0xff2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d024      	beq.n	80040f4 <UART_SetConfig+0xfec>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b07      	cmp	r3, #7
 80040b0:	d01d      	beq.n	80040ee <UART_SetConfig+0xfe6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d016      	beq.n	80040e8 <UART_SetConfig+0xfe0>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	2b09      	cmp	r3, #9
 80040c0:	d00f      	beq.n	80040e2 <UART_SetConfig+0xfda>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b0a      	cmp	r3, #10
 80040c8:	d008      	beq.n	80040dc <UART_SetConfig+0xfd4>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b0b      	cmp	r3, #11
 80040d0:	d101      	bne.n	80040d6 <UART_SetConfig+0xfce>
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	e022      	b.n	800411c <UART_SetConfig+0x1014>
 80040d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040da:	e01f      	b.n	800411c <UART_SetConfig+0x1014>
 80040dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e0:	e01c      	b.n	800411c <UART_SetConfig+0x1014>
 80040e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e6:	e019      	b.n	800411c <UART_SetConfig+0x1014>
 80040e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ec:	e016      	b.n	800411c <UART_SetConfig+0x1014>
 80040ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f2:	e013      	b.n	800411c <UART_SetConfig+0x1014>
 80040f4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80040f8:	e010      	b.n	800411c <UART_SetConfig+0x1014>
 80040fa:	f640 43cc 	movw	r3, #3276	; 0xccc
 80040fe:	e00d      	b.n	800411c <UART_SetConfig+0x1014>
 8004100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004104:	e00a      	b.n	800411c <UART_SetConfig+0x1014>
 8004106:	f241 5355 	movw	r3, #5461	; 0x1555
 800410a:	e007      	b.n	800411c <UART_SetConfig+0x1014>
 800410c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004110:	e004      	b.n	800411c <UART_SetConfig+0x1014>
 8004112:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004116:	e001      	b.n	800411c <UART_SetConfig+0x1014>
 8004118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6852      	ldr	r2, [r2, #4]
 8004120:	0852      	lsrs	r2, r2, #1
 8004122:	441a      	add	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	61fb      	str	r3, [r7, #28]
        break;
 8004130:	e002      	b.n	8004138 <UART_SetConfig+0x1030>
      default:
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	76fb      	strb	r3, [r7, #27]
        break;
 8004136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	d908      	bls.n	8004150 <UART_SetConfig+0x1048>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004144:	d204      	bcs.n	8004150 <UART_SetConfig+0x1048>
    {
      huart->Instance->BRR = usartdiv;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e001      	b.n	8004154 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004170:	7efb      	ldrb	r3, [r7, #27]
}
 8004172:	4618      	mov	r0, r3
 8004174:	372c      	adds	r7, #44	; 0x2c
 8004176:	46bd      	mov	sp, r7
 8004178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800417c:	00f42400 	.word	0x00f42400
 8004180:	0001e848 	.word	0x0001e848
 8004184:	0003d090 	.word	0x0003d090
 8004188:	0007a120 	.word	0x0007a120
 800418c:	000f4240 	.word	0x000f4240
 8004190:	00145855 	.word	0x00145855
 8004194:	00186a00 	.word	0x00186a00
 8004198:	001e8480 	.word	0x001e8480
 800419c:	0028b0aa 	.word	0x0028b0aa
 80041a0:	003d0900 	.word	0x003d0900
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	6852      	ldr	r2, [r2, #4]
 80041c6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	6852      	ldr	r2, [r2, #4]
 80041e8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	6852      	ldr	r2, [r2, #4]
 800420a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	6852      	ldr	r2, [r2, #4]
 800422c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004256:	430a      	orrs	r2, r1
 8004258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	6892      	ldr	r2, [r2, #8]
 8004270:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01a      	beq.n	80042be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a6:	d10a      	bne.n	80042be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	6852      	ldr	r2, [r2, #4]
 80042b2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	6852      	ldr	r2, [r2, #4]
 80042d4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042fc:	f7fc f902 	bl	8000504 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b08      	cmp	r3, #8
 800430e:	d10e      	bne.n	800432e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f82c 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e022      	b.n	8004374 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b04      	cmp	r3, #4
 800433a:	d10e      	bne.n	800435a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f816 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00c      	b.n	8004374 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	e062      	b.n	8004454 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d05e      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fc f8b5 	bl	8000504 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d802      	bhi.n	80043ac <UART_WaitOnFlagUntilTimeout+0x30>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11d      	bne.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043ba:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	6892      	ldr	r2, [r2, #8]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e045      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02e      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	d126      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800441e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e00f      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	401a      	ands	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	429a      	cmp	r2, r3
 8004470:	d08d      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004492:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7fe fe05 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004504:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fe fde1 	bl	80030dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_UARTEx_DisableFifoMode+0x16>
 8004570:	2302      	movs	r3, #2
 8004572:	e027      	b.n	80045c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2224      	movs	r2, #36	; 0x24
 8004580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e02d      	b.n	8004644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f84f 	bl	80046c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e02d      	b.n	80046c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	6892      	ldr	r2, [r2, #8]
 8004696:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f811 	bl	80046c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	; 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80046d0:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <UARTEx_SetNbDataToProcess+0xc8>)
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80046de:	4a2d      	ldr	r2, [pc, #180]	; (8004794 <UARTEx_SetNbDataToProcess+0xcc>)
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046e8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004704:	e03d      	b.n	8004782 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004706:	2308      	movs	r3, #8
 8004708:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800470a:	2308      	movs	r3, #8
 800470c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	0e5b      	lsrs	r3, r3, #25
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	0f5b      	lsrs	r3, r3, #29
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800472e:	7fbb      	ldrb	r3, [r7, #30]
 8004730:	7f3a      	ldrb	r2, [r7, #28]
 8004732:	f107 0120 	add.w	r1, r7, #32
 8004736:	440a      	add	r2, r1
 8004738:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	7f3a      	ldrb	r2, [r7, #28]
 8004742:	f107 0120 	add.w	r1, r7, #32
 8004746:	440a      	add	r2, r1
 8004748:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800474c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004758:	7ffb      	ldrb	r3, [r7, #31]
 800475a:	7f7a      	ldrb	r2, [r7, #29]
 800475c:	f107 0120 	add.w	r1, r7, #32
 8004760:	440a      	add	r2, r1
 8004762:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004766:	fb02 f303 	mul.w	r3, r2, r3
 800476a:	7f7a      	ldrb	r2, [r7, #29]
 800476c:	f107 0120 	add.w	r1, r7, #32
 8004770:	440a      	add	r2, r1
 8004772:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004776:	fb93 f3f2 	sdiv	r3, r3, r2
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004782:	bf00      	nop
 8004784:	3724      	adds	r7, #36	; 0x24
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	08008114 	.word	0x08008114
 8004794:	0800811c 	.word	0x0800811c

08004798 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800479e:	f3ef 8305 	mrs	r3, IPSR
 80047a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80047a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10f      	bne.n	80047ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047aa:	f3ef 8310 	mrs	r3, PRIMASK
 80047ae:	607b      	str	r3, [r7, #4]
  return(result);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <osKernelInitialize+0x32>
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <osKernelInitialize+0x64>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d109      	bne.n	80047d2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047be:	f3ef 8311 	mrs	r3, BASEPRI
 80047c2:	603b      	str	r3, [r7, #0]
  return(result);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80047ca:	f06f 0305 	mvn.w	r3, #5
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e00c      	b.n	80047ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <osKernelInitialize+0x64>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <osKernelInitialize+0x64>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e002      	b.n	80047ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047ec:	68fb      	ldr	r3, [r7, #12]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000030 	.word	0x20000030

08004800 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	60bb      	str	r3, [r7, #8]
  return(result);
 800480c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004812:	f3ef 8310 	mrs	r3, PRIMASK
 8004816:	607b      	str	r3, [r7, #4]
  return(result);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <osKernelStart+0x32>
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <osKernelStart+0x64>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d109      	bne.n	800483a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004826:	f3ef 8311 	mrs	r3, BASEPRI
 800482a:	603b      	str	r3, [r7, #0]
  return(result);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004832:	f06f 0305 	mvn.w	r3, #5
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00e      	b.n	8004858 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <osKernelStart+0x64>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <osKernelStart+0x64>)
 8004844:	2202      	movs	r2, #2
 8004846:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004848:	f001 fea6 	bl	8006598 <vTaskStartScheduler>
      stat = osOK;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e002      	b.n	8004858 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004858:	68fb      	ldr	r3, [r7, #12]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000030 	.word	0x20000030

08004868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b092      	sub	sp, #72	; 0x48
 800486c:	af04      	add	r7, sp, #16
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004878:	f3ef 8305 	mrs	r3, IPSR
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 8094 	bne.w	80049ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004886:	f3ef 8310 	mrs	r3, PRIMASK
 800488a:	623b      	str	r3, [r7, #32]
  return(result);
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 808d 	bne.w	80049ae <osThreadNew+0x146>
 8004894:	4b48      	ldr	r3, [pc, #288]	; (80049b8 <osThreadNew+0x150>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d106      	bne.n	80048aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800489c:	f3ef 8311 	mrs	r3, BASEPRI
 80048a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 8082 	bne.w	80049ae <osThreadNew+0x146>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d07e      	beq.n	80049ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80048b4:	2318      	movs	r3, #24
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80048b8:	2300      	movs	r3, #0
 80048ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80048bc:	f107 031b 	add.w	r3, r7, #27
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d045      	beq.n	800495a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <osThreadNew+0x74>
        name = attr->name;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <osThreadNew+0x9a>
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	2b38      	cmp	r3, #56	; 0x38
 80048f4:	d805      	bhi.n	8004902 <osThreadNew+0x9a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <osThreadNew+0x9e>
        return (NULL);
 8004902:	2300      	movs	r3, #0
 8004904:	e054      	b.n	80049b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <osThreadNew+0xd4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b5b      	cmp	r3, #91	; 0x5b
 8004924:	d90a      	bls.n	800493c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <osThreadNew+0xd4>
        mem = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
 800493a:	e010      	b.n	800495e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <osThreadNew+0xf6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <osThreadNew+0xf6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <osThreadNew+0xf6>
          mem = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
 8004958:	e001      	b.n	800495e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	2b01      	cmp	r3, #1
 8004962:	d110      	bne.n	8004986 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800496c:	9202      	str	r2, [sp, #8]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004978:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f001 fc44 	bl	8006208 <xTaskCreateStatic>
 8004980:	4603      	mov	r3, r0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e013      	b.n	80049ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	b29a      	uxth	r2, r3
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f001 fc8b 	bl	80062ba <xTaskCreate>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <osThreadNew+0x146>
          hTask = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3738      	adds	r7, #56	; 0x38
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000030 	.word	0x20000030

080049bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c4:	f3ef 8305 	mrs	r3, IPSR
 80049c8:	613b      	str	r3, [r7, #16]
  return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10f      	bne.n	80049f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d0:	f3ef 8310 	mrs	r3, PRIMASK
 80049d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <osDelay+0x34>
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <osDelay+0x58>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d109      	bne.n	80049f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e4:	f3ef 8311 	mrs	r3, BASEPRI
 80049e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <osDelay+0x3c>
    stat = osErrorISR;
 80049f0:	f06f 0305 	mvn.w	r3, #5
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e007      	b.n	8004a08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 fd94 	bl	8006530 <vTaskDelay>
    }
  }

  return (stat);
 8004a08:	697b      	ldr	r3, [r7, #20]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000030 	.word	0x20000030

08004a18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	; 0x30
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a28:	f3ef 8305 	mrs	r3, IPSR
 8004a2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a2e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d170      	bne.n	8004b16 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a34:	f3ef 8310 	mrs	r3, PRIMASK
 8004a38:	617b      	str	r3, [r7, #20]
  return(result);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d16a      	bne.n	8004b16 <osMessageQueueNew+0xfe>
 8004a40:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <osMessageQueueNew+0x108>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d105      	bne.n	8004a54 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a48:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d160      	bne.n	8004b16 <osMessageQueueNew+0xfe>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d05d      	beq.n	8004b16 <osMessageQueueNew+0xfe>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05a      	beq.n	8004b16 <osMessageQueueNew+0xfe>
    mem = -1;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
 8004a64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d029      	beq.n	8004ac0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d012      	beq.n	8004a9a <osMessageQueueNew+0x82>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b4f      	cmp	r3, #79	; 0x4f
 8004a7a:	d90e      	bls.n	8004a9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d302      	bcc.n	8004a9a <osMessageQueueNew+0x82>
        mem = 1;
 8004a94:	2301      	movs	r3, #1
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	e014      	b.n	8004ac4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <osMessageQueueNew+0xac>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10c      	bne.n	8004ac4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <osMessageQueueNew+0xac>
          mem = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	623b      	str	r3, [r7, #32]
 8004abe:	e001      	b.n	8004ac4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10c      	bne.n	8004ae4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fe6e 	bl	80057bc <xQueueGenericCreateStatic>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24
 8004ae2:	e008      	b.n	8004af6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004aea:	2200      	movs	r2, #0
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fed6 	bl	80058a0 <xQueueGenericCreate>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <osMessageQueueNew+0xf2>
        name = attr->name;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	e001      	b.n	8004b0e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b0e:	69f9      	ldr	r1, [r7, #28]
 8004b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b12:	f001 fb1d 	bl	8006150 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3728      	adds	r7, #40	; 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000030 	.word	0x20000030

08004b24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3c:	f3ef 8305 	mrs	r3, IPSR
 8004b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b42:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b48:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <osMessageQueuePut+0x44>
 8004b54:	4b2b      	ldr	r3, [pc, #172]	; (8004c04 <osMessageQueuePut+0xe0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d12e      	bne.n	8004bba <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b60:	617b      	str	r3, [r7, #20]
  return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d028      	beq.n	8004bba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <osMessageQueuePut+0x56>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <osMessageQueuePut+0x56>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004b7a:	f06f 0303 	mvn.w	r3, #3
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b80:	e039      	b.n	8004bf6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004b86:	f107 0210 	add.w	r2, r7, #16
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	6a38      	ldr	r0, [r7, #32]
 8004b90:	f000 ffe0 	bl	8005b54 <xQueueGenericSendFromISR>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d003      	beq.n	8004ba2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004b9a:	f06f 0302 	mvn.w	r3, #2
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ba0:	e029      	b.n	8004bf6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d026      	beq.n	8004bf6 <osMessageQueuePut+0xd2>
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <osMessageQueuePut+0xe4>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bb8:	e01d      	b.n	8004bf6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <osMessageQueuePut+0xa2>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004bc6:	f06f 0303 	mvn.w	r3, #3
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	e014      	b.n	8004bf8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004bce:	2300      	movs	r3, #0
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	6a38      	ldr	r0, [r7, #32]
 8004bd6:	f000 fec3 	bl	8005960 <xQueueGenericSend>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d00b      	beq.n	8004bf8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004be6:	f06f 0301 	mvn.w	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	e004      	b.n	8004bf8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004bee:	f06f 0302 	mvn.w	r3, #2
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	e000      	b.n	8004bf8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bf6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3728      	adds	r7, #40	; 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000030 	.word	0x20000030
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c22:	f3ef 8305 	mrs	r3, IPSR
 8004c26:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c28:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c32:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <osMessageQueueGet+0x42>
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <osMessageQueueGet+0xdc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d12e      	bne.n	8004ca0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c42:	f3ef 8311 	mrs	r3, BASEPRI
 8004c46:	617b      	str	r3, [r7, #20]
  return(result);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d028      	beq.n	8004ca0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <osMessageQueueGet+0x54>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <osMessageQueueGet+0x54>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004c60:	f06f 0303 	mvn.w	r3, #3
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c66:	e038      	b.n	8004cda <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004c6c:	f107 0310 	add.w	r3, r7, #16
 8004c70:	461a      	mov	r2, r3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	6a38      	ldr	r0, [r7, #32]
 8004c76:	f001 f8dd 	bl	8005e34 <xQueueReceiveFromISR>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d003      	beq.n	8004c88 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004c80:	f06f 0302 	mvn.w	r3, #2
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c86:	e028      	b.n	8004cda <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d025      	beq.n	8004cda <osMessageQueueGet+0xce>
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <osMessageQueueGet+0xe0>)
 8004c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c9e:	e01c      	b.n	8004cda <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <osMessageQueueGet+0xa0>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004cac:	f06f 0303 	mvn.w	r3, #3
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	e013      	b.n	8004cdc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	6a38      	ldr	r0, [r7, #32]
 8004cba:	f000 ffdf 	bl	8005c7c <xQueueReceive>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d00b      	beq.n	8004cdc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004cca:	f06f 0301 	mvn.w	r3, #1
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	e004      	b.n	8004cdc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004cd2:	f06f 0302 	mvn.w	r3, #2
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd8:	e000      	b.n	8004cdc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cda:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000030 	.word	0x20000030
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <vApplicationGetIdleTaskMemory+0x2c>)
 8004d00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vApplicationGetIdleTaskMemory+0x30>)
 8004d06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000034 	.word	0x20000034
 8004d20:	20000090 	.word	0x20000090

08004d24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <vApplicationGetTimerTaskMemory+0x30>)
 8004d3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000290 	.word	0x20000290
 8004d54:	200002ec 	.word	0x200002ec

08004d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f103 0208 	add.w	r2, r3, #8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f103 0208 	add.w	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f103 0208 	add.w	r2, r3, #8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d103      	bne.n	8004e1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e00c      	b.n	8004e34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e002      	b.n	8004e28 <vListInsert+0x2e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d9f6      	bls.n	8004e22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	601a      	str	r2, [r3, #0]
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6852      	ldr	r2, [r2, #4]
 8004e8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d103      	bne.n	8004ea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1e5a      	subs	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <pxPortInitialiseStack+0x64>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b14      	subs	r3, #20
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f06f 0202 	mvn.w	r2, #2
 8004f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b20      	subs	r3, #32
 8004f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	08004f29 	.word	0x08004f29

08004f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <prvTaskExitError+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d009      	beq.n	8004f50 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e7fe      	b.n	8004f4e <prvTaskExitError+0x26>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f62:	bf00      	nop
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0fc      	beq.n	8004f64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	2000000c 	.word	0x2000000c
 8004f7c:	00000000 	.word	0x00000000

08004f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <pxCurrentTCBConst2>)
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	6808      	ldr	r0, [r1, #0]
 8004f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	f380 8809 	msr	PSP, r0
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8811 	msr	BASEPRI, r0
 8004f9a:	4770      	bx	lr
 8004f9c:	f3af 8000 	nop.w

08004fa0 <pxCurrentTCBConst2>:
 8004fa0:	20002e1c 	.word	0x20002e1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fa8:	4808      	ldr	r0, [pc, #32]	; (8004fcc <prvPortStartFirstTask+0x24>)
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f380 8808 	msr	MSP, r0
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8814 	msr	CONTROL, r0
 8004fba:	b662      	cpsie	i
 8004fbc:	b661      	cpsie	f
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	df00      	svc	0
 8004fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fca:	bf00      	nop
 8004fcc:	e000ed08 	.word	0xe000ed08

08004fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fd6:	4b44      	ldr	r3, [pc, #272]	; (80050e8 <xPortStartScheduler+0x118>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a44      	ldr	r2, [pc, #272]	; (80050ec <xPortStartScheduler+0x11c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d109      	bne.n	8004ff4 <xPortStartScheduler+0x24>
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e7fe      	b.n	8004ff2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ff4:	4b3c      	ldr	r3, [pc, #240]	; (80050e8 <xPortStartScheduler+0x118>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3d      	ldr	r2, [pc, #244]	; (80050f0 <xPortStartScheduler+0x120>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d109      	bne.n	8005012 <xPortStartScheduler+0x42>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e7fe      	b.n	8005010 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005012:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <xPortStartScheduler+0x124>)
 8005014:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	22ff      	movs	r2, #255	; 0xff
 8005022:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005034:	b2da      	uxtb	r2, r3
 8005036:	4b30      	ldr	r3, [pc, #192]	; (80050f8 <xPortStartScheduler+0x128>)
 8005038:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800503a:	4b30      	ldr	r3, [pc, #192]	; (80050fc <xPortStartScheduler+0x12c>)
 800503c:	2207      	movs	r2, #7
 800503e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005040:	e009      	b.n	8005056 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005042:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <xPortStartScheduler+0x12c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3b01      	subs	r3, #1
 8005048:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <xPortStartScheduler+0x12c>)
 800504a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	b2db      	uxtb	r3, r3
 8005054:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b80      	cmp	r3, #128	; 0x80
 8005060:	d0ef      	beq.n	8005042 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005062:	4b26      	ldr	r3, [pc, #152]	; (80050fc <xPortStartScheduler+0x12c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f1c3 0307 	rsb	r3, r3, #7
 800506a:	2b04      	cmp	r3, #4
 800506c:	d009      	beq.n	8005082 <xPortStartScheduler+0xb2>
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	e7fe      	b.n	8005080 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005082:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <xPortStartScheduler+0x12c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <xPortStartScheduler+0x12c>)
 800508a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <xPortStartScheduler+0x12c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <xPortStartScheduler+0x12c>)
 8005096:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <xPortStartScheduler+0x130>)
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <xPortStartScheduler+0x130>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <xPortStartScheduler+0x130>)
 80050ae:	4b14      	ldr	r3, [pc, #80]	; (8005100 <xPortStartScheduler+0x130>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050b8:	f000 f8d6 	bl	8005268 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <xPortStartScheduler+0x134>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050c2:	f000 f8f5 	bl	80052b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <xPortStartScheduler+0x138>)
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xPortStartScheduler+0x138>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050d2:	f7ff ff69 	bl	8004fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050d6:	f001 fc3b 	bl	8006950 <vTaskSwitchContext>
	prvTaskExitError();
 80050da:	f7ff ff25 	bl	8004f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed00 	.word	0xe000ed00
 80050ec:	410fc271 	.word	0x410fc271
 80050f0:	410fc270 	.word	0x410fc270
 80050f4:	e000e400 	.word	0xe000e400
 80050f8:	200006ec 	.word	0x200006ec
 80050fc:	200006f0 	.word	0x200006f0
 8005100:	e000ed20 	.word	0xe000ed20
 8005104:	2000000c 	.word	0x2000000c
 8005108:	e000ef34 	.word	0xe000ef34

0800510c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <vPortEnterCritical+0x54>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <vPortEnterCritical+0x54>)
 800512c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <vPortEnterCritical+0x54>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d10e      	bne.n	8005154 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <vPortEnterCritical+0x58>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <vPortEnterCritical+0x48>
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	e7fe      	b.n	8005152 <vPortEnterCritical+0x46>
	}
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	2000000c 	.word	0x2000000c
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <vPortExitCritical+0x4c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <vPortExitCritical+0x22>
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	e7fe      	b.n	8005188 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <vPortExitCritical+0x4c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3b01      	subs	r3, #1
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <vPortExitCritical+0x4c>)
 8005192:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <vPortExitCritical+0x4c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <vPortExitCritical+0x3e>
 800519c:	2300      	movs	r3, #0
 800519e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2000000c 	.word	0x2000000c
	...

080051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051c0:	f3ef 8009 	mrs	r0, PSP
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <pxCurrentTCBConst>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f01e 0f10 	tst.w	lr, #16
 80051d0:	bf08      	it	eq
 80051d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051e4:	f380 8811 	msr	BASEPRI, r0
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f001 fbae 	bl	8006950 <vTaskSwitchContext>
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f380 8811 	msr	BASEPRI, r0
 80051fc:	bc09      	pop	{r0, r3}
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005206:	f01e 0f10 	tst.w	lr, #16
 800520a:	bf08      	it	eq
 800520c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005210:	f380 8809 	msr	PSP, r0
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst>:
 8005220:	20002e1c 	.word	0x20002e1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005240:	f001 fac8 	bl	80067d4 <xTaskIncrementTick>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <SysTick_Handler+0x3c>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	2300      	movs	r3, #0
 8005254:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <vPortSetupTimerInterrupt+0x34>)
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005272:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortSetupTimerInterrupt+0x38>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005278:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <vPortSetupTimerInterrupt+0x3c>)
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <vPortSetupTimerInterrupt+0x40>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	490b      	ldr	r1, [pc, #44]	; (80052ac <vPortSetupTimerInterrupt+0x44>)
 8005280:	fba1 1303 	umull	r1, r3, r1, r3
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	3b01      	subs	r3, #1
 8005288:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528a:	4b04      	ldr	r3, [pc, #16]	; (800529c <vPortSetupTimerInterrupt+0x34>)
 800528c:	2207      	movs	r2, #7
 800528e:	601a      	str	r2, [r3, #0]
}
 8005290:	bf00      	nop
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	e000e010 	.word	0xe000e010
 80052a0:	e000e018 	.word	0xe000e018
 80052a4:	e000e014 	.word	0xe000e014
 80052a8:	20000010 	.word	0x20000010
 80052ac:	10624dd3 	.word	0x10624dd3

080052b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052c0 <vPortEnableVFP+0x10>
 80052b4:	6801      	ldr	r1, [r0, #0]
 80052b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ba:	6001      	str	r1, [r0, #0]
 80052bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052be:	bf00      	nop
 80052c0:	e000ed88 	.word	0xe000ed88

080052c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ca:	f3ef 8305 	mrs	r3, IPSR
 80052ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	d913      	bls.n	80052fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052d6:	4a16      	ldr	r2, [pc, #88]	; (8005330 <vPortValidateInterruptPriority+0x6c>)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <vPortValidateInterruptPriority+0x70>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	7afa      	ldrb	r2, [r7, #11]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d209      	bcs.n	80052fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	e7fe      	b.n	80052fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <vPortValidateInterruptPriority+0x74>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <vPortValidateInterruptPriority+0x78>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d909      	bls.n	8005322 <vPortValidateInterruptPriority+0x5e>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	e7fe      	b.n	8005320 <vPortValidateInterruptPriority+0x5c>
	}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e3f0 	.word	0xe000e3f0
 8005334:	200006ec 	.word	0x200006ec
 8005338:	e000ed0c 	.word	0xe000ed0c
 800533c:	200006f0 	.word	0x200006f0

08005340 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800534c:	f001 f988 	bl	8006660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005350:	4b57      	ldr	r3, [pc, #348]	; (80054b0 <pvPortMalloc+0x170>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005358:	f000 f90c 	bl	8005574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800535c:	4b55      	ldr	r3, [pc, #340]	; (80054b4 <pvPortMalloc+0x174>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	f040 808c 	bne.w	8005482 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01c      	beq.n	80053aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005370:	2208      	movs	r2, #8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	2b00      	cmp	r3, #0
 8005380:	d013      	beq.n	80053aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f023 0307 	bic.w	r3, r3, #7
 8005388:	3308      	adds	r3, #8
 800538a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <pvPortMalloc+0x6a>
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e7fe      	b.n	80053a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d068      	beq.n	8005482 <pvPortMalloc+0x142>
 80053b0:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <pvPortMalloc+0x178>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d863      	bhi.n	8005482 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ba:	4b40      	ldr	r3, [pc, #256]	; (80054bc <pvPortMalloc+0x17c>)
 80053bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053be:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <pvPortMalloc+0x17c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c4:	e004      	b.n	80053d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d203      	bcs.n	80053e2 <pvPortMalloc+0xa2>
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f1      	bne.n	80053c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053e2:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <pvPortMalloc+0x170>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d04a      	beq.n	8005482 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	4413      	add	r3, r2
 80053f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	2308      	movs	r3, #8
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	429a      	cmp	r2, r3
 800540c:	d91e      	bls.n	800544c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <pvPortMalloc+0xf4>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e7fe      	b.n	8005432 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005446:	69b8      	ldr	r0, [r7, #24]
 8005448:	f000 f8f6 	bl	8005638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <pvPortMalloc+0x178>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <pvPortMalloc+0x178>)
 8005458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800545a:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <pvPortMalloc+0x178>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <pvPortMalloc+0x180>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d203      	bcs.n	800546e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <pvPortMalloc+0x178>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <pvPortMalloc+0x180>)
 800546c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <pvPortMalloc+0x174>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	431a      	orrs	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005482:	f001 f8fb 	bl	800667c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <pvPortMalloc+0x164>
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e7fe      	b.n	80054a2 <pvPortMalloc+0x162>
	return pvReturn;
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20002e0c 	.word	0x20002e0c
 80054b4:	20002e18 	.word	0x20002e18
 80054b8:	20002e10 	.word	0x20002e10
 80054bc:	20002e04 	.word	0x20002e04
 80054c0:	20002e14 	.word	0x20002e14

080054c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d046      	beq.n	8005564 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054d6:	2308      	movs	r3, #8
 80054d8:	425b      	negs	r3, r3
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4b20      	ldr	r3, [pc, #128]	; (800556c <vPortFree+0xa8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <vPortFree+0x42>
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e7fe      	b.n	8005504 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <vPortFree+0x5e>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	60bb      	str	r3, [r7, #8]
 8005520:	e7fe      	b.n	8005520 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <vPortFree+0xa8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4013      	ands	r3, r2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d115      	bne.n	8005564 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <vPortFree+0xa8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005548:	f001 f88a 	bl	8006660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <vPortFree+0xac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4413      	add	r3, r2
 8005556:	4a06      	ldr	r2, [pc, #24]	; (8005570 <vPortFree+0xac>)
 8005558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f000 f86c 	bl	8005638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005560:	f001 f88c 	bl	800667c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20002e18 	.word	0x20002e18
 8005570:	20002e10 	.word	0x20002e10

08005574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800557a:	f242 7310 	movw	r3, #10000	; 0x2710
 800557e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <prvHeapInit+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3307      	adds	r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvHeapInit+0xac>)
 80055a4:	4413      	add	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <prvHeapInit+0xb0>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <prvHeapInit+0xb0>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055c0:	2208      	movs	r2, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a15      	ldr	r2, [pc, #84]	; (8005628 <prvHeapInit+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <prvHeapInit+0xb4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <prvHeapInit+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvHeapInit+0xb4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <prvHeapInit+0xb8>)
 8005602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <prvHeapInit+0xbc>)
 800560a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <prvHeapInit+0xc0>)
 800560e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	200006f4 	.word	0x200006f4
 8005624:	20002e04 	.word	0x20002e04
 8005628:	20002e0c 	.word	0x20002e0c
 800562c:	20002e14 	.word	0x20002e14
 8005630:	20002e10 	.word	0x20002e10
 8005634:	20002e18 	.word	0x20002e18

08005638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005640:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <prvInsertBlockIntoFreeList+0xac>)
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <prvInsertBlockIntoFreeList+0x14>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3f7      	bcc.n	8005646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d108      	bne.n	800567a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d118      	bne.n	80056c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00d      	beq.n	80056b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <prvInsertBlockIntoFreeList+0xb0>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e003      	b.n	80056c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d002      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20002e04 	.word	0x20002e04
 80056e8:	20002e0c 	.word	0x20002e0c

080056ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <xQueueGenericReset+0x28>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	e7fe      	b.n	8005712 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005714:	f7ff fcfa 	bl	800510c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	441a      	add	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005744:	3b01      	subs	r3, #1
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	441a      	add	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	22ff      	movs	r2, #255	; 0xff
 8005758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	22ff      	movs	r2, #255	; 0xff
 8005760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d114      	bne.n	8005794 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01a      	beq.n	80057a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3310      	adds	r3, #16
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f994 	bl	8006aa4 <xTaskRemoveFromEventList>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d012      	beq.n	80057a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <xQueueGenericReset+0xcc>)
 8005784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	e009      	b.n	80057a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3310      	adds	r3, #16
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fadd 	bl	8004d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3324      	adds	r3, #36	; 0x24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fad8 	bl	8004d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057a8:	f7ff fcde 	bl	8005168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057ac:	2301      	movs	r3, #1
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08e      	sub	sp, #56	; 0x38
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <xQueueGenericCreateStatic+0x28>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e2:	e7fe      	b.n	80057e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <xQueueGenericCreateStatic+0x42>
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	e7fe      	b.n	80057fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <xQueueGenericCreateStatic+0x4e>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <xQueueGenericCreateStatic+0x52>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <xQueueGenericCreateStatic+0x54>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <xQueueGenericCreateStatic+0x6c>
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	623b      	str	r3, [r7, #32]
 8005826:	e7fe      	b.n	8005826 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <xQueueGenericCreateStatic+0x78>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <xQueueGenericCreateStatic+0x7c>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <xQueueGenericCreateStatic+0x7e>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <xQueueGenericCreateStatic+0x96>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e7fe      	b.n	8005850 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005852:	2350      	movs	r3, #80	; 0x50
 8005854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b50      	cmp	r3, #80	; 0x50
 800585a:	d009      	beq.n	8005870 <xQueueGenericCreateStatic+0xb4>
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	e7fe      	b.n	800586e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f842 	bl	800591a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005898:	4618      	mov	r0, r3
 800589a:	3730      	adds	r7, #48	; 0x30
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <xQueueGenericCreate+0x28>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e7fe      	b.n	80058c6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e004      	b.n	80058de <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	3350      	adds	r3, #80	; 0x50
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fd2c 	bl	8005340 <pvPortMalloc>
 80058e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00f      	beq.n	8005910 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	3350      	adds	r3, #80	; 0x50
 80058f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058fe:	79fa      	ldrb	r2, [r7, #7]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f805 	bl	800591a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005910:	69bb      	ldr	r3, [r7, #24]
	}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e002      	b.n	800593c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005948:	2101      	movs	r1, #1
 800594a:	69b8      	ldr	r0, [r7, #24]
 800594c:	f7ff fece 	bl	80056ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	; 0x38
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800596e:	2300      	movs	r3, #0
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xQueueGenericSend+0x30>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
 800598e:	e7fe      	b.n	800598e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x3e>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <xQueueGenericSend+0x42>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <xQueueGenericSend+0x44>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <xQueueGenericSend+0x5c>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ba:	e7fe      	b.n	80059ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d103      	bne.n	80059ca <xQueueGenericSend+0x6a>
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <xQueueGenericSend+0x6e>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueGenericSend+0x70>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <xQueueGenericSend+0x88>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	e7fe      	b.n	80059e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e8:	f001 fa18 	bl	8006e1c <xTaskGetSchedulerState>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <xQueueGenericSend+0x98>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <xQueueGenericSend+0x9c>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <xQueueGenericSend+0x9e>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <xQueueGenericSend+0xb6>
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a16:	f7ff fb79 	bl	800510c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <xQueueGenericSend+0xcc>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d129      	bne.n	8005a80 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a32:	f000 fa7c 	bl	8005f2e <prvCopyDataToQueue>
 8005a36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d010      	beq.n	8005a62 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	3324      	adds	r3, #36	; 0x24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 f82d 	bl	8006aa4 <xTaskRemoveFromEventList>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a50:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <xQueueGenericSend+0x1f0>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	e00a      	b.n	8005a78 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a68:	4b39      	ldr	r3, [pc, #228]	; (8005b50 <xQueueGenericSend+0x1f0>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a78:	f7ff fb76 	bl	8005168 <vPortExitCritical>
				return pdPASS;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e063      	b.n	8005b48 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a86:	f7ff fb6f 	bl	8005168 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e05c      	b.n	8005b48 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 f865 	bl	8006b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa2:	f7ff fb61 	bl	8005168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa6:	f000 fddb 	bl	8006660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aaa:	f7ff fb2f 	bl	800510c <vPortEnterCritical>
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d103      	bne.n	8005ac4 <xQueueGenericSend+0x164>
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aca:	b25b      	sxtb	r3, r3
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d103      	bne.n	8005ada <xQueueGenericSend+0x17a>
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ada:	f7ff fb45 	bl	8005168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ade:	1d3a      	adds	r2, r7, #4
 8005ae0:	f107 0314 	add.w	r3, r7, #20
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 f854 	bl	8006b94 <xTaskCheckForTimeOut>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d124      	bne.n	8005b3c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af4:	f000 fb13 	bl	800611e <prvIsQueueFull>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d018      	beq.n	8005b30 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	3310      	adds	r3, #16
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 ff7e 	bl	8006a08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b0e:	f000 fa9e 	bl	800604e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b12:	f000 fdb3 	bl	800667c <xTaskResumeAll>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f af7c 	bne.w	8005a16 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <xQueueGenericSend+0x1f0>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	e772      	b.n	8005a16 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b32:	f000 fa8c 	bl	800604e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b36:	f000 fda1 	bl	800667c <xTaskResumeAll>
 8005b3a:	e76c      	b.n	8005a16 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3e:	f000 fa86 	bl	800604e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b42:	f000 fd9b 	bl	800667c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b46:	2300      	movs	r3, #0
		}
	}
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3738      	adds	r7, #56	; 0x38
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08e      	sub	sp, #56	; 0x38
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <xQueueGenericSendFromISR+0x2c>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	e7fe      	b.n	8005b7e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <xQueueGenericSendFromISR+0x3a>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <xQueueGenericSendFromISR+0x3e>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <xQueueGenericSendFromISR+0x40>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <xQueueGenericSendFromISR+0x58>
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	e7fe      	b.n	8005baa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSendFromISR+0x66>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSendFromISR+0x6a>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSendFromISR+0x6c>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xQueueGenericSendFromISR+0x84>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bd8:	f7ff fb74 	bl	80052c4 <vPortValidateInterruptPriority>
	__asm volatile
 8005bdc:	f3ef 8211 	mrs	r2, BASEPRI
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61ba      	str	r2, [r7, #24]
 8005bf2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d302      	bcc.n	8005c0a <xQueueGenericSendFromISR+0xb6>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d12c      	bne.n	8005c64 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1a:	f000 f988 	bl	8005f2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c1e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d112      	bne.n	8005c4e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d016      	beq.n	8005c5e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 ff35 	bl	8006aa4 <xTaskRemoveFromEventList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e007      	b.n	8005c5e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c52:	3301      	adds	r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	b25a      	sxtb	r2, r3
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c62:	e001      	b.n	8005c68 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3738      	adds	r7, #56	; 0x38
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <xQueueReceive+0x2e>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	623b      	str	r3, [r7, #32]
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <xQueueReceive+0x3c>
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <xQueueReceive+0x40>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <xQueueReceive+0x42>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <xQueueReceive+0x5a>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e7fe      	b.n	8005cd4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cd6:	f001 f8a1 	bl	8006e1c <xTaskGetSchedulerState>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <xQueueReceive+0x6a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <xQueueReceive+0x6e>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <xQueueReceive+0x70>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d109      	bne.n	8005d04 <xQueueReceive+0x88>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e7fe      	b.n	8005d02 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d04:	f7ff fa02 	bl	800510c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01f      	beq.n	8005d54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d18:	f000 f973 	bl	8006002 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00f      	beq.n	8005d4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	3310      	adds	r3, #16
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 feb7 	bl	8006aa4 <xTaskRemoveFromEventList>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <xQueueReceive+0x1b4>)
 8005d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d4c:	f7ff fa0c 	bl	8005168 <vPortExitCritical>
				return pdPASS;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e069      	b.n	8005e28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d5a:	f7ff fa05 	bl	8005168 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e062      	b.n	8005e28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d68:	f107 0310 	add.w	r3, r7, #16
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fefb 	bl	8006b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d76:	f7ff f9f7 	bl	8005168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d7a:	f000 fc71 	bl	8006660 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d7e:	f7ff f9c5 	bl	800510c <vPortEnterCritical>
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d88:	b25b      	sxtb	r3, r3
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d103      	bne.n	8005d98 <xQueueReceive+0x11c>
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d9e:	b25b      	sxtb	r3, r3
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d103      	bne.n	8005dae <xQueueReceive+0x132>
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dae:	f7ff f9db 	bl	8005168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005db2:	1d3a      	adds	r2, r7, #4
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 feea 	bl	8006b94 <xTaskCheckForTimeOut>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d123      	bne.n	8005e0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f000 f993 	bl	80060f2 <prvIsQueueEmpty>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d017      	beq.n	8005e02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	3324      	adds	r3, #36	; 0x24
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fe14 	bl	8006a08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de2:	f000 f934 	bl	800604e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005de6:	f000 fc49 	bl	800667c <xTaskResumeAll>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d189      	bne.n	8005d04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005df0:	4b0f      	ldr	r3, [pc, #60]	; (8005e30 <xQueueReceive+0x1b4>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	e780      	b.n	8005d04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e04:	f000 f923 	bl	800604e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e08:	f000 fc38 	bl	800667c <xTaskResumeAll>
 8005e0c:	e77a      	b.n	8005d04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e10:	f000 f91d 	bl	800604e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e14:	f000 fc32 	bl	800667c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1a:	f000 f96a 	bl	80060f2 <prvIsQueueEmpty>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f43f af6f 	beq.w	8005d04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3730      	adds	r7, #48	; 0x30
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <xQueueReceiveFromISR+0x2a>
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	e7fe      	b.n	8005e5c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <xQueueReceiveFromISR+0x38>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <xQueueReceiveFromISR+0x3c>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <xQueueReceiveFromISR+0x3e>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <xQueueReceiveFromISR+0x56>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e7fe      	b.n	8005e88 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e8a:	f7ff fa1b 	bl	80052c4 <vPortValidateInterruptPriority>
	__asm volatile
 8005e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	61ba      	str	r2, [r7, #24]
 8005ea4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ea6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02f      	beq.n	8005f16 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec4:	f000 f89d 	bl	8006002 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	1e5a      	subs	r2, r3, #1
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d112      	bne.n	8005f00 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	3310      	adds	r3, #16
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fddc 	bl	8006aa4 <xTaskRemoveFromEventList>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e007      	b.n	8005f10 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f04:	3301      	adds	r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	b25a      	sxtb	r2, r3
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f10:	2301      	movs	r3, #1
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
 8005f14:	e001      	b.n	8005f1a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3738      	adds	r7, #56	; 0x38
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d14d      	bne.n	8005ff0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 ff7d 	bl	8006e58 <xTaskPriorityDisinherit>
 8005f5e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]
 8005f66:	e043      	b.n	8005ff0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d119      	bne.n	8005fa2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6898      	ldr	r0, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	461a      	mov	r2, r3
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	f002 f895 	bl	80080a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	441a      	add	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d32b      	bcc.n	8005ff0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	e026      	b.n	8005ff0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68d8      	ldr	r0, [r3, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	461a      	mov	r2, r3
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	f002 f87b 	bl	80080a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	425b      	negs	r3, r3
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d207      	bcs.n	8005fde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	425b      	negs	r3, r3
 8005fd8:	441a      	add	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d105      	bne.n	8005ff0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ff8:	697b      	ldr	r3, [r7, #20]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d018      	beq.n	8006046 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	441a      	add	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d303      	bcc.n	8006036 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68d9      	ldr	r1, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	461a      	mov	r2, r3
 8006040:	6838      	ldr	r0, [r7, #0]
 8006042:	f002 f831 	bl	80080a8 <memcpy>
	}
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006056:	f7ff f859 	bl	800510c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006060:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006062:	e011      	b.n	8006088 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3324      	adds	r3, #36	; 0x24
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd17 	bl	8006aa4 <xTaskRemoveFromEventList>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800607c:	f000 fdea 	bl	8006c54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	3b01      	subs	r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	dce9      	bgt.n	8006064 <prvUnlockQueue+0x16>
 8006090:	e000      	b.n	8006094 <prvUnlockQueue+0x46>
					break;
 8006092:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	22ff      	movs	r2, #255	; 0xff
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800609c:	f7ff f864 	bl	8005168 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060a0:	f7ff f834 	bl	800510c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ac:	e011      	b.n	80060d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d012      	beq.n	80060dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3310      	adds	r3, #16
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fcf2 	bl	8006aa4 <xTaskRemoveFromEventList>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060c6:	f000 fdc5 	bl	8006c54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060ca:	7bbb      	ldrb	r3, [r7, #14]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dce9      	bgt.n	80060ae <prvUnlockQueue+0x60>
 80060da:	e000      	b.n	80060de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060e6:	f7ff f83f 	bl	8005168 <vPortExitCritical>
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060fa:	f7ff f807 	bl	800510c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006106:	2301      	movs	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e001      	b.n	8006110 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006110:	f7ff f82a 	bl	8005168 <vPortExitCritical>

	return xReturn;
 8006114:	68fb      	ldr	r3, [r7, #12]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006126:	f7fe fff1 	bl	800510c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	429a      	cmp	r2, r3
 8006134:	d102      	bne.n	800613c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e001      	b.n	8006140 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006140:	f7ff f812 	bl	8005168 <vPortExitCritical>

	return xReturn;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e014      	b.n	800618a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006160:	4a0e      	ldr	r2, [pc, #56]	; (800619c <vQueueAddToRegistry+0x4c>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800616c:	490b      	ldr	r1, [pc, #44]	; (800619c <vQueueAddToRegistry+0x4c>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006176:	4a09      	ldr	r2, [pc, #36]	; (800619c <vQueueAddToRegistry+0x4c>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006182:	e005      	b.n	8006190 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b07      	cmp	r3, #7
 800618e:	d9e7      	bls.n	8006160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006190:	bf00      	nop
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	2000344c 	.word	0x2000344c

080061a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061b0:	f7fe ffac 	bl	800510c <vPortEnterCritical>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d103      	bne.n	80061ca <vQueueWaitForMessageRestricted+0x2a>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d0:	b25b      	sxtb	r3, r3
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d103      	bne.n	80061e0 <vQueueWaitForMessageRestricted+0x40>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e0:	f7fe ffc2 	bl	8005168 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	3324      	adds	r3, #36	; 0x24
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fc2b 	bl	8006a50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061fa:	6978      	ldr	r0, [r7, #20]
 80061fc:	f7ff ff27 	bl	800604e <prvUnlockQueue>
	}
 8006200:	bf00      	nop
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	; 0x38
 800620c:	af04      	add	r7, sp, #16
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <xTaskCreateStatic+0x28>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	e7fe      	b.n	800622e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <xTaskCreateStatic+0x42>
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e7fe      	b.n	8006248 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800624a:	235c      	movs	r3, #92	; 0x5c
 800624c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b5c      	cmp	r3, #92	; 0x5c
 8006252:	d009      	beq.n	8006268 <xTaskCreateStatic+0x60>
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e7fe      	b.n	8006266 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01e      	beq.n	80062ac <xTaskCreateStatic+0xa4>
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800627c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2202      	movs	r2, #2
 8006282:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006286:	2300      	movs	r3, #0
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	9302      	str	r3, [sp, #8]
 800628e:	f107 0314 	add.w	r3, r7, #20
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f850 	bl	8006344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062a6:	f000 f8d3 	bl	8006450 <prvAddNewTaskToReadyList>
 80062aa:	e001      	b.n	80062b0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062b0:	697b      	ldr	r3, [r7, #20]
	}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08c      	sub	sp, #48	; 0x30
 80062be:	af04      	add	r7, sp, #16
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff f836 	bl	8005340 <pvPortMalloc>
 80062d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00e      	beq.n	80062fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80062dc:	205c      	movs	r0, #92	; 0x5c
 80062de:	f7ff f82f 	bl	8005340 <pvPortMalloc>
 80062e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
 80062f0:	e005      	b.n	80062fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062f2:	6978      	ldr	r0, [r7, #20]
 80062f4:	f7ff f8e6 	bl	80054c4 <vPortFree>
 80062f8:	e001      	b.n	80062fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d017      	beq.n	8006334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	2300      	movs	r3, #0
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	9302      	str	r3, [sp, #8]
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f80e 	bl	8006344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006328:	69f8      	ldr	r0, [r7, #28]
 800632a:	f000 f891 	bl	8006450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800632e:	2301      	movs	r3, #1
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e002      	b.n	800633a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800633a:	69bb      	ldr	r3, [r7, #24]
	}
 800633c:	4618      	mov	r0, r3
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	461a      	mov	r2, r3
 800635c:	21a5      	movs	r1, #165	; 0xa5
 800635e:	f001 feae 	bl	80080be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800636c:	3b01      	subs	r3, #1
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <prvInitialiseNewTask+0x56>
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e7fe      	b.n	8006398 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	e012      	b.n	80063c6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	7819      	ldrb	r1, [r3, #0]
 80063a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	3334      	adds	r3, #52	; 0x34
 80063b0:	460a      	mov	r2, r1
 80063b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	2b0f      	cmp	r3, #15
 80063ca:	d9e9      	bls.n	80063a0 <prvInitialiseNewTask+0x5c>
 80063cc:	e000      	b.n	80063d0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80063ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	2b37      	cmp	r3, #55	; 0x37
 80063dc:	d901      	bls.n	80063e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063de:	2337      	movs	r3, #55	; 0x37
 80063e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	2200      	movs	r2, #0
 80063f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	3304      	adds	r3, #4
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fccd 	bl	8004d98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	3318      	adds	r3, #24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fcc8 	bl	8004d98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	2200      	movs	r2, #0
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	69b8      	ldr	r0, [r7, #24]
 8006432:	f7fe fd45 	bl	8004ec0 <pxPortInitialiseStack>
 8006436:	4602      	mov	r2, r0
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006448:	bf00      	nop
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006458:	f7fe fe58 	bl	800510c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800645c:	4b2d      	ldr	r3, [pc, #180]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	4a2c      	ldr	r2, [pc, #176]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 8006464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006466:	4b2c      	ldr	r3, [pc, #176]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800646e:	4a2a      	ldr	r2, [pc, #168]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006474:	4b27      	ldr	r3, [pc, #156]	; (8006514 <prvAddNewTaskToReadyList+0xc4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d110      	bne.n	800649e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800647c:	f000 fc0e 	bl	8006c9c <prvInitialiseTaskLists>
 8006480:	e00d      	b.n	800649e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006482:	4b26      	ldr	r3, [pc, #152]	; (800651c <prvAddNewTaskToReadyList+0xcc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800648a:	4b23      	ldr	r3, [pc, #140]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	429a      	cmp	r2, r3
 8006496:	d802      	bhi.n	800649e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006498:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <prvAddNewTaskToReadyList+0xd0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	4a1e      	ldr	r2, [pc, #120]	; (8006520 <prvAddNewTaskToReadyList+0xd0>)
 80064a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064a8:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <prvAddNewTaskToReadyList+0xd0>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <prvAddNewTaskToReadyList+0xd4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d903      	bls.n	80064c4 <prvAddNewTaskToReadyList+0x74>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <prvAddNewTaskToReadyList+0xd4>)
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4a15      	ldr	r2, [pc, #84]	; (8006528 <prvAddNewTaskToReadyList+0xd8>)
 80064d2:	441a      	add	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fe fc69 	bl	8004db2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064e0:	f7fe fe42 	bl	8005168 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064e4:	4b0d      	ldr	r3, [pc, #52]	; (800651c <prvAddNewTaskToReadyList+0xcc>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00e      	beq.n	800650a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <prvAddNewTaskToReadyList+0xc8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d207      	bcs.n	800650a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064fa:	4b0c      	ldr	r3, [pc, #48]	; (800652c <prvAddNewTaskToReadyList+0xdc>)
 80064fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	200032f0 	.word	0x200032f0
 8006518:	20002e1c 	.word	0x20002e1c
 800651c:	200032fc 	.word	0x200032fc
 8006520:	2000330c 	.word	0x2000330c
 8006524:	200032f8 	.word	0x200032f8
 8006528:	20002e20 	.word	0x20002e20
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d016      	beq.n	8006570 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <vTaskDelay+0x60>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <vTaskDelay+0x2e>
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60bb      	str	r3, [r7, #8]
 800655c:	e7fe      	b.n	800655c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800655e:	f000 f87f 	bl	8006660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006562:	2100      	movs	r1, #0
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fce3 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800656a:	f000 f887 	bl	800667c <xTaskResumeAll>
 800656e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <vTaskDelay+0x64>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20003318 	.word	0x20003318
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065a6:	463a      	mov	r2, r7
 80065a8:	1d39      	adds	r1, r7, #4
 80065aa:	f107 0308 	add.w	r3, r7, #8
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fb9e 	bl	8004cf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	9202      	str	r2, [sp, #8]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	2300      	movs	r3, #0
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	2300      	movs	r3, #0
 80065c4:	460a      	mov	r2, r1
 80065c6:	4920      	ldr	r1, [pc, #128]	; (8006648 <vTaskStartScheduler+0xb0>)
 80065c8:	4820      	ldr	r0, [pc, #128]	; (800664c <vTaskStartScheduler+0xb4>)
 80065ca:	f7ff fe1d 	bl	8006208 <xTaskCreateStatic>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <vTaskStartScheduler+0xb8>)
 80065d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065d4:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <vTaskStartScheduler+0xb8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065dc:	2301      	movs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e001      	b.n	80065e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d102      	bne.n	80065f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065ec:	f000 fcf4 	bl	8006fd8 <xTimerCreateTimerTask>
 80065f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d115      	bne.n	8006624 <vTaskStartScheduler+0x8c>
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <vTaskStartScheduler+0xbc>)
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006612:	4b11      	ldr	r3, [pc, #68]	; (8006658 <vTaskStartScheduler+0xc0>)
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006618:	4b10      	ldr	r3, [pc, #64]	; (800665c <vTaskStartScheduler+0xc4>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800661e:	f7fe fcd7 	bl	8004fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006622:	e00d      	b.n	8006640 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d109      	bne.n	8006640 <vTaskStartScheduler+0xa8>
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	e7fe      	b.n	800663e <vTaskStartScheduler+0xa6>
}
 8006640:	bf00      	nop
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	08008124 	.word	0x08008124
 800664c:	08006c6d 	.word	0x08006c6d
 8006650:	20003314 	.word	0x20003314
 8006654:	20003310 	.word	0x20003310
 8006658:	200032fc 	.word	0x200032fc
 800665c:	200032f4 	.word	0x200032f4

08006660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <vTaskSuspendAll+0x18>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	4a03      	ldr	r2, [pc, #12]	; (8006678 <vTaskSuspendAll+0x18>)
 800666c:	6013      	str	r3, [r2, #0]
}
 800666e:	bf00      	nop
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20003318 	.word	0x20003318

0800667c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800668a:	4b41      	ldr	r3, [pc, #260]	; (8006790 <xTaskResumeAll+0x114>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <xTaskResumeAll+0x2a>
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	e7fe      	b.n	80066a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066a6:	f7fe fd31 	bl	800510c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066aa:	4b39      	ldr	r3, [pc, #228]	; (8006790 <xTaskResumeAll+0x114>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	4a37      	ldr	r2, [pc, #220]	; (8006790 <xTaskResumeAll+0x114>)
 80066b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b4:	4b36      	ldr	r3, [pc, #216]	; (8006790 <xTaskResumeAll+0x114>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d162      	bne.n	8006782 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066bc:	4b35      	ldr	r3, [pc, #212]	; (8006794 <xTaskResumeAll+0x118>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d05e      	beq.n	8006782 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066c4:	e02f      	b.n	8006726 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80066c6:	4b34      	ldr	r3, [pc, #208]	; (8006798 <xTaskResumeAll+0x11c>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3318      	adds	r3, #24
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fe fbca 	bl	8004e6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3304      	adds	r3, #4
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fbc5 	bl	8004e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4b2d      	ldr	r3, [pc, #180]	; (800679c <xTaskResumeAll+0x120>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d903      	bls.n	80066f6 <xTaskResumeAll+0x7a>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	4a2a      	ldr	r2, [pc, #168]	; (800679c <xTaskResumeAll+0x120>)
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4a27      	ldr	r2, [pc, #156]	; (80067a0 <xTaskResumeAll+0x124>)
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3304      	adds	r3, #4
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f7fe fb50 	bl	8004db2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006716:	4b23      	ldr	r3, [pc, #140]	; (80067a4 <xTaskResumeAll+0x128>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	429a      	cmp	r2, r3
 800671e:	d302      	bcc.n	8006726 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006720:	4b21      	ldr	r3, [pc, #132]	; (80067a8 <xTaskResumeAll+0x12c>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006726:	4b1c      	ldr	r3, [pc, #112]	; (8006798 <xTaskResumeAll+0x11c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1cb      	bne.n	80066c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006734:	f000 fb4c 	bl	8006dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006738:	4b1c      	ldr	r3, [pc, #112]	; (80067ac <xTaskResumeAll+0x130>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d010      	beq.n	8006766 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006744:	f000 f846 	bl	80067d4 <xTaskIncrementTick>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800674e:	4b16      	ldr	r3, [pc, #88]	; (80067a8 <xTaskResumeAll+0x12c>)
 8006750:	2201      	movs	r2, #1
 8006752:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3b01      	subs	r3, #1
 8006758:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f1      	bne.n	8006744 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006760:	4b12      	ldr	r3, [pc, #72]	; (80067ac <xTaskResumeAll+0x130>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006766:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <xTaskResumeAll+0x12c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800676e:	2301      	movs	r3, #1
 8006770:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <xTaskResumeAll+0x134>)
 8006774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006782:	f7fe fcf1 	bl	8005168 <vPortExitCritical>

	return xAlreadyYielded;
 8006786:	68bb      	ldr	r3, [r7, #8]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20003318 	.word	0x20003318
 8006794:	200032f0 	.word	0x200032f0
 8006798:	200032b0 	.word	0x200032b0
 800679c:	200032f8 	.word	0x200032f8
 80067a0:	20002e20 	.word	0x20002e20
 80067a4:	20002e1c 	.word	0x20002e1c
 80067a8:	20003304 	.word	0x20003304
 80067ac:	20003300 	.word	0x20003300
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067ba:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <xTaskGetTickCount+0x1c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067c0:	687b      	ldr	r3, [r7, #4]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	200032f4 	.word	0x200032f4

080067d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067de:	4b51      	ldr	r3, [pc, #324]	; (8006924 <xTaskIncrementTick+0x150>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 808d 	bne.w	8006902 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067e8:	4b4f      	ldr	r3, [pc, #316]	; (8006928 <xTaskIncrementTick+0x154>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067f0:	4a4d      	ldr	r2, [pc, #308]	; (8006928 <xTaskIncrementTick+0x154>)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11f      	bne.n	800683c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80067fc:	4b4b      	ldr	r3, [pc, #300]	; (800692c <xTaskIncrementTick+0x158>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <xTaskIncrementTick+0x46>
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	e7fe      	b.n	8006818 <xTaskIncrementTick+0x44>
 800681a:	4b44      	ldr	r3, [pc, #272]	; (800692c <xTaskIncrementTick+0x158>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	4b43      	ldr	r3, [pc, #268]	; (8006930 <xTaskIncrementTick+0x15c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a41      	ldr	r2, [pc, #260]	; (800692c <xTaskIncrementTick+0x158>)
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	4a41      	ldr	r2, [pc, #260]	; (8006930 <xTaskIncrementTick+0x15c>)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4b41      	ldr	r3, [pc, #260]	; (8006934 <xTaskIncrementTick+0x160>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a3f      	ldr	r2, [pc, #252]	; (8006934 <xTaskIncrementTick+0x160>)
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	f000 faca 	bl	8006dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800683c:	4b3e      	ldr	r3, [pc, #248]	; (8006938 <xTaskIncrementTick+0x164>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	429a      	cmp	r2, r3
 8006844:	d34e      	bcc.n	80068e4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <xTaskIncrementTick+0x158>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <xTaskIncrementTick+0x80>
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <xTaskIncrementTick+0x82>
 8006854:	2300      	movs	r3, #0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <xTaskIncrementTick+0x164>)
 800685c:	f04f 32ff 	mov.w	r2, #4294967295
 8006860:	601a      	str	r2, [r3, #0]
					break;
 8006862:	e03f      	b.n	80068e4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006864:	4b31      	ldr	r3, [pc, #196]	; (800692c <xTaskIncrementTick+0x158>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d203      	bcs.n	8006884 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800687c:	4a2e      	ldr	r2, [pc, #184]	; (8006938 <xTaskIncrementTick+0x164>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6013      	str	r3, [r2, #0]
						break;
 8006882:	e02f      	b.n	80068e4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	3304      	adds	r3, #4
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe faef 	bl	8004e6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	3318      	adds	r3, #24
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe fae6 	bl	8004e6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4b25      	ldr	r3, [pc, #148]	; (800693c <xTaskIncrementTick+0x168>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d903      	bls.n	80068b4 <xTaskIncrementTick+0xe0>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a22      	ldr	r2, [pc, #136]	; (800693c <xTaskIncrementTick+0x168>)
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <xTaskIncrementTick+0x16c>)
 80068c2:	441a      	add	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7fe fa71 	bl	8004db2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d4:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <xTaskIncrementTick+0x170>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068da:	429a      	cmp	r2, r3
 80068dc:	d3b3      	bcc.n	8006846 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068e2:	e7b0      	b.n	8006846 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068e4:	4b17      	ldr	r3, [pc, #92]	; (8006944 <xTaskIncrementTick+0x170>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ea:	4915      	ldr	r1, [pc, #84]	; (8006940 <xTaskIncrementTick+0x16c>)
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d907      	bls.n	800690c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e004      	b.n	800690c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006902:	4b11      	ldr	r3, [pc, #68]	; (8006948 <xTaskIncrementTick+0x174>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	4a0f      	ldr	r2, [pc, #60]	; (8006948 <xTaskIncrementTick+0x174>)
 800690a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <xTaskIncrementTick+0x178>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006918:	697b      	ldr	r3, [r7, #20]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20003318 	.word	0x20003318
 8006928:	200032f4 	.word	0x200032f4
 800692c:	200032a8 	.word	0x200032a8
 8006930:	200032ac 	.word	0x200032ac
 8006934:	20003308 	.word	0x20003308
 8006938:	20003310 	.word	0x20003310
 800693c:	200032f8 	.word	0x200032f8
 8006940:	20002e20 	.word	0x20002e20
 8006944:	20002e1c 	.word	0x20002e1c
 8006948:	20003300 	.word	0x20003300
 800694c:	20003304 	.word	0x20003304

08006950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006956:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <vTaskSwitchContext+0xa4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800695e:	4b26      	ldr	r3, [pc, #152]	; (80069f8 <vTaskSwitchContext+0xa8>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006964:	e040      	b.n	80069e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <vTaskSwitchContext+0xa8>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800696c:	4b23      	ldr	r3, [pc, #140]	; (80069fc <vTaskSwitchContext+0xac>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e00f      	b.n	8006994 <vTaskSwitchContext+0x44>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <vTaskSwitchContext+0x3e>
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	e7fe      	b.n	800698c <vTaskSwitchContext+0x3c>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3b01      	subs	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	491a      	ldr	r1, [pc, #104]	; (8006a00 <vTaskSwitchContext+0xb0>)
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0e5      	beq.n	8006974 <vTaskSwitchContext+0x24>
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <vTaskSwitchContext+0xb0>)
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	3308      	adds	r3, #8
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d104      	bne.n	80069d8 <vTaskSwitchContext+0x88>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <vTaskSwitchContext+0xb4>)
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4a06      	ldr	r2, [pc, #24]	; (80069fc <vTaskSwitchContext+0xac>)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6013      	str	r3, [r2, #0]
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	20003318 	.word	0x20003318
 80069f8:	20003304 	.word	0x20003304
 80069fc:	200032f8 	.word	0x200032f8
 8006a00:	20002e20 	.word	0x20002e20
 8006a04:	20002e1c 	.word	0x20002e1c

08006a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d109      	bne.n	8006a2c <vTaskPlaceOnEventList+0x24>
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e7fe      	b.n	8006a2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a2c:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <vTaskPlaceOnEventList+0x44>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3318      	adds	r3, #24
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fe f9e0 	bl	8004dfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	6838      	ldr	r0, [r7, #0]
 8006a3e:	f000 fa77 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20002e1c 	.word	0x20002e1c

08006a50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <vTaskPlaceOnEventListRestricted+0x26>
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e7fe      	b.n	8006a74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <vTaskPlaceOnEventListRestricted+0x50>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3318      	adds	r3, #24
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7fe f997 	bl	8004db2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f000 fa4c 	bl	8006f30 <prvAddCurrentTaskToDelayedList>
	}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20002e1c 	.word	0x20002e1c

08006aa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <xTaskRemoveFromEventList+0x2a>
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e7fe      	b.n	8006acc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe f9ca 	bl	8004e6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <xTaskRemoveFromEventList+0xac>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11d      	bne.n	8006b1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe f9c1 	bl	8004e6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aee:	4b19      	ldr	r3, [pc, #100]	; (8006b54 <xTaskRemoveFromEventList+0xb0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d903      	bls.n	8006afe <xTaskRemoveFromEventList+0x5a>
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <xTaskRemoveFromEventList+0xb0>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4a13      	ldr	r2, [pc, #76]	; (8006b58 <xTaskRemoveFromEventList+0xb4>)
 8006b0c:	441a      	add	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7fe f94c 	bl	8004db2 <vListInsertEnd>
 8006b1a:	e005      	b.n	8006b28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3318      	adds	r3, #24
 8006b20:	4619      	mov	r1, r3
 8006b22:	480e      	ldr	r0, [pc, #56]	; (8006b5c <xTaskRemoveFromEventList+0xb8>)
 8006b24:	f7fe f945 	bl	8004db2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <xTaskRemoveFromEventList+0xbc>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d905      	bls.n	8006b42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b36:	2301      	movs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <xTaskRemoveFromEventList+0xc0>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e001      	b.n	8006b46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b46:	697b      	ldr	r3, [r7, #20]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20003318 	.word	0x20003318
 8006b54:	200032f8 	.word	0x200032f8
 8006b58:	20002e20 	.word	0x20002e20
 8006b5c:	200032b0 	.word	0x200032b0
 8006b60:	20002e1c 	.word	0x20002e1c
 8006b64:	20003304 	.word	0x20003304

08006b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <vTaskInternalSetTimeOutState+0x24>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b78:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <vTaskInternalSetTimeOutState+0x28>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	605a      	str	r2, [r3, #4]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20003308 	.word	0x20003308
 8006b90:	200032f4 	.word	0x200032f4

08006b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <xTaskCheckForTimeOut+0x24>
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e7fe      	b.n	8006bb6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <xTaskCheckForTimeOut+0x3e>
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e7fe      	b.n	8006bd0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006bd2:	f7fe fa9b 	bl	800510c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <xTaskCheckForTimeOut+0xb8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d102      	bne.n	8006bf6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	e023      	b.n	8006c3e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <xTaskCheckForTimeOut+0xbc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d007      	beq.n	8006c12 <xTaskCheckForTimeOut+0x7e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d802      	bhi.n	8006c12 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	e015      	b.n	8006c3e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d90b      	bls.n	8006c34 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff ff9d 	bl	8006b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e004      	b.n	8006c3e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c3e:	f7fe fa93 	bl	8005168 <vPortExitCritical>

	return xReturn;
 8006c42:	69fb      	ldr	r3, [r7, #28]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	200032f4 	.word	0x200032f4
 8006c50:	20003308 	.word	0x20003308

08006c54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c58:	4b03      	ldr	r3, [pc, #12]	; (8006c68 <vTaskMissedYield+0x14>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	20003304 	.word	0x20003304

08006c6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c74:	f000 f852 	bl	8006d1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c78:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <prvIdleTask+0x28>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d9f9      	bls.n	8006c74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <prvIdleTask+0x2c>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c90:	e7f0      	b.n	8006c74 <prvIdleTask+0x8>
 8006c92:	bf00      	nop
 8006c94:	20002e20 	.word	0x20002e20
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	e00c      	b.n	8006cc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <prvInitialiseTaskLists+0x60>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe f84e 	bl	8004d58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b37      	cmp	r3, #55	; 0x37
 8006cc6:	d9ef      	bls.n	8006ca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cc8:	480d      	ldr	r0, [pc, #52]	; (8006d00 <prvInitialiseTaskLists+0x64>)
 8006cca:	f7fe f845 	bl	8004d58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cce:	480d      	ldr	r0, [pc, #52]	; (8006d04 <prvInitialiseTaskLists+0x68>)
 8006cd0:	f7fe f842 	bl	8004d58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cd4:	480c      	ldr	r0, [pc, #48]	; (8006d08 <prvInitialiseTaskLists+0x6c>)
 8006cd6:	f7fe f83f 	bl	8004d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cda:	480c      	ldr	r0, [pc, #48]	; (8006d0c <prvInitialiseTaskLists+0x70>)
 8006cdc:	f7fe f83c 	bl	8004d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ce0:	480b      	ldr	r0, [pc, #44]	; (8006d10 <prvInitialiseTaskLists+0x74>)
 8006ce2:	f7fe f839 	bl	8004d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <prvInitialiseTaskLists+0x78>)
 8006ce8:	4a05      	ldr	r2, [pc, #20]	; (8006d00 <prvInitialiseTaskLists+0x64>)
 8006cea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <prvInitialiseTaskLists+0x7c>)
 8006cee:	4a05      	ldr	r2, [pc, #20]	; (8006d04 <prvInitialiseTaskLists+0x68>)
 8006cf0:	601a      	str	r2, [r3, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20002e20 	.word	0x20002e20
 8006d00:	20003280 	.word	0x20003280
 8006d04:	20003294 	.word	0x20003294
 8006d08:	200032b0 	.word	0x200032b0
 8006d0c:	200032c4 	.word	0x200032c4
 8006d10:	200032dc 	.word	0x200032dc
 8006d14:	200032a8 	.word	0x200032a8
 8006d18:	200032ac 	.word	0x200032ac

08006d1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d22:	e019      	b.n	8006d58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d24:	f7fe f9f2 	bl	800510c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d28:	4b0f      	ldr	r3, [pc, #60]	; (8006d68 <prvCheckTasksWaitingTermination+0x4c>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3304      	adds	r3, #4
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe f899 	bl	8004e6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d3a:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <prvCheckTasksWaitingTermination+0x50>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvCheckTasksWaitingTermination+0x50>)
 8006d42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <prvCheckTasksWaitingTermination+0x54>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <prvCheckTasksWaitingTermination+0x54>)
 8006d4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d4e:	f7fe fa0b 	bl	8005168 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f80e 	bl	8006d74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <prvCheckTasksWaitingTermination+0x54>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e1      	bne.n	8006d24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200032c4 	.word	0x200032c4
 8006d6c:	200032f0 	.word	0x200032f0
 8006d70:	200032d8 	.word	0x200032d8

08006d74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d108      	bne.n	8006d98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fb9a 	bl	80054c4 <vPortFree>
				vPortFree( pxTCB );
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fe fb97 	bl	80054c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d96:	e017      	b.n	8006dc8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d103      	bne.n	8006daa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fe fb8e 	bl	80054c4 <vPortFree>
	}
 8006da8:	e00e      	b.n	8006dc8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d009      	beq.n	8006dc8 <prvDeleteTCB+0x54>
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	e7fe      	b.n	8006dc6 <prvDeleteTCB+0x52>
	}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <prvResetNextTaskUnblockTime+0x44>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <prvResetNextTaskUnblockTime+0x14>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <prvResetNextTaskUnblockTime+0x16>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dea:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <prvResetNextTaskUnblockTime+0x48>)
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295
 8006df0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006df2:	e008      	b.n	8006e06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006df4:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <prvResetNextTaskUnblockTime+0x44>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4a05      	ldr	r2, [pc, #20]	; (8006e18 <prvResetNextTaskUnblockTime+0x48>)
 8006e04:	6013      	str	r3, [r2, #0]
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200032a8 	.word	0x200032a8
 8006e18:	20003310 	.word	0x20003310

08006e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e22:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <xTaskGetSchedulerState+0x34>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	e008      	b.n	8006e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <xTaskGetSchedulerState+0x38>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d102      	bne.n	8006e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	e001      	b.n	8006e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e42:	687b      	ldr	r3, [r7, #4]
	}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	200032fc 	.word	0x200032fc
 8006e54:	20003318 	.word	0x20003318

08006e58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d054      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e6e:	4b2d      	ldr	r3, [pc, #180]	; (8006f24 <xTaskPriorityDisinherit+0xcc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d009      	beq.n	8006e8c <xTaskPriorityDisinherit+0x34>
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	e7fe      	b.n	8006e8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <xTaskPriorityDisinherit+0x50>
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	e7fe      	b.n	8006ea6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d02c      	beq.n	8006f18 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d128      	bne.n	8006f18 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd ffce 	bl	8004e6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <xTaskPriorityDisinherit+0xd0>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <xTaskPriorityDisinherit+0xa0>
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <xTaskPriorityDisinherit+0xd0>)
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <xTaskPriorityDisinherit+0xd4>)
 8006f06:	441a      	add	r2, r3
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fd ff4f 	bl	8004db2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f18:	697b      	ldr	r3, [r7, #20]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20002e1c 	.word	0x20002e1c
 8006f28:	200032f8 	.word	0x200032f8
 8006f2c:	20002e20 	.word	0x20002e20

08006f30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f3a:	4b21      	ldr	r3, [pc, #132]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f40:	4b20      	ldr	r3, [pc, #128]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fd ff90 	bl	8004e6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d10a      	bne.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4619      	mov	r1, r3
 8006f62:	4819      	ldr	r0, [pc, #100]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f64:	f7fd ff25 	bl	8004db2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f68:	e026      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d209      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fd ff33 	bl	8004dfa <vListInsert>
}
 8006f94:	e010      	b.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f96:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fd ff29 	bl	8004dfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d202      	bcs.n	8006fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fb2:	4a08      	ldr	r2, [pc, #32]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6013      	str	r3, [r2, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200032f4 	.word	0x200032f4
 8006fc4:	20002e1c 	.word	0x20002e1c
 8006fc8:	200032dc 	.word	0x200032dc
 8006fcc:	200032ac 	.word	0x200032ac
 8006fd0:	200032a8 	.word	0x200032a8
 8006fd4:	20003310 	.word	0x20003310

08006fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fe2:	f000 fac3 	bl	800756c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fe6:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <xTimerCreateTimerTask+0x80>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d021      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ff6:	1d3a      	adds	r2, r7, #4
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f7fd fe8f 	bl	8004d24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	9202      	str	r2, [sp, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2302      	movs	r3, #2
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	460a      	mov	r2, r1
 8007018:	4910      	ldr	r1, [pc, #64]	; (800705c <xTimerCreateTimerTask+0x84>)
 800701a:	4811      	ldr	r0, [pc, #68]	; (8007060 <xTimerCreateTimerTask+0x88>)
 800701c:	f7ff f8f4 	bl	8006208 <xTaskCreateStatic>
 8007020:	4602      	mov	r2, r0
 8007022:	4b10      	ldr	r3, [pc, #64]	; (8007064 <xTimerCreateTimerTask+0x8c>)
 8007024:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007026:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <xTimerCreateTimerTask+0x8c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <xTimerCreateTimerTask+0x74>
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	e7fe      	b.n	800704a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800704c:	697b      	ldr	r3, [r7, #20]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	2000334c 	.word	0x2000334c
 800705c:	0800812c 	.word	0x0800812c
 8007060:	08007181 	.word	0x08007181
 8007064:	20003350 	.word	0x20003350

08007068 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007076:	2300      	movs	r3, #0
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <xTimerGenericCommand+0x2c>
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	e7fe      	b.n	8007092 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007094:	4b19      	ldr	r3, [pc, #100]	; (80070fc <xTimerGenericCommand+0x94>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02a      	beq.n	80070f2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	dc18      	bgt.n	80070e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070ae:	f7ff feb5 	bl	8006e1c <xTaskGetSchedulerState>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d109      	bne.n	80070cc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070b8:	4b10      	ldr	r3, [pc, #64]	; (80070fc <xTimerGenericCommand+0x94>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	f107 0110 	add.w	r1, r7, #16
 80070c0:	2300      	movs	r3, #0
 80070c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c4:	f7fe fc4c 	bl	8005960 <xQueueGenericSend>
 80070c8:	6278      	str	r0, [r7, #36]	; 0x24
 80070ca:	e012      	b.n	80070f2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <xTimerGenericCommand+0x94>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	f107 0110 	add.w	r1, r7, #16
 80070d4:	2300      	movs	r3, #0
 80070d6:	2200      	movs	r2, #0
 80070d8:	f7fe fc42 	bl	8005960 <xQueueGenericSend>
 80070dc:	6278      	str	r0, [r7, #36]	; 0x24
 80070de:	e008      	b.n	80070f2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <xTimerGenericCommand+0x94>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	f107 0110 	add.w	r1, r7, #16
 80070e8:	2300      	movs	r3, #0
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	f7fe fd32 	bl	8005b54 <xQueueGenericSendFromISR>
 80070f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3728      	adds	r7, #40	; 0x28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	2000334c 	.word	0x2000334c

08007100 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800710a:	4b1c      	ldr	r3, [pc, #112]	; (800717c <prvProcessExpiredTimer+0x7c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3304      	adds	r3, #4
 8007118:	4618      	mov	r0, r3
 800711a:	f7fd fea7 	bl	8004e6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d121      	bne.n	800716a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	f000 f8c8 	bl	80072c8 <prvInsertTimerInActiveList>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d015      	beq.n	800716a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800713e:	2300      	movs	r3, #0
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	2100      	movs	r1, #0
 8007148:	6978      	ldr	r0, [r7, #20]
 800714a:	f7ff ff8d 	bl	8007068 <xTimerGenericCommand>
 800714e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <prvProcessExpiredTimer+0x6a>
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e7fe      	b.n	8007168 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	4798      	blx	r3
}
 8007172:	bf00      	nop
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20003344 	.word	0x20003344

08007180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007188:	f107 0308 	add.w	r3, r7, #8
 800718c:	4618      	mov	r0, r3
 800718e:	f000 f857 	bl	8007240 <prvGetNextExpireTime>
 8007192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f803 	bl	80071a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800719e:	f000 f8d5 	bl	800734c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071a2:	e7f1      	b.n	8007188 <prvTimerTask+0x8>

080071a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ae:	f7ff fa57 	bl	8006660 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071b2:	f107 0308 	add.w	r3, r7, #8
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f866 	bl	8007288 <prvSampleTimeNow>
 80071bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d130      	bne.n	8007226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <prvProcessTimerOrBlockTask+0x3c>
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d806      	bhi.n	80071e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071d2:	f7ff fa53 	bl	800667c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ff91 	bl	8007100 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071de:	e024      	b.n	800722a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <prvProcessTimerOrBlockTask+0x90>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071f8:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <prvProcessTimerOrBlockTask+0x94>)
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4619      	mov	r1, r3
 8007206:	f7fe ffcb 	bl	80061a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800720a:	f7ff fa37 	bl	800667c <xTaskResumeAll>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007214:	4b09      	ldr	r3, [pc, #36]	; (800723c <prvProcessTimerOrBlockTask+0x98>)
 8007216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	f3bf 8f6f 	isb	sy
}
 8007224:	e001      	b.n	800722a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007226:	f7ff fa29 	bl	800667c <xTaskResumeAll>
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20003348 	.word	0x20003348
 8007238:	2000334c 	.word	0x2000334c
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007248:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <prvGetNextExpireTime+0x44>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <prvGetNextExpireTime+0x44>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e001      	b.n	8007276 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007276:	68fb      	ldr	r3, [r7, #12]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	20003344 	.word	0x20003344

08007288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007290:	f7ff fa90 	bl	80067b4 <xTaskGetTickCount>
 8007294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <prvSampleTimeNow+0x3c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d205      	bcs.n	80072ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072a0:	f000 f904 	bl	80074ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072b2:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <prvSampleTimeNow+0x3c>)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20003354 	.word	0x20003354

080072c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d812      	bhi.n	8007314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d302      	bcc.n	8007302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	e01b      	b.n	800733a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <prvInsertTimerInActiveList+0x7c>)
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3304      	adds	r3, #4
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7fd fd74 	bl	8004dfa <vListInsert>
 8007312:	e012      	b.n	800733a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d206      	bcs.n	800732a <prvInsertTimerInActiveList+0x62>
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d302      	bcc.n	800732a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	e007      	b.n	800733a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <prvInsertTimerInActiveList+0x80>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3304      	adds	r3, #4
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f7fd fd60 	bl	8004dfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800733a:	697b      	ldr	r3, [r7, #20]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20003348 	.word	0x20003348
 8007348:	20003344 	.word	0x20003344

0800734c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	; 0x38
 8007350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007352:	e099      	b.n	8007488 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da17      	bge.n	800738a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800735a:	1d3b      	adds	r3, r7, #4
 800735c:	3304      	adds	r3, #4
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <prvProcessReceivedCommands+0x2e>
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	e7fe      	b.n	8007378 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007380:	6850      	ldr	r0, [r2, #4]
 8007382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007384:	6892      	ldr	r2, [r2, #8]
 8007386:	4611      	mov	r1, r2
 8007388:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	db7b      	blt.n	8007488 <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	3304      	adds	r3, #4
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fd fd63 	bl	8004e6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073a6:	463b      	mov	r3, r7
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff ff6d 	bl	8007288 <prvSampleTimeNow>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d867      	bhi.n	8007486 <prvProcessReceivedCommands+0x13a>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <prvProcessReceivedCommands+0x70>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073e5 	.word	0x080073e5
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073e5 	.word	0x080073e5
 80073c8:	08007489 	.word	0x08007489
 80073cc:	0800743f 	.word	0x0800743f
 80073d0:	08007475 	.word	0x08007475
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080073e5 	.word	0x080073e5
 80073dc:	08007489 	.word	0x08007489
 80073e0:	0800743f 	.word	0x0800743f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	18d1      	adds	r1, r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073f2:	f7ff ff69 	bl	80072c8 <prvInsertTimerInActiveList>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d045      	beq.n	8007488 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007402:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d13d      	bne.n	8007488 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	441a      	add	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2300      	movs	r3, #0
 800741a:	2100      	movs	r1, #0
 800741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741e:	f7ff fe23 	bl	8007068 <xTimerGenericCommand>
 8007422:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d12e      	bne.n	8007488 <prvProcessReceivedCommands+0x13c>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61bb      	str	r3, [r7, #24]
 800743c:	e7fe      	b.n	800743c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <prvProcessReceivedCommands+0x114>
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e7fe      	b.n	800745e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	18d1      	adds	r1, r2, r3
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746e:	f7ff ff2b 	bl	80072c8 <prvInsertTimerInActiveList>
					break;
 8007472:	e009      	b.n	8007488 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d104      	bne.n	8007488 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800747e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007480:	f7fe f820 	bl	80054c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007484:	e000      	b.n	8007488 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
 8007486:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007488:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <prvProcessReceivedCommands+0x15c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	1d39      	adds	r1, r7, #4
 800748e:	2200      	movs	r2, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fbf3 	bl	8005c7c <xQueueReceive>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	f47f af5b 	bne.w	8007354 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800749e:	bf00      	nop
 80074a0:	3730      	adds	r7, #48	; 0x30
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	2000334c 	.word	0x2000334c

080074ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074b2:	e044      	b.n	800753e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074b4:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <prvSwitchTimerLists+0xb8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074be:	4b29      	ldr	r3, [pc, #164]	; (8007564 <prvSwitchTimerLists+0xb8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fd fccd 	bl	8004e6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	6938      	ldr	r0, [r7, #16]
 80074d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d12d      	bne.n	800753e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4413      	add	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d90e      	bls.n	8007512 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007500:	4b18      	ldr	r3, [pc, #96]	; (8007564 <prvSwitchTimerLists+0xb8>)
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	3304      	adds	r3, #4
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7fd fc75 	bl	8004dfa <vListInsert>
 8007510:	e015      	b.n	800753e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	2100      	movs	r1, #0
 800751c:	6938      	ldr	r0, [r7, #16]
 800751e:	f7ff fda3 	bl	8007068 <xTimerGenericCommand>
 8007522:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <prvSwitchTimerLists+0x92>
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	e7fe      	b.n	800753c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800753e:	4b09      	ldr	r3, [pc, #36]	; (8007564 <prvSwitchTimerLists+0xb8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1b5      	bne.n	80074b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <prvSwitchTimerLists+0xb8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800754e:	4b06      	ldr	r3, [pc, #24]	; (8007568 <prvSwitchTimerLists+0xbc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a04      	ldr	r2, [pc, #16]	; (8007564 <prvSwitchTimerLists+0xb8>)
 8007554:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007556:	4a04      	ldr	r2, [pc, #16]	; (8007568 <prvSwitchTimerLists+0xbc>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6013      	str	r3, [r2, #0]
}
 800755c:	bf00      	nop
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20003344 	.word	0x20003344
 8007568:	20003348 	.word	0x20003348

0800756c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007572:	f7fd fdcb 	bl	800510c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007576:	4b15      	ldr	r3, [pc, #84]	; (80075cc <prvCheckForValidListAndQueue+0x60>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d120      	bne.n	80075c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800757e:	4814      	ldr	r0, [pc, #80]	; (80075d0 <prvCheckForValidListAndQueue+0x64>)
 8007580:	f7fd fbea 	bl	8004d58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007584:	4813      	ldr	r0, [pc, #76]	; (80075d4 <prvCheckForValidListAndQueue+0x68>)
 8007586:	f7fd fbe7 	bl	8004d58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800758a:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <prvCheckForValidListAndQueue+0x6c>)
 800758c:	4a10      	ldr	r2, [pc, #64]	; (80075d0 <prvCheckForValidListAndQueue+0x64>)
 800758e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007590:	4b12      	ldr	r3, [pc, #72]	; (80075dc <prvCheckForValidListAndQueue+0x70>)
 8007592:	4a10      	ldr	r2, [pc, #64]	; (80075d4 <prvCheckForValidListAndQueue+0x68>)
 8007594:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007596:	2300      	movs	r3, #0
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <prvCheckForValidListAndQueue+0x74>)
 800759c:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <prvCheckForValidListAndQueue+0x78>)
 800759e:	2110      	movs	r1, #16
 80075a0:	200a      	movs	r0, #10
 80075a2:	f7fe f90b 	bl	80057bc <xQueueGenericCreateStatic>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4b08      	ldr	r3, [pc, #32]	; (80075cc <prvCheckForValidListAndQueue+0x60>)
 80075aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <prvCheckForValidListAndQueue+0x60>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d005      	beq.n	80075c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <prvCheckForValidListAndQueue+0x60>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	490b      	ldr	r1, [pc, #44]	; (80075e8 <prvCheckForValidListAndQueue+0x7c>)
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fdc8 	bl	8006150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075c0:	f7fd fdd2 	bl	8005168 <vPortExitCritical>
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	2000334c 	.word	0x2000334c
 80075d0:	2000331c 	.word	0x2000331c
 80075d4:	20003330 	.word	0x20003330
 80075d8:	20003344 	.word	0x20003344
 80075dc:	20003348 	.word	0x20003348
 80075e0:	200033f8 	.word	0x200033f8
 80075e4:	20003358 	.word	0x20003358
 80075e8:	08008134 	.word	0x08008134

080075ec <UART_Send_Start>:

#define BUF_SIZE 4



void UART_Send_Start(){
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
	char *message_buf = "start\n";
 80075f2:	4b08      	ldr	r3, [pc, #32]	; (8007614 <UART_Send_Start+0x28>)
 80075f4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)message_buf, strlen(message_buf), 0xFFFF);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7f8 fdc2 	bl	8000180 <strlen>
 80075fc:	4603      	mov	r3, r0
 80075fe:	b29a      	uxth	r2, r3
 8007600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4804      	ldr	r0, [pc, #16]	; (8007618 <UART_Send_Start+0x2c>)
 8007608:	f7fb fb52 	bl	8002cb0 <HAL_UART_Transmit>
}
 800760c:	bf00      	nop
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	0800813c 	.word	0x0800813c
 8007618:	20003938 	.word	0x20003938

0800761c <UART_Print_uint16_t>:
	memcpy(message_buf, &val, sizeof(uint32_t));
	HAL_UART_Transmit(&huart1, (uint8_t*)message_buf, BUF_SIZE, 1000);
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_buf, BUF_SIZE);
}

void UART_Print_uint16_t(uint16_t val){
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	80fb      	strh	r3, [r7, #6]
	uint8_t message_buf[BUF_SIZE];
	memcpy(message_buf, &val, sizeof(uint16_t));
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)message_buf, BUF_SIZE, 1000);
 800762a:	f107 010c 	add.w	r1, r7, #12
 800762e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007632:	2204      	movs	r2, #4
 8007634:	4803      	ldr	r0, [pc, #12]	; (8007644 <UART_Print_uint16_t+0x28>)
 8007636:	f7fb fb3b 	bl	8002cb0 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_buf, BUF_SIZE);
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20003938 	.word	0x20003938

08007648 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b092      	sub	sp, #72	; 0x48
 800764c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 800764e:	f7fd f8a3 	bl	8004798 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8007652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007656:	2224      	movs	r2, #36	; 0x24
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd2f 	bl	80080be <memset>
 8007660:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <MX_FREERTOS_Init+0x7c>)
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
 8007664:	2380      	movs	r3, #128	; 0x80
 8007666:	63bb      	str	r3, [r7, #56]	; 0x38
 8007668:	2318      	movs	r3, #24
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800766c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007670:	461a      	mov	r2, r3
 8007672:	2100      	movs	r1, #0
 8007674:	4814      	ldr	r0, [pc, #80]	; (80076c8 <MX_FREERTOS_Init+0x80>)
 8007676:	f7fd f8f7 	bl	8004868 <osThreadNew>
 800767a:	4602      	mov	r2, r0
 800767c:	4b13      	ldr	r3, [pc, #76]	; (80076cc <MX_FREERTOS_Init+0x84>)
 800767e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  const osThreadAttr_t pulseHandlerTask_attributes = {
 8007680:	463b      	mov	r3, r7
 8007682:	2224      	movs	r2, #36	; 0x24
 8007684:	2100      	movs	r1, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fd19 	bl	80080be <memset>
 800768c:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <MX_FREERTOS_Init+0x88>)
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	2320      	movs	r3, #32
 8007698:	61bb      	str	r3, [r7, #24]
      .name = "pulseHandlerTask",
      .priority = (osPriority_t) osPriorityAboveNormal,
      //.stack_size = 1024
	  .stack_size = 4096
    };
  pulseHandlerTaskHandle = osThreadNew(PulseHandlerTask, NULL, &pulseHandlerTask_attributes);
 800769a:	463b      	mov	r3, r7
 800769c:	461a      	mov	r2, r3
 800769e:	2100      	movs	r1, #0
 80076a0:	480c      	ldr	r0, [pc, #48]	; (80076d4 <MX_FREERTOS_Init+0x8c>)
 80076a2:	f7fd f8e1 	bl	8004868 <osThreadNew>
 80076a6:	4602      	mov	r2, r0
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <MX_FREERTOS_Init+0x90>)
 80076aa:	601a      	str	r2, [r3, #0]
  pulseQueue = osMessageQueueNew (10, sizeof(Pulse), NULL);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2106      	movs	r1, #6
 80076b0:	200a      	movs	r0, #10
 80076b2:	f7fd f9b1 	bl	8004a18 <osMessageQueueNew>
 80076b6:	4602      	mov	r2, r0
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <MX_FREERTOS_Init+0x94>)
 80076ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80076bc:	bf00      	nop
 80076be:	3748      	adds	r7, #72	; 0x48
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08008144 	.word	0x08008144
 80076c8:	080076e1 	.word	0x080076e1
 80076cc:	2000348c 	.word	0x2000348c
 80076d0:	08008150 	.word	0x08008150
 80076d4:	08007825 	.word	0x08007825
 80076d8:	20003490 	.word	0x20003490
 80076dc:	200038b0 	.word	0x200038b0

080076e0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80076e8:	2001      	movs	r0, #1
 80076ea:	f7fd f967 	bl	80049bc <osDelay>
 80076ee:	e7fb      	b.n	80076e8 <StartDefaultTask+0x8>

080076f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80076f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4313      	orrs	r3, r2
 8007706:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4013      	ands	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007714:	68fb      	ldr	r3, [r7, #12]
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772a:	1d3b      	adds	r3, r7, #4
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	609a      	str	r2, [r3, #8]
 8007734:	60da      	str	r2, [r3, #12]
 8007736:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007738:	2004      	movs	r0, #4
 800773a:	f7ff ffd9 	bl	80076f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800773e:	2001      	movs	r0, #1
 8007740:	f7ff ffd6 	bl	80076f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007744:	2002      	movs	r0, #2
 8007746:	f7ff ffd3 	bl	80076f0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800774a:	2008      	movs	r0, #8
 800774c:	f7ff ffd0 	bl	80076f0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA0_GPIO_Port, PA0_Pin, GPIO_PIN_RESET);
 8007750:	2200      	movs	r2, #0
 8007752:	2101      	movs	r1, #1
 8007754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007758:	f7f9 f9b2 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800775c:	2200      	movs	r2, #0
 800775e:	2123      	movs	r1, #35	; 0x23
 8007760:	4825      	ldr	r0, [pc, #148]	; (80077f8 <MX_GPIO_Init+0xd4>)
 8007762:	f7f9 f9ad 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC0_Pin;
 8007766:	2301      	movs	r3, #1
 8007768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800776a:	4b24      	ldr	r3, [pc, #144]	; (80077fc <MX_GPIO_Init+0xd8>)
 800776c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PC0_GPIO_Port, &GPIO_InitStruct);
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4822      	ldr	r0, [pc, #136]	; (8007800 <MX_GPIO_Init+0xdc>)
 8007778:	f7f9 f81a 	bl	80007b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA0_Pin;
 800777c:	2301      	movs	r3, #1
 800777e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007780:	2301      	movs	r3, #1
 8007782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 800778c:	1d3b      	adds	r3, r7, #4
 800778e:	4619      	mov	r1, r3
 8007790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007794:	f7f9 f80c 	bl	80007b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007798:	2310      	movs	r3, #16
 800779a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <MX_GPIO_Init+0xe0>)
 800779e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077a4:	1d3b      	adds	r3, r7, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4815      	ldr	r0, [pc, #84]	; (8007800 <MX_GPIO_Init+0xdc>)
 80077aa:	f7f9 f801 	bl	80007b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80077ae:	2323      	movs	r3, #35	; 0x23
 80077b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077b2:	2301      	movs	r3, #1
 80077b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ba:	2300      	movs	r3, #0
 80077bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077be:	1d3b      	adds	r3, r7, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	480d      	ldr	r0, [pc, #52]	; (80077f8 <MX_GPIO_Init+0xd4>)
 80077c4:	f7f8 fff4 	bl	80007b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80077c8:	2303      	movs	r3, #3
 80077ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	480b      	ldr	r0, [pc, #44]	; (8007808 <MX_GPIO_Init+0xe4>)
 80077da:	f7f8 ffe9 	bl	80007b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80077de:	2200      	movs	r2, #0
 80077e0:	2105      	movs	r1, #5
 80077e2:	2006      	movs	r0, #6
 80077e4:	f7f8 ff5c 	bl	80006a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80077e8:	2006      	movs	r0, #6
 80077ea:	f7f8 ff73 	bl	80006d4 <HAL_NVIC_EnableIRQ>

}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	48000400 	.word	0x48000400
 80077fc:	10310000 	.word	0x10310000
 8007800:	48000800 	.word	0x48000800
 8007804:	10110000 	.word	0x10110000
 8007808:	48000c00 	.word	0x48000c00

0800780c <_Input>:
#include "input.h"
#include "UART_Print.h"

PulseProcessor pulse_processor;

void _Input(Input *self, uint8_t input_idx){
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
	_PulseProcessor(&pulse_processor, 1);
	pulse_processor.next = &geometry_builder;
	input.next = &pulse_processor;
	input.input_idx_ = input_idx;
	*/
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <PulseHandlerTask>:

void PulseHandlerTask(void *argument){
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	_Input(&input0, 0);
 800782c:	2100      	movs	r1, #0
 800782e:	4808      	ldr	r0, [pc, #32]	; (8007850 <PulseHandlerTask+0x2c>)
 8007830:	f7ff ffec 	bl	800780c <_Input>
	//uint64_t timer = 0;
	while(1){

		Pulse p;
		osMessageQueueGet (pulseQueue, (void *) &p, NULL, osWaitForever);
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <PulseHandlerTask+0x30>)
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	f107 0108 	add.w	r1, r7, #8
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
 8007840:	2200      	movs	r2, #0
 8007842:	f7fd f9e3 	bl	8004c0c <osMessageQueueGet>
		UART_Print_uint16_t(p.pulse_len);
 8007846:	89bb      	ldrh	r3, [r7, #12]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff fee7 	bl	800761c <UART_Print_uint16_t>
	while(1){
 800784e:	e7f1      	b.n	8007834 <PulseHandlerTask+0x10>
 8007850:	20003494 	.word	0x20003494
 8007854:	200038b0 	.word	0x200038b0

08007858 <enqueue_pulse>:
		*/
	}
}


void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	807b      	strh	r3, [r7, #2]
 8007864:	4613      	mov	r3, r2
 8007866:	803b      	strh	r3, [r7, #0]
	Pulse p = {self->input_idx_, start_time, len};
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800786e:	723b      	strb	r3, [r7, #8]
 8007870:	887b      	ldrh	r3, [r7, #2]
 8007872:	817b      	strh	r3, [r7, #10]
 8007874:	883b      	ldrh	r3, [r7, #0]
 8007876:	81bb      	strh	r3, [r7, #12]
	osMessageQueuePut(pulseQueue, (const void *) &p, 0, 0);
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <enqueue_pulse+0x38>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	2300      	movs	r3, #0
 8007882:	2200      	movs	r2, #0
 8007884:	f7fd f94e 	bl	8004b24 <osMessageQueuePut>
	//UART_Print_uint16_t(p.pulse_len);
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	200038b0 	.word	0x200038b0

08007894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007898:	f7f8 fe02 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800789c:	f000 f812 	bl	80078c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80078a0:	f7ff ff40 	bl	8007724 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80078a4:	f000 fb18 	bl	8007ed8 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80078a8:	f000 faa2 	bl	8007df0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  UART_Send_Start();
 80078ac:	f7ff fe9e 	bl	80075ec <UART_Send_Start>
  HAL_TIM_Base_Start(&htim16);
 80078b0:	4803      	ldr	r0, [pc, #12]	; (80078c0 <main+0x2c>)
 80078b2:	f7fa ff6f 	bl	8002794 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80078b6:	f7ff fec7 	bl	8007648 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80078ba:	f7fc ffa1 	bl	8004800 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80078be:	e7fe      	b.n	80078be <main+0x2a>
 80078c0:	200038f8 	.word	0x200038f8

080078c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b0ae      	sub	sp, #184	; 0xb8
 80078c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80078ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80078ce:	2248      	movs	r2, #72	; 0x48
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fbf3 	bl	80080be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80078d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	60da      	str	r2, [r3, #12]
 80078e6:	611a      	str	r2, [r3, #16]
 80078e8:	615a      	str	r2, [r3, #20]
 80078ea:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078ec:	1d3b      	adds	r3, r7, #4
 80078ee:	2250      	movs	r2, #80	; 0x50
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fbe3 	bl	80080be <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80078f8:	4a2a      	ldr	r2, [pc, #168]	; (80079a4 <SystemClock_Config+0xe0>)
 80078fa:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <SystemClock_Config+0xe0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	4b26      	ldr	r3, [pc, #152]	; (80079a4 <SystemClock_Config+0xe0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007910:	603b      	str	r3, [r7, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8007914:	2303      	movs	r3, #3
 8007916:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800791c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800791e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007922:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007924:	2340      	movs	r3, #64	; 0x40
 8007926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007930:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007934:	4618      	mov	r0, r3
 8007936:	f7f9 fcb1 	bl	800129c <HAL_RCC_OscConfig>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8007940:	f000 f894 	bl	8007a6c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8007944:	236f      	movs	r3, #111	; 0x6f
 8007946:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8007948:	2302      	movs	r3, #2
 800794a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800794c:	2300      	movs	r3, #0
 800794e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007950:	2300      	movs	r3, #0
 8007952:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007954:	2300      	movs	r3, #0
 8007956:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8007958:	2300      	movs	r3, #0
 800795a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800795c:	2300      	movs	r3, #0
 800795e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007960:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007964:	2101      	movs	r1, #1
 8007966:	4618      	mov	r0, r3
 8007968:	f7f9 fff6 	bl	8001958 <HAL_RCC_ClockConfig>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007972:	f000 f87b 	bl	8007a6c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 8007976:	f242 0301 	movw	r3, #8193	; 0x2001
 800797a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800797c:	2300      	movs	r3, #0
 800797e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8007980:	2300      	movs	r3, #0
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8007984:	2310      	movs	r3, #16
 8007986:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007988:	1d3b      	adds	r3, r7, #4
 800798a:	4618      	mov	r0, r3
 800798c:	f7fa fc51 	bl	8002232 <HAL_RCCEx_PeriphCLKConfig>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8007996:	f000 f869 	bl	8007a6c <Error_Handler>
  }
}
 800799a:	bf00      	nop
 800799c:	37b8      	adds	r7, #184	; 0xb8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	58000400 	.word	0x58000400

080079a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	80fb      	strh	r3, [r7, #6]
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 80079b2:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <HAL_GPIO_EXTI_Callback+0x90>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	4b20      	ldr	r3, [pc, #128]	; (8007a3c <HAL_GPIO_EXTI_Callback+0x94>)
 80079bc:	801a      	strh	r2, [r3, #0]

	GPIO_PinState pin_state = HAL_GPIO_ReadPin(PC0_GPIO_Port, PC0_Pin);
 80079be:	2101      	movs	r1, #1
 80079c0:	481f      	ldr	r0, [pc, #124]	; (8007a40 <HAL_GPIO_EXTI_Callback+0x98>)
 80079c2:	f7f9 f865 	bl	8000a90 <HAL_GPIO_ReadPin>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
	if (pin_state == GPIO_PIN_SET) {
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d10f      	bne.n	80079f0 <HAL_GPIO_EXTI_Callback+0x48>
		//Rising edge
		input0.rise_time_ = timestamp;
 80079d0:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <HAL_GPIO_EXTI_Callback+0x94>)
 80079d2:	881a      	ldrh	r2, [r3, #0]
 80079d4:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 80079d6:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
		input0.rise_valid_ = 1;
 80079da:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80079e2:	2201      	movs	r2, #1
 80079e4:	2101      	movs	r1, #1
 80079e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079ea:	f7f9 f869 	bl	8000ac0 <HAL_GPIO_WritePin>
		//Falling edge
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
		input0.rise_valid_ = 0;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 80079ee:	e01f      	b.n	8007a30 <HAL_GPIO_EXTI_Callback+0x88>
	else if (input0.rise_valid_ && pin_state == GPIO_PIN_RESET) {
 80079f0:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 80079f2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01a      	beq.n	8007a30 <HAL_GPIO_EXTI_Callback+0x88>
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d117      	bne.n	8007a30 <HAL_GPIO_EXTI_Callback+0x88>
		enqueue_pulse(&input0, input0.rise_time_, timestamp - input0.rise_time_);
 8007a00:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007a02:	f8b3 140a 	ldrh.w	r1, [r3, #1034]	; 0x40a
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <HAL_GPIO_EXTI_Callback+0x94>)
 8007a08:	881a      	ldrh	r2, [r3, #0]
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007a0c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	480b      	ldr	r0, [pc, #44]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007a18:	f7ff ff1e 	bl	8007858 <enqueue_pulse>
		input0.rise_valid_ = 0;
 8007a1c:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8007a24:	2200      	movs	r2, #0
 8007a26:	2101      	movs	r1, #1
 8007a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a2c:	f7f9 f848 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	200038f8 	.word	0x200038f8
 8007a3c:	200038b4 	.word	0x200038b4
 8007a40:	48000800 	.word	0x48000800
 8007a44:	20003494 	.word	0x20003494

08007a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a04      	ldr	r2, [pc, #16]	; (8007a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d101      	bne.n	8007a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007a5a:	f7f8 fd41 	bl	80004e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40012c00 	.word	0x40012c00

08007a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	210f      	movs	r1, #15
 8007a82:	f06f 0001 	mvn.w	r0, #1
 8007a86:	f7f8 fe0b 	bl	80006a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a8a:	bf00      	nop
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	2019      	movs	r0, #25
 8007ad6:	f7f8 fde3 	bl	80006a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8007ada:	2019      	movs	r0, #25
 8007adc:	f7f8 fdfa 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007ae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ae4:	f7ff ffd3 	bl	8007a8e <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007ae8:	f107 0208 	add.w	r2, r7, #8
 8007aec:	f107 030c 	add.w	r3, r7, #12
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fa f916 	bl	8001d24 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007af8:	f7fa f8fe 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8007afc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <HAL_InitTick+0x8c>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	0c9b      	lsrs	r3, r3, #18
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007b0c:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <HAL_InitTick+0x90>)
 8007b0e:	4a11      	ldr	r2, [pc, #68]	; (8007b54 <HAL_InitTick+0x94>)
 8007b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007b12:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <HAL_InitTick+0x90>)
 8007b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007b18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007b1a:	4a0d      	ldr	r2, [pc, #52]	; (8007b50 <HAL_InitTick+0x90>)
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <HAL_InitTick+0x90>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b26:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <HAL_InitTick+0x90>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007b2c:	4808      	ldr	r0, [pc, #32]	; (8007b50 <HAL_InitTick+0x90>)
 8007b2e:	f7fa fe06 	bl	800273e <HAL_TIM_Base_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007b38:	4805      	ldr	r0, [pc, #20]	; (8007b50 <HAL_InitTick+0x90>)
 8007b3a:	f7fa fe55 	bl	80027e8 <HAL_TIM_Base_Start_IT>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	e000      	b.n	8007b44 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3730      	adds	r7, #48	; 0x30
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	431bde83 	.word	0x431bde83
 8007b50:	200038b8 	.word	0x200038b8
 8007b54:	40012c00 	.word	0x40012c00

08007b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b5c:	bf00      	nop
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b66:	b480      	push	{r7}
 8007b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b6a:	e7fe      	b.n	8007b6a <HardFault_Handler+0x4>

08007b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b70:	e7fe      	b.n	8007b70 <MemManage_Handler+0x4>

08007b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b72:	b480      	push	{r7}
 8007b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b76:	e7fe      	b.n	8007b76 <BusFault_Handler+0x4>

08007b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b7c:	e7fe      	b.n	8007b7c <UsageFault_Handler+0x4>

08007b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b82:	bf00      	nop
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0

	//Debugging ----------------------
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	//--------------------------------
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007b90:	2001      	movs	r0, #1
 8007b92:	f7f8 ffad 	bl	8000af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007b96:	bf00      	nop
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ba0:	4803      	ldr	r0, [pc, #12]	; (8007bb0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8007ba2:	f7fa fe4b 	bl	800283c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8007ba6:	4803      	ldr	r0, [pc, #12]	; (8007bb4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8007ba8:	f7fa fe48 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007bac:	bf00      	nop
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200038b8 	.word	0x200038b8
 8007bb4:	200038f8 	.word	0x200038f8

08007bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007bbc:	4802      	ldr	r0, [pc, #8]	; (8007bc8 <USART1_IRQHandler+0x10>)
 8007bbe:	f7fb f90d 	bl	8002ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20003938 	.word	0x20003938

08007bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8007bd0:	4b26      	ldr	r3, [pc, #152]	; (8007c6c <SystemInit+0xa0>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8007bd6:	4a25      	ldr	r2, [pc, #148]	; (8007c6c <SystemInit+0xa0>)
 8007bd8:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <SystemInit+0xa0>)
 8007bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007be2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007bfe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <SystemInit+0xa4>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c1c:	f023 0305 	bic.w	r3, r3, #5
 8007c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c3c:	4a0d      	ldr	r2, [pc, #52]	; (8007c74 <SystemInit+0xa8>)
 8007c3e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c44:	4a0b      	ldr	r2, [pc, #44]	; (8007c74 <SystemInit+0xa8>)
 8007c46:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	619a      	str	r2, [r3, #24]
}
 8007c60:	bf00      	nop
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	e000ed00 	.word	0xe000ed00
 8007c70:	faf6fefb 	.word	0xfaf6fefb
 8007c74:	22041000 	.word	0x22041000

08007c78 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8007c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	4a47      	ldr	r2, [pc, #284]	; (8007da8 <SystemCoreClockUpdate+0x130>)
 8007c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f003 030c 	and.w	r3, r3, #12
 8007c9c:	2b0c      	cmp	r3, #12
 8007c9e:	d867      	bhi.n	8007d70 <SystemCoreClockUpdate+0xf8>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <SystemCoreClockUpdate+0x30>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007cdd 	.word	0x08007cdd
 8007cac:	08007d71 	.word	0x08007d71
 8007cb0:	08007d71 	.word	0x08007d71
 8007cb4:	08007d71 	.word	0x08007d71
 8007cb8:	08007ce5 	.word	0x08007ce5
 8007cbc:	08007d71 	.word	0x08007d71
 8007cc0:	08007d71 	.word	0x08007d71
 8007cc4:	08007d71 	.word	0x08007d71
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007d71 	.word	0x08007d71
 8007cd0:	08007d71 	.word	0x08007d71
 8007cd4:	08007d71 	.word	0x08007d71
 8007cd8:	08007cf5 	.word	0x08007cf5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8007cdc:	4a33      	ldr	r2, [pc, #204]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6013      	str	r3, [r2, #0]
      break;
 8007ce2:	e049      	b.n	8007d78 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8007ce4:	4b31      	ldr	r3, [pc, #196]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007ce6:	4a32      	ldr	r2, [pc, #200]	; (8007db0 <SystemCoreClockUpdate+0x138>)
 8007ce8:	601a      	str	r2, [r3, #0]
      break;
 8007cea:	e045      	b.n	8007d78 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8007cec:	4b2f      	ldr	r3, [pc, #188]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007cee:	4a31      	ldr	r2, [pc, #196]	; (8007db4 <SystemCoreClockUpdate+0x13c>)
 8007cf0:	601a      	str	r2, [r3, #0]
      break;
 8007cf2:	e041      	b.n	8007d78 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8007d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d105      	bne.n	8007d22 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8007d16:	4a26      	ldr	r2, [pc, #152]	; (8007db0 <SystemCoreClockUpdate+0x138>)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e00d      	b.n	8007d3e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d105      	bne.n	8007d34 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8007d28:	4a22      	ldr	r2, [pc, #136]	; (8007db4 <SystemCoreClockUpdate+0x13c>)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e004      	b.n	8007d3e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8007d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	0f5b      	lsrs	r3, r3, #29
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	3301      	adds	r3, #1
 8007d60:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6a:	4a10      	ldr	r2, [pc, #64]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007d6c:	6013      	str	r3, [r2, #0]
      break;
 8007d6e:	e003      	b.n	8007d78 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8007d70:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6013      	str	r3, [r2, #0]
      break;
 8007d76:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	091b      	lsrs	r3, r3, #4
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	4a0c      	ldr	r2, [pc, #48]	; (8007db8 <SystemCoreClockUpdate+0x140>)
 8007d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d96:	4a05      	ldr	r2, [pc, #20]	; (8007dac <SystemCoreClockUpdate+0x134>)
 8007d98:	6013      	str	r3, [r2, #0]

}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	080081c4 	.word	0x080081c4
 8007dac:	20000010 	.word	0x20000010
 8007db0:	00f42400 	.word	0x00f42400
 8007db4:	01e84800 	.word	0x01e84800
 8007db8:	08008164 	.word	0x08008164

08007dbc <LL_APB2_GRP1_EnableClock>:
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007de0:	68fb      	ldr	r3, [r7, #12]
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007df6:	4a10      	ldr	r2, [pc, #64]	; (8007e38 <MX_TIM16_Init+0x48>)
 8007df8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007dfc:	221f      	movs	r2, #31
 8007dfe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007e06:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e0c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007e14:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007e20:	4804      	ldr	r0, [pc, #16]	; (8007e34 <MX_TIM16_Init+0x44>)
 8007e22:	f7fa fc8c 	bl	800273e <HAL_TIM_Base_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8007e2c:	f7ff fe1e 	bl	8007a6c <Error_Handler>
  }

}
 8007e30:	bf00      	nop
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	200038f8 	.word	0x200038f8
 8007e38:	40014400 	.word	0x40014400

08007e3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <HAL_TIM_Base_MspInit+0x34>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d10b      	bne.n	8007e66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007e4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007e52:	f7ff ffb3 	bl	8007dbc <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	2019      	movs	r0, #25
 8007e5c:	f7f8 fc20 	bl	80006a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007e60:	2019      	movs	r0, #25
 8007e62:	f7f8 fc37 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007e66:	bf00      	nop
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40014400 	.word	0x40014400

08007e74 <LL_AHB2_GRP1_EnableClock>:
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4013      	ands	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e98:	68fb      	ldr	r3, [r7, #12]
}
 8007e9a:	bf00      	nop
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <LL_APB2_GRP1_EnableClock>:
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007eca:	68fb      	ldr	r3, [r7, #12]
}
 8007ecc:	bf00      	nop
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007edc:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007ede:	4a23      	ldr	r2, [pc, #140]	; (8007f6c <MX_USART1_UART_Init+0x94>)
 8007ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007ee2:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007ee4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007eea:	4b1f      	ldr	r3, [pc, #124]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007ef0:	4b1d      	ldr	r3, [pc, #116]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8007efc:	4b1a      	ldr	r3, [pc, #104]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007efe:	2208      	movs	r2, #8
 8007f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f02:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f14:	4b14      	ldr	r3, [pc, #80]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f20:	4811      	ldr	r0, [pc, #68]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f22:	f7fa fe75 	bl	8002c10 <HAL_UART_Init>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007f2c:	f7ff fd9e 	bl	8007a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f30:	2100      	movs	r1, #0
 8007f32:	480d      	ldr	r0, [pc, #52]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f34:	f7fc fb4c 	bl	80045d0 <HAL_UARTEx_SetTxFifoThreshold>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007f3e:	f7ff fd95 	bl	8007a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f42:	2100      	movs	r1, #0
 8007f44:	4808      	ldr	r0, [pc, #32]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f46:	f7fc fb81 	bl	800464c <HAL_UARTEx_SetRxFifoThreshold>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007f50:	f7ff fd8c 	bl	8007a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007f54:	4804      	ldr	r0, [pc, #16]	; (8007f68 <MX_USART1_UART_Init+0x90>)
 8007f56:	f7fc fb02 	bl	800455e <HAL_UARTEx_DisableFifoMode>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007f60:	f7ff fd84 	bl	8007a6c <Error_Handler>
  }

}
 8007f64:	bf00      	nop
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20003938 	.word	0x20003938
 8007f6c:	40013800 	.word	0x40013800

08007f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f78:	f107 030c 	add.w	r3, r7, #12
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	609a      	str	r2, [r3, #8]
 8007f84:	60da      	str	r2, [r3, #12]
 8007f86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <HAL_UART_MspInit+0x94>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d133      	bne.n	8007ffa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007f92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007f96:	f7ff ff86 	bl	8007ea6 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	f7ff ff6a 	bl	8007e74 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fa0:	2002      	movs	r0, #2
 8007fa2:	f7ff ff67 	bl	8007e74 <LL_AHB2_GRP1_EnableClock>
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fac:	2302      	movs	r3, #2
 8007fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007fb8:	2307      	movs	r3, #7
 8007fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007fc6:	f7f8 fbf3 	bl	80007b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007fca:	23c0      	movs	r3, #192	; 0xc0
 8007fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007fda:	2307      	movs	r3, #7
 8007fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4808      	ldr	r0, [pc, #32]	; (8008008 <HAL_UART_MspInit+0x98>)
 8007fe6:	f7f8 fbe3 	bl	80007b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007fea:	2200      	movs	r2, #0
 8007fec:	2105      	movs	r1, #5
 8007fee:	2024      	movs	r0, #36	; 0x24
 8007ff0:	f7f8 fb56 	bl	80006a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007ff4:	2024      	movs	r0, #36	; 0x24
 8007ff6:	f7f8 fb6d 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	3720      	adds	r7, #32
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40013800 	.word	0x40013800
 8008008:	48000400 	.word	0x48000400

0800800c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800800c:	480d      	ldr	r0, [pc, #52]	; (8008044 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800800e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008010:	480d      	ldr	r0, [pc, #52]	; (8008048 <LoopForever+0x6>)
  ldr r1, =_edata
 8008012:	490e      	ldr	r1, [pc, #56]	; (800804c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008014:	4a0e      	ldr	r2, [pc, #56]	; (8008050 <LoopForever+0xe>)
  movs r3, #0
 8008016:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008018:	e002      	b.n	8008020 <LoopCopyDataInit>

0800801a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800801a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800801c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800801e:	3304      	adds	r3, #4

08008020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008024:	d3f9      	bcc.n	800801a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008026:	4a0b      	ldr	r2, [pc, #44]	; (8008054 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008028:	4c0b      	ldr	r4, [pc, #44]	; (8008058 <LoopForever+0x16>)
  movs r3, #0
 800802a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800802c:	e001      	b.n	8008032 <LoopFillZerobss>

0800802e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800802e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008030:	3204      	adds	r2, #4

08008032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008034:	d3fb      	bcc.n	800802e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008036:	f7ff fdc9 	bl	8007bcc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800803a:	f000 f811 	bl	8008060 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800803e:	f7ff fc29 	bl	8007894 <main>

08008042 <LoopForever>:

LoopForever:
  b LoopForever
 8008042:	e7fe      	b.n	8008042 <LoopForever>
  ldr   r0, =_estack
 8008044:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8008048:	20000004 	.word	0x20000004
  ldr r1, =_edata
 800804c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8008050:	08008214 	.word	0x08008214
  ldr r2, =_sbss
 8008054:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8008058:	200039c4 	.word	0x200039c4

0800805c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800805c:	e7fe      	b.n	800805c <ADC1_IRQHandler>
	...

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4e0d      	ldr	r6, [pc, #52]	; (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	; (800809c <__libc_init_array+0x3c>)
 8008066:	1ba4      	subs	r4, r4, r6
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2500      	movs	r5, #0
 800806c:	42a5      	cmp	r5, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4e0b      	ldr	r6, [pc, #44]	; (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	; (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 f82c 	bl	80080d0 <_init>
 8008078:	1ba4      	subs	r4, r4, r6
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2500      	movs	r5, #0
 800807e:	42a5      	cmp	r5, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008088:	4798      	blx	r3
 800808a:	3501      	adds	r5, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008092:	4798      	blx	r3
 8008094:	3501      	adds	r5, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	0800820c 	.word	0x0800820c
 800809c:	0800820c 	.word	0x0800820c
 80080a0:	0800820c 	.word	0x0800820c
 80080a4:	08008210 	.word	0x08008210

080080a8 <memcpy>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	1e43      	subs	r3, r0, #1
 80080ac:	440a      	add	r2, r1
 80080ae:	4291      	cmp	r1, r2
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xc>
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080bc:	e7f7      	b.n	80080ae <memcpy+0x6>

080080be <memset>:
 80080be:	4402      	add	r2, r0
 80080c0:	4603      	mov	r3, r0
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d100      	bne.n	80080c8 <memset+0xa>
 80080c6:	4770      	bx	lr
 80080c8:	f803 1b01 	strb.w	r1, [r3], #1
 80080cc:	e7f9      	b.n	80080c2 <memset+0x4>
	...

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
