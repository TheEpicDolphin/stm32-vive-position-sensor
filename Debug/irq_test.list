
irq_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000004  08007e10  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000051c  20000078  08007e84  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000594  08007e84  00020594  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020d1e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000445b  00000000  00000000  00040dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000019e0  00000000  00000000  00045228  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017b8  00000000  00000000  00046c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bbb9  00000000  00000000  000483c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007619  00000000  00000000  00053f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b592  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006bb0  00000000  00000000  0005b610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080073d0 	.word	0x080073d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080073d0 	.word	0x080073d0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__aeabi_d2f>:
 8000924:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000928:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800092c:	bf24      	itt	cs
 800092e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000932:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000936:	d90d      	bls.n	8000954 <__aeabi_d2f+0x30>
 8000938:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800093c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000940:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000944:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000948:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800094c:	bf08      	it	eq
 800094e:	f020 0001 	biceq.w	r0, r0, #1
 8000952:	4770      	bx	lr
 8000954:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000958:	d121      	bne.n	800099e <__aeabi_d2f+0x7a>
 800095a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800095e:	bfbc      	itt	lt
 8000960:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000964:	4770      	bxlt	lr
 8000966:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800096e:	f1c2 0218 	rsb	r2, r2, #24
 8000972:	f1c2 0c20 	rsb	ip, r2, #32
 8000976:	fa10 f30c 	lsls.w	r3, r0, ip
 800097a:	fa20 f002 	lsr.w	r0, r0, r2
 800097e:	bf18      	it	ne
 8000980:	f040 0001 	orrne.w	r0, r0, #1
 8000984:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000988:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800098c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000990:	ea40 000c 	orr.w	r0, r0, ip
 8000994:	fa23 f302 	lsr.w	r3, r3, r2
 8000998:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800099c:	e7cc      	b.n	8000938 <__aeabi_d2f+0x14>
 800099e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a2:	d107      	bne.n	80009b4 <__aeabi_d2f+0x90>
 80009a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a8:	bf1e      	ittt	ne
 80009aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009b2:	4770      	bxne	lr
 80009b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b97a 	b.w	8000cd0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	468c      	mov	ip, r1
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	9e08      	ldr	r6, [sp, #32]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d151      	bne.n	8000aa8 <__udivmoddi4+0xb4>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d96d      	bls.n	8000ae6 <__udivmoddi4+0xf2>
 8000a0a:	fab2 fe82 	clz	lr, r2
 8000a0e:	f1be 0f00 	cmp.w	lr, #0
 8000a12:	d00b      	beq.n	8000a2c <__udivmoddi4+0x38>
 8000a14:	f1ce 0c20 	rsb	ip, lr, #32
 8000a18:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a1c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a20:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a24:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a28:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a2c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a30:	0c25      	lsrs	r5, r4, #16
 8000a32:	fbbc f8fa 	udiv	r8, ip, sl
 8000a36:	fa1f f987 	uxth.w	r9, r7
 8000a3a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a3e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a42:	fb08 f309 	mul.w	r3, r8, r9
 8000a46:	42ab      	cmp	r3, r5
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x6c>
 8000a4a:	19ed      	adds	r5, r5, r7
 8000a4c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a50:	f080 8123 	bcs.w	8000c9a <__udivmoddi4+0x2a6>
 8000a54:	42ab      	cmp	r3, r5
 8000a56:	f240 8120 	bls.w	8000c9a <__udivmoddi4+0x2a6>
 8000a5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5e:	443d      	add	r5, r7
 8000a60:	1aed      	subs	r5, r5, r3
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a68:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a70:	fb00 f909 	mul.w	r9, r0, r9
 8000a74:	45a1      	cmp	r9, r4
 8000a76:	d909      	bls.n	8000a8c <__udivmoddi4+0x98>
 8000a78:	19e4      	adds	r4, r4, r7
 8000a7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a7e:	f080 810a 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000a82:	45a1      	cmp	r9, r4
 8000a84:	f240 8107 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	443c      	add	r4, r7
 8000a8c:	eba4 0409 	sub.w	r4, r4, r9
 8000a90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a94:	2100      	movs	r1, #0
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d061      	beq.n	8000b5e <__udivmoddi4+0x16a>
 8000a9a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	6034      	str	r4, [r6, #0]
 8000aa2:	6073      	str	r3, [r6, #4]
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d907      	bls.n	8000abc <__udivmoddi4+0xc8>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d054      	beq.n	8000b5a <__udivmoddi4+0x166>
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	fab3 f183 	clz	r1, r3
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	f040 808e 	bne.w	8000be2 <__udivmoddi4+0x1ee>
 8000ac6:	42ab      	cmp	r3, r5
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xdc>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80fa 	bhi.w	8000cc4 <__udivmoddi4+0x2d0>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb65 0503 	sbc.w	r5, r5, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	46ac      	mov	ip, r5
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d03f      	beq.n	8000b5e <__udivmoddi4+0x16a>
 8000ade:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	b912      	cbnz	r2, 8000aee <__udivmoddi4+0xfa>
 8000ae8:	2701      	movs	r7, #1
 8000aea:	fbb7 f7f2 	udiv	r7, r7, r2
 8000aee:	fab7 fe87 	clz	lr, r7
 8000af2:	f1be 0f00 	cmp.w	lr, #0
 8000af6:	d134      	bne.n	8000b62 <__udivmoddi4+0x16e>
 8000af8:	1beb      	subs	r3, r5, r7
 8000afa:	0c3a      	lsrs	r2, r7, #16
 8000afc:	fa1f fc87 	uxth.w	ip, r7
 8000b00:	2101      	movs	r1, #1
 8000b02:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b06:	0c25      	lsrs	r5, r4, #16
 8000b08:	fb02 3318 	mls	r3, r2, r8, r3
 8000b0c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b10:	fb0c f308 	mul.w	r3, ip, r8
 8000b14:	42ab      	cmp	r3, r5
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x134>
 8000b18:	19ed      	adds	r5, r5, r7
 8000b1a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x132>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	f200 80d1 	bhi.w	8000cc8 <__udivmoddi4+0x2d4>
 8000b26:	4680      	mov	r8, r0
 8000b28:	1aed      	subs	r5, r5, r3
 8000b2a:	b2a3      	uxth	r3, r4
 8000b2c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b30:	fb02 5510 	mls	r5, r2, r0, r5
 8000b34:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b38:	fb0c fc00 	mul.w	ip, ip, r0
 8000b3c:	45a4      	cmp	ip, r4
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x15c>
 8000b40:	19e4      	adds	r4, r4, r7
 8000b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x15a>
 8000b48:	45a4      	cmp	ip, r4
 8000b4a:	f200 80b8 	bhi.w	8000cbe <__udivmoddi4+0x2ca>
 8000b4e:	4618      	mov	r0, r3
 8000b50:	eba4 040c 	sub.w	r4, r4, ip
 8000b54:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b58:	e79d      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000b5a:	4631      	mov	r1, r6
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	f1ce 0420 	rsb	r4, lr, #32
 8000b66:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b6a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b6e:	fa20 f804 	lsr.w	r8, r0, r4
 8000b72:	0c3a      	lsrs	r2, r7, #16
 8000b74:	fa25 f404 	lsr.w	r4, r5, r4
 8000b78:	ea48 0803 	orr.w	r8, r8, r3
 8000b7c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b80:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b84:	fb02 4411 	mls	r4, r2, r1, r4
 8000b88:	fa1f fc87 	uxth.w	ip, r7
 8000b8c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b90:	fb01 f30c 	mul.w	r3, r1, ip
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x1bc>
 8000b9c:	19ed      	adds	r5, r5, r7
 8000b9e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ba2:	f080 808a 	bcs.w	8000cba <__udivmoddi4+0x2c6>
 8000ba6:	42ab      	cmp	r3, r5
 8000ba8:	f240 8087 	bls.w	8000cba <__udivmoddi4+0x2c6>
 8000bac:	3902      	subs	r1, #2
 8000bae:	443d      	add	r5, r7
 8000bb0:	1aeb      	subs	r3, r5, r3
 8000bb2:	fa1f f588 	uxth.w	r5, r8
 8000bb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bba:	fb02 3310 	mls	r3, r2, r0, r3
 8000bbe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bc2:	fb00 f30c 	mul.w	r3, r0, ip
 8000bc6:	42ab      	cmp	r3, r5
 8000bc8:	d907      	bls.n	8000bda <__udivmoddi4+0x1e6>
 8000bca:	19ed      	adds	r5, r5, r7
 8000bcc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bd0:	d26f      	bcs.n	8000cb2 <__udivmoddi4+0x2be>
 8000bd2:	42ab      	cmp	r3, r5
 8000bd4:	d96d      	bls.n	8000cb2 <__udivmoddi4+0x2be>
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	443d      	add	r5, r7
 8000bda:	1aeb      	subs	r3, r5, r3
 8000bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be0:	e78f      	b.n	8000b02 <__udivmoddi4+0x10e>
 8000be2:	f1c1 0720 	rsb	r7, r1, #32
 8000be6:	fa22 f807 	lsr.w	r8, r2, r7
 8000bea:	408b      	lsls	r3, r1
 8000bec:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf0:	ea48 0303 	orr.w	r3, r8, r3
 8000bf4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bf8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bfc:	40fd      	lsrs	r5, r7
 8000bfe:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c02:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c06:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c0a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c0e:	fa1f f883 	uxth.w	r8, r3
 8000c12:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c16:	fb09 f408 	mul.w	r4, r9, r8
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c20:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x244>
 8000c26:	18ed      	adds	r5, r5, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	d243      	bcs.n	8000cb6 <__udivmoddi4+0x2c2>
 8000c2e:	42ac      	cmp	r4, r5
 8000c30:	d941      	bls.n	8000cb6 <__udivmoddi4+0x2c2>
 8000c32:	f1a9 0902 	sub.w	r9, r9, #2
 8000c36:	441d      	add	r5, r3
 8000c38:	1b2d      	subs	r5, r5, r4
 8000c3a:	fa1f fe8e 	uxth.w	lr, lr
 8000c3e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c42:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c46:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c4a:	fb00 f808 	mul.w	r8, r0, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x26e>
 8000c52:	18e4      	adds	r4, r4, r3
 8000c54:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c58:	d229      	bcs.n	8000cae <__udivmoddi4+0x2ba>
 8000c5a:	45a0      	cmp	r8, r4
 8000c5c:	d927      	bls.n	8000cae <__udivmoddi4+0x2ba>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	441c      	add	r4, r3
 8000c62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c66:	eba4 0408 	sub.w	r4, r4, r8
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	454c      	cmp	r4, r9
 8000c70:	46c6      	mov	lr, r8
 8000c72:	464d      	mov	r5, r9
 8000c74:	d315      	bcc.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c76:	d012      	beq.n	8000c9e <__udivmoddi4+0x2aa>
 8000c78:	b156      	cbz	r6, 8000c90 <__udivmoddi4+0x29c>
 8000c7a:	ebba 030e 	subs.w	r3, sl, lr
 8000c7e:	eb64 0405 	sbc.w	r4, r4, r5
 8000c82:	fa04 f707 	lsl.w	r7, r4, r7
 8000c86:	40cb      	lsrs	r3, r1
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	40cc      	lsrs	r4, r1
 8000c8c:	6037      	str	r7, [r6, #0]
 8000c8e:	6074      	str	r4, [r6, #4]
 8000c90:	2100      	movs	r1, #0
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	4618      	mov	r0, r3
 8000c98:	e6f8      	b.n	8000a8c <__udivmoddi4+0x98>
 8000c9a:	4690      	mov	r8, r2
 8000c9c:	e6e0      	b.n	8000a60 <__udivmoddi4+0x6c>
 8000c9e:	45c2      	cmp	sl, r8
 8000ca0:	d2ea      	bcs.n	8000c78 <__udivmoddi4+0x284>
 8000ca2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca6:	eb69 0503 	sbc.w	r5, r9, r3
 8000caa:	3801      	subs	r0, #1
 8000cac:	e7e4      	b.n	8000c78 <__udivmoddi4+0x284>
 8000cae:	4628      	mov	r0, r5
 8000cb0:	e7d7      	b.n	8000c62 <__udivmoddi4+0x26e>
 8000cb2:	4640      	mov	r0, r8
 8000cb4:	e791      	b.n	8000bda <__udivmoddi4+0x1e6>
 8000cb6:	4681      	mov	r9, r0
 8000cb8:	e7be      	b.n	8000c38 <__udivmoddi4+0x244>
 8000cba:	4601      	mov	r1, r0
 8000cbc:	e778      	b.n	8000bb0 <__udivmoddi4+0x1bc>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	e745      	b.n	8000b50 <__udivmoddi4+0x15c>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e708      	b.n	8000ada <__udivmoddi4+0xe6>
 8000cc8:	f1a8 0802 	sub.w	r8, r8, #2
 8000ccc:	443d      	add	r5, r7
 8000cce:	e72b      	b.n	8000b28 <__udivmoddi4+0x134>

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <arm_add_f32>:
void arm_add_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08f      	sub	sp, #60	; 0x3c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variabels */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000ce8:	e04a      	b.n	8000d80 <arm_add_f32+0xac>
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */

    /* read four inputs from sourceA and four inputs from sourceB */
    inA1 = *pSrcA;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
    inB1 = *pSrcB;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    inA2 = *(pSrcA + 1);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    inB2 = *(pSrcB + 1);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    inA3 = *(pSrcA + 2);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	623b      	str	r3, [r7, #32]
    inB3 = *(pSrcB + 2);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	61fb      	str	r3, [r7, #28]
    inA4 = *(pSrcA + 3);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	61bb      	str	r3, [r7, #24]
    inB4 = *(pSrcB + 3);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	617b      	str	r3, [r7, #20]

    /* C = A + B */
    /* add and store result to destination */
    *pDst = inA1 + inB1;
 8000d1a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d1e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 1) = inA2 + inB2;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3304      	adds	r3, #4
 8000d30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 2) = inA3 + inB3;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3308      	adds	r3, #8
 8000d44:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d50:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 3) = inA4 + inB4;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	330c      	adds	r3, #12
 8000d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d64:	edc3 7a00 	vstr	s15, [r3]

    /* update pointers to process next samples */
    pSrcA += 4U;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3310      	adds	r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3310      	adds	r3, #16
 8000d72:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3310      	adds	r3, #16
 8000d78:	607b      	str	r3, [r7, #4]


    /* Decrement the loop counter */
    blkCnt--;
 8000d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8000d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1b1      	bne.n	8000cea <arm_add_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000d8e:	e013      	b.n	8000db8 <arm_add_f32+0xe4>
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	1d1a      	adds	r2, r3, #4
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	1d11      	adds	r1, r2, #4
 8000d9a:	60f9      	str	r1, [r7, #12]
 8000d9c:	ed92 7a00 	vldr	s14, [r2]
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	1d11      	adds	r1, r2, #4
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	edd2 7a00 	vldr	s15, [r2]
 8000daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dae:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	3b01      	subs	r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1e8      	bne.n	8000d90 <arm_add_f32+0xbc>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	373c      	adds	r7, #60	; 0x3c
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000de4:	e04a      	b.n	8000e7c <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1d1a      	adds	r2, r3, #4
 8000dea:	60fa      	str	r2, [r7, #12]
 8000dec:	ed93 7a00 	vldr	s14, [r3]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1d1a      	adds	r2, r3, #4
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e06:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1d1a      	adds	r2, r3, #4
 8000e0e:	60fa      	str	r2, [r7, #12]
 8000e10:	ed93 7a00 	vldr	s14, [r3]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e22:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	1d1a      	adds	r2, r3, #4
 8000e32:	60fa      	str	r2, [r7, #12]
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1d1a      	adds	r2, r3, #4
 8000e3c:	60ba      	str	r2, [r7, #8]
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e4e:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1d1a      	adds	r2, r3, #4
 8000e56:	60fa      	str	r2, [r7, #12]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1d1a      	adds	r2, r3, #4
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e72:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1b1      	bne.n	8000de6 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8000e8a:	e014      	b.n	8000eb6 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	60fa      	str	r2, [r7, #12]
 8000e92:	ed93 7a00 	vldr	s14, [r3]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1d1a      	adds	r2, r3, #4
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	edd3 7a00 	vldr	s15, [r3]
 8000ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e7      	bne.n	8000e8c <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	371c      	adds	r7, #28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <arm_scale_f32>:
void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b08b      	sub	sp, #44	; 0x2c
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eda:	6079      	str	r1, [r7, #4]
 8000edc:	603a      	str	r2, [r7, #0]

/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variabels */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000ee4:	e043      	b.n	8000f6e <arm_scale_f32+0xa0>
  {
    /* C = A * scale */
    /* Scale the input and then store the results in the destination buffer. */
    /* read input samples from source */
    in1 = *pSrc;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	61fb      	str	r3, [r7, #28]

    /* multiply with scaling factor */
    in1 = in1 * scale;
 8000ef2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efe:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read input sample from source */
    in3 = *(pSrc + 2);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]

    /* multiply with scaling factor */
    in2 = in2 * scale;
 8000f08:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f14:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read input sample from source */
    in4 = *(pSrc + 3);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	617b      	str	r3, [r7, #20]

    /* multiply with scaling factor */
    in3 = in3 * scale;
 8000f1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc7 7a06 	vstr	s15, [r7, #24]
    in4 = in4 * scale;
 8000f2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store the result to destination */
    *pDst = in1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a3a      	ldr	r2, [r7, #32]
 8000f42:	601a      	str	r2, [r3, #0]
    *(pDst + 1) = in2;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3304      	adds	r3, #4
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	601a      	str	r2, [r3, #0]
    *(pDst + 2) = in3;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3308      	adds	r3, #8
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	601a      	str	r2, [r3, #0]
    *(pDst + 3) = in4;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	330c      	adds	r3, #12
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	601a      	str	r2, [r3, #0]

    /* update pointers to process next samples */
    pSrc += 4U;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3310      	adds	r3, #16
 8000f60:	60fb      	str	r3, [r7, #12]
    pDst += 4U;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3310      	adds	r3, #16
 8000f66:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1b8      	bne.n	8000ee6 <arm_scale_f32+0x18>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8000f7c:	e010      	b.n	8000fa0 <arm_scale_f32+0xd2>
  {
    /* C = A * scale */
    /* Scale the input and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) * scale;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	1d1a      	adds	r2, r3, #4
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	1d11      	adds	r1, r2, #4
 8000f88:	60f9      	str	r1, [r7, #12]
 8000f8a:	ed92 7a00 	vldr	s14, [r2]
 8000f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1eb      	bne.n	8000f7e <arm_scale_f32+0xb0>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	372c      	adds	r7, #44	; 0x2c
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <arm_sub_f32>:
void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b08f      	sub	sp, #60	; 0x3c
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	603b      	str	r3, [r7, #0]
/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inA1, inA2, inA3, inA4;              /* temporary variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000fc6:	e04a      	b.n	800105e <arm_sub_f32+0xac>
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    /* Read 4 input samples from sourceA and sourceB */
    inA1 = *pSrcA;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    inB1 = *pSrcB;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    inA2 = *(pSrcA + 1);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    inB2 = *(pSrcB + 1);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    inA3 = *(pSrcA + 2);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	623b      	str	r3, [r7, #32]
    inB3 = *(pSrcB + 2);
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61fb      	str	r3, [r7, #28]
    inA4 = *(pSrcA + 3);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
    inB4 = *(pSrcB + 3);
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	617b      	str	r3, [r7, #20]

    /* dst = srcA - srcB */
    /* subtract and store the result */
    *pDst = inA1 - inB1;
 8000ff8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000ffc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 1) = inA2 - inB2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101a:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 2) = inA3 - inB3;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3308      	adds	r3, #8
 8001022:	ed97 7a08 	vldr	s14, [r7, #32]
 8001026:	edd7 7a07 	vldr	s15, [r7, #28]
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 3) = inA4 - inB4;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	330c      	adds	r3, #12
 8001036:	ed97 7a06 	vldr	s14, [r7, #24]
 800103a:	edd7 7a05 	vldr	s15, [r7, #20]
 800103e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001042:	edc3 7a00 	vstr	s15, [r3]


    /* Update pointers to process next sampels */
    pSrcA += 4U;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3310      	adds	r3, #16
 800104a:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3310      	adds	r3, #16
 8001050:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3310      	adds	r3, #16
 8001056:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	3b01      	subs	r3, #1
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1b1      	bne.n	8000fc8 <arm_sub_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800106c:	e013      	b.n	8001096 <arm_sub_f32+0xe4>
  {
    /* C = A - B */
    /* Subtract and then store the results in the destination buffer. */
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1d1a      	adds	r2, r3, #4
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	1d11      	adds	r1, r2, #4
 8001078:	60f9      	str	r1, [r7, #12]
 800107a:	ed92 7a00 	vldr	s14, [r2]
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	1d11      	adds	r1, r2, #4
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	edd2 7a00 	vldr	s15, [r2]
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	3b01      	subs	r3, #1
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8001096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e8      	bne.n	800106e <arm_sub_f32+0xbc>
  }
}
 800109c:	bf00      	nop
 800109e:	373c      	adds	r7, #60	; 0x3c
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80010b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001194 <arm_cos_f32+0xec>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80010c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c6:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80010ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 3a90 	vmov	r3, s15
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80010d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d502      	bpl.n	80010ec <arm_cos_f32+0x44>
  {
    n--;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3b01      	subs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8001102:	edd7 7a08 	vldr	s15, [r7, #32]
 8001106:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001198 <arm_cos_f32+0xf0>
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8001112:	edd7 7a07 	vldr	s15, [r7, #28]
 8001116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111a:	edc7 7a00 	vstr	s15, [r7]
 800111e:	883b      	ldrh	r3, [r7, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001126:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8001128:	8b7b      	ldrh	r3, [r7, #26]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001132:	ed97 7a07 	vldr	s14, [r7, #28]
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800113e:	8b7b      	ldrh	r3, [r7, #26]
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <arm_cos_f32+0xf4>)
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800114a:	8b7b      	ldrh	r3, [r7, #26]
 800114c:	3301      	adds	r3, #1
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <arm_cos_f32+0xf4>)
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8001158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800115c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001160:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001164:	edd7 7a04 	vldr	s15, [r7, #16]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001170:	edd7 7a03 	vldr	s15, [r7, #12]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	ee07 3a90 	vmov	s15, r3
}
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	372c      	adds	r7, #44	; 0x2c
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	3e22f983 	.word	0x3e22f983
 8001198:	44000000 	.word	0x44000000
 800119c:	0800754c 	.word	0x0800754c

080011a0 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	d50a      	bpl.n	80011ce <arm_sin_f32+0x2e>
 80011b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011bc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80012a8 <arm_sin_f32+0x108>
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	db01      	blt.n	80011ce <arm_sin_f32+0x2e>
     return x;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e063      	b.n	8001296 <arm_sin_f32+0xf6>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012ac <arm_sin_f32+0x10c>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80011de:	edd7 7a08 	vldr	s15, [r7, #32]
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 80011ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d502      	bpl.n	8001200 <arm_sin_f32+0x60>
  {
    n--;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	3b01      	subs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	ed97 7a08 	vldr	s14, [r7, #32]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8001216:	edd7 7a08 	vldr	s15, [r7, #32]
 800121a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80012b0 <arm_sin_f32+0x110>
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8001226:	edd7 7a07 	vldr	s15, [r7, #28]
 800122a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122e:	edc7 7a00 	vstr	s15, [r7]
 8001232:	883b      	ldrh	r3, [r7, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800123a:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800123c:	8b7b      	ldrh	r3, [r7, #26]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001246:	ed97 7a07 	vldr	s14, [r7, #28]
 800124a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8001252:	8b7b      	ldrh	r3, [r7, #26]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <arm_sin_f32+0x114>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800125e:	8b7b      	ldrh	r3, [r7, #26]
 8001260:	3301      	adds	r3, #1
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <arm_sin_f32+0x114>)
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	edd7 7a05 	vldr	s15, [r7, #20]
 8001274:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001278:	edd7 7a04 	vldr	s15, [r7, #16]
 800127c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001280:	edd7 6a05 	vldr	s13, [r7, #20]
 8001284:	edd7 7a03 	vldr	s15, [r7, #12]
 8001288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001290:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	372c      	adds	r7, #44	; 0x2c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	b44c02cd 	.word	0xb44c02cd
 80012ac:	3e22f983 	.word	0x3e22f983
 80012b0:	44000000 	.word	0x44000000
 80012b4:	0800754c 	.word	0x0800754c

080012b8 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b095      	sub	sp, #84	; 0x54
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	885b      	ldrh	r3, [r3, #2]
 80012e6:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	885b      	ldrh	r3, [r3, #2]
 80012ec:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 80012ee:	2300      	movs	r3, #0
 80012f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80012f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 80012f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fc:	4413      	add	r3, r2
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8001300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001302:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8001314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8001318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 800131e:	e061      	b.n	80013e4 <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8001320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8001326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800132c:	4413      	add	r3, r2
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8001330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8001336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 800133c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001340:	edd7 7a08 	vldr	s15, [r7, #32]
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8001354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 800135a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001360:	4413      	add	r3, r2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8001364:	ed97 7a06 	vldr	s14, [r7, #24]
 8001368:	edd7 7a05 	vldr	s15, [r7, #20]
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 800137c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8001382:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001388:	4413      	add	r3, r2
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 800138c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8001392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8001398:	ed97 7a07 	vldr	s14, [r7, #28]
 800139c:	edd7 7a08 	vldr	s15, [r7, #32]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 80013b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 80013b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013bc:	4413      	add	r3, r2
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 80013c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80013c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 80013d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013da:	3310      	adds	r3, #16
 80013dc:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 80013de:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013e0:	3b01      	subs	r3, #1
 80013e2:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 80013e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d19a      	bne.n	8001320 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 80013ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 80013f2:	e017      	b.n	8001424 <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 80013f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f6:	1d1a      	adds	r2, r3, #4
 80013f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800140c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001410:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8001414:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800141a:	4413      	add	r3, r2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 800141e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001420:	3b01      	subs	r3, #1
 8001422:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8001424:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1e4      	bne.n	80013f4 <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 800142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142c:	1d1a      	adds	r2, r3, #4
 800142e:	643a      	str	r2, [r7, #64]	; 0x40
 8001430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001432:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8001434:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001436:	3301      	adds	r3, #1
 8001438:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8001446:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001448:	3b01      	subs	r3, #1
 800144a:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 800144c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800144e:	2b00      	cmp	r3, #0
 8001450:	f47f af5d 	bne.w	800130e <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8001454:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001458:	4413      	add	r3, r2
 800145a:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 800145c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001462:	4413      	add	r3, r2
 8001464:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8001466:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001468:	3b01      	subs	r3, #1
 800146a:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 800146c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af41 	bne.w	80012f6 <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8001474:	2300      	movs	r3, #0
 8001476:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8001478:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3754      	adds	r7, #84	; 0x54
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <arm_power_f32>:

void arm_power_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* accumulator */
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80014a0:	e046      	b.n	8001530 <arm_power_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute Power and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1d1a      	adds	r2, r3, #4
 80014a6:	60fa      	str	r2, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c0:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1d1a      	adds	r2, r3, #4
 80014c8:	60fa      	str	r2, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014da:	ed97 7a07 	vldr	s14, [r7, #28]
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1d1a      	adds	r2, r3, #4
 80014ea:	60fa      	str	r2, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1d1a      	adds	r2, r3, #4
 800150c:	60fa      	str	r2, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001512:	ed97 7a05 	vldr	s14, [r7, #20]
 8001516:	edd7 7a05 	vldr	s15, [r7, #20]
 800151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	3b01      	subs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1b5      	bne.n	80014a2 <arm_power_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800153e:	e013      	b.n	8001568 <arm_power_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* compute power and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1d1a      	adds	r2, r3, #4
 8001544:	60fa      	str	r2, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800154a:	ed97 7a05 	vldr	s14, [r7, #20]
 800154e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001556:	ed97 7a07 	vldr	s14, [r7, #28]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	3b01      	subs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1e8      	bne.n	8001540 <arm_power_f32+0xb8>
  }

  /* Store the result to the destination */
  *pResult = sum;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3724      	adds	r7, #36	; 0x24
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_Init+0x3c>)
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_Init+0x3c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001596:	2003      	movs	r0, #3
 8001598:	f000 f944 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f80f 	bl	80015c0 <HAL_InitTick>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	e001      	b.n	80015b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ae:	f005 f9cb 	bl	8006948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	58004000 	.word	0x58004000

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_InitTick+0x6c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80015d4:	f001 fc32 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 80015d8:	4601      	mov	r1, r0
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_InitTick+0x6c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f94d 	bl	800188a <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d809      	bhi.n	8001610 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f919 	bl	800183a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_InitTick+0x70>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e007      	b.n	8001620 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	e001      	b.n	8001620 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4413      	add	r3, r2
 8001642:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_IncTick+0x1c>)
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200000a0 	.word	0x200000a0
 8001654:	20000008 	.word	0x20000008

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200000a0 	.word	0x200000a0

08001670 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTickPrio+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000004 	.word	0x20000004

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	4909      	ldr	r1, [pc, #36]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	490d      	ldr	r1, [pc, #52]	; (8001774 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	4909      	ldr	r1, [pc, #36]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	2201      	movs	r2, #1
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	401a      	ands	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c2:	2101      	movs	r1, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	1e59      	subs	r1, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff90 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff2b 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff42 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff92 	bl	800177c <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff61 	bl	8001728 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff35 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa4 	bl	80017e0 <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e047      	b.n	8001956 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	f022 020e 	bic.w	r2, r2, #14
 80018d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018fe:	f002 021c 	and.w	r2, r2, #28
 8001902:	2101      	movs	r1, #1
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001912:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800192a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001934:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
    }
  }
  return status;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e14c      	b.n	8001c0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 813e 	beq.w	8001c04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x38>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b12      	cmp	r3, #18
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	6939      	ldr	r1, [r7, #16]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d00b      	beq.n	8001a34 <HAL_GPIO_Init+0xd4>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a28:	2b11      	cmp	r3, #17
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	d130      	bne.n	8001a96 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 0201 	and.w	r2, r3, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8098 	beq.w	8001c04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad4:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001afe:	d019      	beq.n	8001b34 <HAL_GPIO_Init+0x1d4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1d0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1cc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_Init+0x2d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1c8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a47      	ldr	r2, [pc, #284]	; (8001c38 <HAL_GPIO_Init+0x2d8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1c4>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e008      	b.n	8001b36 <HAL_GPIO_Init+0x1d6>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1d6>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1d6>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1d6>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1d6>
 8001b34:	2300      	movs	r3, #0
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b46:	4938      	ldr	r1, [pc, #224]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f aeab 	bne.w	8001970 <HAL_GPIO_Init+0x10>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	48000400 	.word	0x48000400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00
 8001c38:	48001000 	.word	0x48001000
 8001c3c:	58000800 	.word	0x58000800

08001c40 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c8c:	e002      	b.n	8001c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fa34 	bl	800612c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58000800 	.word	0x58000800

08001cd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd4:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	58000400 	.word	0x58000400

08001cf0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	58000400 	.word	0x58000400

08001d0c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d1e:	d101      	bne.n	8001d24 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dba:	d101      	bne.n	8001dc0 <LL_RCC_HSE_IsReady+0x18>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <LL_RCC_HSE_IsReady+0x1a>
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1a:	d101      	bne.n	8001e20 <LL_RCC_HSI_IsReady+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_RCC_HSI_IsReady+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d101      	bne.n	8001eb2 <LL_RCC_HSI48_IsReady+0x18>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <LL_RCC_HSI48_IsReady+0x1a>
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d101      	bne.n	8001f5e <LL_RCC_LSE_IsReady+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_RCC_LSE_IsReady+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d101      	bne.n	8001fc6 <LL_RCC_LSI1_IsReady+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_RCC_LSI1_IsReady+0x1a>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d101      	bne.n	800202e <LL_RCC_LSI2_IsReady+0x18>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <LL_RCC_LSI2_IsReady+0x1a>
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800206c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800208a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6013      	str	r3, [r2, #0]
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d101      	bne.n	80020ba <LL_RCC_MSI_IsReady+0x16>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_RCC_MSI_IsReady+0x18>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80020ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2bb0      	cmp	r3, #176	; 0xb0
 8002104:	d901      	bls.n	800210a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002106:	23b0      	movs	r3, #176	; 0xb0
 8002108:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800210a:	687b      	ldr	r3, [r7, #4]
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800214a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 0203 	bic.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800218a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021ea:	f023 020f 	bic.w	r2, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800220c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002274:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80022da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002306:	d101      	bne.n	800230c <LL_RCC_PLL_IsReady+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_RCC_PLL_IsReady+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d101      	bne.n	8002392 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023b2:	d101      	bne.n	80023b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d101      	bne.n	80023de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80023ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023fc:	d101      	bne.n	8002402 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002420:	d101      	bne.n	8002426 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b08b      	sub	sp, #44	; 0x2c
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e34b      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 808f 	beq.w	8002572 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002454:	f7ff fe89 	bl	800216a <LL_RCC_GetSysClkSource>
 8002458:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245a:	f7ff ff82 	bl	8002362 <LL_RCC_PLL_GetMainSource>
 800245e:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x3e>
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d149      	bne.n	8002500 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d146      	bne.n	8002500 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002472:	f7ff fe17 	bl	80020a4 <LL_RCC_MSI_IsReady>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_OscConfig+0x54>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e32a      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800248c:	f7ff fe2f 	bl	80020ee <LL_RCC_MSI_GetRange>
 8002490:	4603      	mov	r3, r0
 8002492:	429c      	cmp	r4, r3
 8002494:	d914      	bls.n	80024c0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fd0e 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e319      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fe09 	bl	80020c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fe2d 	bl	8002118 <LL_RCC_MSI_SetCalibTrimming>
 80024be:	e013      	b.n	80024e8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fdfe 	bl	80020c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fe22 	bl	8002118 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fcef 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e2fa      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80024e8:	f004 faf6 	bl	8006ad8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024ec:	4bb4      	ldr	r3, [pc, #720]	; (80027c0 <HAL_RCC_OscConfig+0x38c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f865 	bl	80015c0 <HAL_InitTick>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d039      	beq.n	8002570 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e2ee      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01e      	beq.n	8002546 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002508:	f7ff fdae 	bl	8002068 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250c:	f7ff f8a4 	bl	8001658 <HAL_GetTick>
 8002510:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002514:	f7ff f8a0 	bl	8001658 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2db      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002526:	f7ff fdbd 	bl	80020a4 <LL_RCC_MSI_IsReady>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f1      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fdc6 	bl	80020c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fdea 	bl	8002118 <LL_RCC_MSI_SetCalibTrimming>
 8002544:	e015      	b.n	8002572 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002546:	f7ff fd9e 	bl	8002086 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800254a:	f7ff f885 	bl	8001658 <HAL_GetTick>
 800254e:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002552:	f7ff f881 	bl	8001658 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e2bc      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002564:	f7ff fd9e 	bl	80020a4 <LL_RCC_MSI_IsReady>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <HAL_RCC_OscConfig+0x11e>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d05a      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257e:	f7ff fdf4 	bl	800216a <LL_RCC_GetSysClkSource>
 8002582:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002584:	f7ff feed 	bl	8002362 <LL_RCC_PLL_GetMainSource>
 8002588:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x168>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d10d      	bne.n	80025b2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d10a      	bne.n	80025b2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	f7ff fc04 	bl	8001da8 <LL_RCC_HSE_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d045      	beq.n	8002632 <HAL_RCC_OscConfig+0x1fe>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d141      	bne.n	8002632 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e295      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_OscConfig+0x18e>
 80025bc:	f7ff fbd6 	bl	8001d6c <LL_RCC_HSE_Enable>
 80025c0:	e00d      	b.n	80025de <HAL_RCC_OscConfig+0x1aa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ca:	d104      	bne.n	80025d6 <HAL_RCC_OscConfig+0x1a2>
 80025cc:	f7ff fbb0 	bl	8001d30 <LL_RCC_HSE_EnableBypass>
 80025d0:	f7ff fbcc 	bl	8001d6c <LL_RCC_HSE_Enable>
 80025d4:	e003      	b.n	80025de <HAL_RCC_OscConfig+0x1aa>
 80025d6:	f7ff fbd8 	bl	8001d8a <LL_RCC_HSE_Disable>
 80025da:	f7ff fbb8 	bl	8001d4e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d012      	beq.n	800260c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7ff f837 	bl	8001658 <HAL_GetTick>
 80025ea:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ee:	f7ff f833 	bl	8001658 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e26e      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002600:	f7ff fbd2 	bl	8001da8 <LL_RCC_HSE_IsReady>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f1      	beq.n	80025ee <HAL_RCC_OscConfig+0x1ba>
 800260a:	e013      	b.n	8002634 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff f824 	bl	8001658 <HAL_GetTick>
 8002610:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff f820 	bl	8001658 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e25b      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002626:	f7ff fbbf 	bl	8001da8 <LL_RCC_HSE_IsReady>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f1      	bne.n	8002614 <HAL_RCC_OscConfig+0x1e0>
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002632:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d051      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002640:	f7ff fd93 	bl	800216a <LL_RCC_GetSysClkSource>
 8002644:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002646:	f7ff fe8c 	bl	8002362 <LL_RCC_PLL_GetMainSource>
 800264a:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x22a>
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d113      	bne.n	8002680 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d110      	bne.n	8002680 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265e:	f7ff fbd3 	bl	8001e08 <LL_RCC_HSI_IsReady>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x240>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e234      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fbd7 	bl	8001e2c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267e:	e031      	b.n	80026e4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d019      	beq.n	80026bc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002688:	f7ff fba0 	bl	8001dcc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe ffe4 	bl	8001658 <HAL_GetTick>
 8002690:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7fe ffe0 	bl	8001658 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e21b      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80026a6:	f7ff fbaf 	bl	8001e08 <LL_RCC_HSI_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f1      	beq.n	8002694 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fbb9 	bl	8001e2c <LL_RCC_HSI_SetCalibTrimming>
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026bc:	f7ff fb95 	bl	8001dea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe ffca 	bl	8001658 <HAL_GetTick>
 80026c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe ffc6 	bl	8001658 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e201      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80026da:	f7ff fb95 	bl	8001e08 <LL_RCC_HSI_IsReady>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f1      	bne.n	80026c8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a2 	beq.w	8002842 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d046      	beq.n	80027a0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002712:	f7ff fc4c 	bl	8001fae <LL_RCC_LSI1_IsReady>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d113      	bne.n	8002744 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800271c:	f7ff fc25 	bl	8001f6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7fe ff9a 	bl	8001658 <HAL_GetTick>
 8002724:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002728:	f7fe ff96 	bl	8001658 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1d1      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800273a:	f7ff fc38 	bl	8001fae <LL_RCC_LSI1_IsReady>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f1      	beq.n	8002728 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002744:	f7ff fc45 	bl	8001fd2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe ff86 	bl	8001658 <HAL_GetTick>
 800274c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002750:	f7fe ff82 	bl	8001658 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b03      	cmp	r3, #3
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1bd      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002762:	f7ff fc58 	bl	8002016 <LL_RCC_LSI2_IsReady>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f1      	beq.n	8002750 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fc62 	bl	800203a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002776:	f7ff fc09 	bl	8001f8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe ff6d 	bl	8001658 <HAL_GetTick>
 800277e:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002782:	f7fe ff69 	bl	8001658 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1a4      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002794:	f7ff fc0b 	bl	8001fae <LL_RCC_LSI1_IsReady>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f1      	bne.n	8002782 <HAL_RCC_OscConfig+0x34e>
 800279e:	e050      	b.n	8002842 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80027a0:	f7ff fbe3 	bl	8001f6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe ff58 	bl	8001658 <HAL_GetTick>
 80027a8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027ac:	f7fe ff54 	bl	8001658 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d904      	bls.n	80027c4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e18f      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
 80027be:	bf00      	nop
 80027c0:	20000004 	.word	0x20000004
        while (LL_RCC_LSI1_IsReady() == 0U)
 80027c4:	f7ff fbf3 	bl	8001fae <LL_RCC_LSI1_IsReady>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ee      	beq.n	80027ac <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80027ce:	f7ff fc11 	bl	8001ff4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027d4:	f7fe ff40 	bl	8001658 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e17b      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027e6:	f7ff fc16 	bl	8002016 <LL_RCC_LSI2_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f1      	bne.n	80027d4 <HAL_RCC_OscConfig+0x3a0>
 80027f0:	e027      	b.n	8002842 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80027f2:	f7ff fbff 	bl	8001ff4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe ff2f 	bl	8001658 <HAL_GetTick>
 80027fa:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027fe:	f7fe ff2b 	bl	8001658 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b03      	cmp	r3, #3
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e166      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002810:	f7ff fc01 	bl	8002016 <LL_RCC_LSI2_IsReady>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f1      	bne.n	80027fe <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800281a:	f7ff fbb7 	bl	8001f8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7fe ff1b 	bl	8001658 <HAL_GetTick>
 8002822:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002826:	f7fe ff17 	bl	8001658 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e152      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002838:	f7ff fbb9 	bl	8001fae <LL_RCC_LSI1_IsReady>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f1      	bne.n	8002826 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d05b      	beq.n	8002906 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284e:	4ba6      	ldr	r3, [pc, #664]	; (8002ae8 <HAL_RCC_OscConfig+0x6b4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800285a:	f7ff fa39 	bl	8001cd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7fe fefb 	bl	8001658 <HAL_GetTick>
 8002862:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7fe fef7 	bl	8001658 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e132      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002878:	4b9b      	ldr	r3, [pc, #620]	; (8002ae8 <HAL_RCC_OscConfig+0x6b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_RCC_OscConfig+0x45e>
 800288c:	f7ff fb17 	bl	8001ebe <LL_RCC_LSE_Enable>
 8002890:	e00c      	b.n	80028ac <HAL_RCC_OscConfig+0x478>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b05      	cmp	r3, #5
 8002898:	d104      	bne.n	80028a4 <HAL_RCC_OscConfig+0x470>
 800289a:	f7ff fb32 	bl	8001f02 <LL_RCC_LSE_EnableBypass>
 800289e:	f7ff fb0e 	bl	8001ebe <LL_RCC_LSE_Enable>
 80028a2:	e003      	b.n	80028ac <HAL_RCC_OscConfig+0x478>
 80028a4:	f7ff fb1c 	bl	8001ee0 <LL_RCC_LSE_Disable>
 80028a8:	f7ff fb3c 	bl	8001f24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d014      	beq.n	80028de <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fed0 	bl	8001658 <HAL_GetTick>
 80028b8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fecc 	bl	8001658 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e105      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80028d2:	f7ff fb38 	bl	8001f46 <LL_RCC_LSE_IsReady>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ef      	beq.n	80028bc <HAL_RCC_OscConfig+0x488>
 80028dc:	e013      	b.n	8002906 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7fe febb 	bl	8001658 <HAL_GetTick>
 80028e2:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe feb7 	bl	8001658 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0f0      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80028fc:	f7ff fb23 	bl	8001f46 <LL_RCC_LSE_IsReady>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ef      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d02c      	beq.n	800296c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	d014      	beq.n	8002944 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800291a:	f7ff fa9c 	bl	8001e56 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fe9b 	bl	8001658 <HAL_GetTick>
 8002922:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002926:	f7fe fe97 	bl	8001658 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0d2      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002938:	f7ff faaf 	bl	8001e9a <LL_RCC_HSI48_IsReady>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f1      	beq.n	8002926 <HAL_RCC_OscConfig+0x4f2>
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002944:	f7ff fa98 	bl	8001e78 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fe86 	bl	8001658 <HAL_GetTick>
 800294c:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002950:	f7fe fe82 	bl	8001658 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0bd      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002962:	f7ff fa9a 	bl	8001e9a <LL_RCC_HSI48_IsReady>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f1      	bne.n	8002950 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b3 	beq.w	8002adc <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002976:	f7ff fbf8 	bl	800216a <LL_RCC_GetSysClkSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d076      	beq.n	8002a6e <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	2b02      	cmp	r3, #2
 8002986:	d14b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	f7ff fca5 	bl	80022d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fe64 	bl	8001658 <HAL_GetTick>
 8002990:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fe60 	bl	8001658 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e09b      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80029a6:	f7ff fca5 	bl	80022f4 <LL_RCC_PLL_IsReady>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f1      	bne.n	8002994 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b0:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <HAL_RCC_OscConfig+0x6b8>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029cc:	0212      	lsls	r2, r2, #8
 80029ce:	4311      	orrs	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d4:	4311      	orrs	r1, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029e0:	430a      	orrs	r2, r1
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e6:	f7ff fc67 	bl	80022b8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fe2d 	bl	8001658 <HAL_GetTick>
 80029fe:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe fe29 	bl	8001658 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e064      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a14:	f7ff fc6e 	bl	80022f4 <LL_RCC_PLL_IsReady>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f1      	beq.n	8002a02 <HAL_RCC_OscConfig+0x5ce>
 8002a1e:	e05d      	b.n	8002adc <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	f7ff fc59 	bl	80022d6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f023 0303 	bic.w	r3, r3, #3
 8002a32:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe06 	bl	8001658 <HAL_GetTick>
 8002a4c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fe02 	bl	8001658 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e03d      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a62:	f7ff fc47 	bl	80022f4 <LL_RCC_PLL_IsReady>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f1      	bne.n	8002a50 <HAL_RCC_OscConfig+0x61c>
 8002a6c:	e036      	b.n	8002adc <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e031      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d123      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d114      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	372c      	adds	r7, #44	; 0x2c
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	58000400 	.word	0x58000400
 8002aec:	11c1808c 	.word	0x11c1808c

08002af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e12a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b97      	ldr	r3, [pc, #604]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0207 	and.w	r2, r3, #7
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d21b      	bcs.n	8002b4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4994      	ldr	r1, [pc, #592]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002b14:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0207 	bic.w	r2, r3, #7
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b22:	f7fe fd99 	bl	8001658 <HAL_GetTick>
 8002b26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b2a:	f7fe fd95 	bl	8001658 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10e      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3c:	4b89      	ldr	r3, [pc, #548]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0207 	and.w	r2, r3, #7
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d1ef      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fb11 	bl	8002182 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b60:	f7fe fd7a 	bl	8001658 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b68:	f7fe fd76 	bl	8001658 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0ef      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002b7a:	f7ff fbfe 	bl	800237a <LL_RCC_IsActiveFlag_HPRE>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f1      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d016      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fb08 	bl	80021aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe fd5d 	bl	8001658 <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ba2:	f7fe fd59 	bl	8001658 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0d2      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002bb4:	f7ff fbf3 	bl	800239e <LL_RCC_IsActiveFlag_C2HPRE>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f1      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fb01 	bl	80021d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fd40 	bl	8001658 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bdc:	f7fe fd3c 	bl	8001658 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0b5      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002bee:	f7ff fbe9 	bl	80023c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f1      	beq.n	8002bdc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fafb 	bl	8002204 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c0e:	f7fe fd23 	bl	8001658 <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c16:	f7fe fd1f 	bl	8001658 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e098      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c28:	f7ff fbdf 	bl	80023ea <LL_RCC_IsActiveFlag_PPRE1>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f1      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d017      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff faf1 	bl	800222c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fd05 	bl	8001658 <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c52:	f7fe fd01 	bl	8001658 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e07a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c64:	f7ff fbd3 	bl	800240e <LL_RCC_IsActiveFlag_PPRE2>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f1      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d043      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002c82:	f7ff f891 	bl	8001da8 <LL_RCC_HSE_IsReady>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11e      	bne.n	8002cca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e064      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002c98:	f7ff fb2c 	bl	80022f4 <LL_RCC_PLL_IsReady>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e059      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002cae:	f7ff f9f9 	bl	80020a4 <LL_RCC_MSI_IsReady>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d108      	bne.n	8002cca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04e      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002cbc:	f7ff f8a4 	bl	8001e08 <LL_RCC_HSI_IsReady>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e047      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fa37 	bl	8002142 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd4:	f7fe fcc0 	bl	8001658 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fe fcbc 	bl	8001658 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e033      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	f7ff fa3a 	bl	800216a <LL_RCC_GetSysClkSource>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d1ec      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0207 	and.w	r2, r3, #7
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d91b      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d10:	4914      	ldr	r1, [pc, #80]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d20:	f7fe fc9a 	bl	8001658 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d28:	f7fe fc96 	bl	8001658 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e00f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0207 	and.w	r2, r3, #7
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1ef      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002d48:	f003 fec6 	bl	8006ad8 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002d4c:	f7fe fc90 	bl	8001670 <HAL_GetTickPrio>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fc34 	bl	80015c0 <HAL_InitTick>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	58004000 	.word	0x58004000

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6e:	f7ff f9fc 	bl	800216a <LL_RCC_GetSysClkSource>
 8002d72:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d7a:	f7ff f9b8 	bl	80020ee <LL_RCC_MSI_GetRange>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e04a      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e044      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d10a      	bne.n	8002db8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002da2:	f7fe ffb3 	bl	8001d0c <LL_RCC_HSE_IsEnabledDiv2>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d102      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e039      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e036      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002db8:	f7ff fad3 	bl	8002362 <LL_RCC_PLL_GetMainSource>
 8002dbc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d002      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x62>
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d003      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x68>
 8002dc8:	e00d      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dcc:	60bb      	str	r3, [r7, #8]
        break;
 8002dce:	e015      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002dd0:	f7fe ff9c 	bl	8001d0c <LL_RCC_HSE_IsEnabledDiv2>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ddc:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002dde:	e00d      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002de2:	60bb      	str	r3, [r7, #8]
        break;
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002de6:	f7ff f982 	bl	80020ee <LL_RCC_MSI_GetRange>
 8002dea:	4603      	mov	r3, r0
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	60bb      	str	r3, [r7, #8]
        break;
 8002dfa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002dfc:	f7ff fa8c 	bl	8002318 <LL_RCC_PLL_GetN>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	fb03 f402 	mul.w	r4, r3, r2
 8002e08:	f7ff fa9f 	bl	800234a <LL_RCC_PLL_GetDivider>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	3301      	adds	r3, #1
 8002e12:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e16:	f7ff fa8c 	bl	8002332 <LL_RCC_PLL_GetR>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	0f5b      	lsrs	r3, r3, #29
 8002e1e:	3301      	adds	r3, #1
 8002e20:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002e26:	68fb      	ldr	r3, [r7, #12]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	08007db8 	.word	0x08007db8
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	01e84800 	.word	0x01e84800

08002e3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b598      	push	{r3, r4, r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e40:	f7ff ff92 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002e44:	4604      	mov	r4, r0
 8002e46:	f7ff fa05 	bl	8002254 <LL_RCC_GetAHBPrescaler>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x24>)
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd98      	pop	{r3, r4, r7, pc}
 8002e60:	08007d58 	.word	0x08007d58

08002e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e64:	b598      	push	{r3, r4, r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e68:	f7ff ffe8 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	f7ff fa0b 	bl	8002288 <LL_RCC_GetAPB1Prescaler>
 8002e72:	4603      	mov	r3, r0
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd98      	pop	{r3, r4, r7, pc}
 8002e8c:	08007d98 	.word	0x08007d98

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b598      	push	{r3, r4, r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002e94:	f7ff ffd2 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	f7ff fa01 	bl	80022a0 <LL_RCC_GetAPB2Prescaler>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	0adb      	lsrs	r3, r3, #11
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd98      	pop	{r3, r4, r7, pc}
 8002eb8:	08007d98 	.word	0x08007d98

08002ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2bb0      	cmp	r3, #176	; 0xb0
 8002ec8:	d903      	bls.n	8002ed2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e007      	b.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ee2:	f7ff f9c3 	bl	800226c <LL_RCC_GetAHB4Prescaler>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9c      	lsrs	r4, r3, #18
 8002f06:	f7fe fef3 	bl	8001cf0 <HAL_PWREx_GetVoltageRange>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f000 f80c 	bl	8002f2c <RCC_SetFlashLatency>
 8002f14:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	08007db8 	.word	0x08007db8
 8002f24:	08007d58 	.word	0x08007d58
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b093      	sub	sp, #76	; 0x4c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002f36:	4b39      	ldr	r3, [pc, #228]	; (800301c <RCC_SetFlashLatency+0xf0>)
 8002f38:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002f42:	4a37      	ldr	r2, [pc, #220]	; (8003020 <RCC_SetFlashLatency+0xf4>)
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002f4e:	4b35      	ldr	r3, [pc, #212]	; (8003024 <RCC_SetFlashLatency+0xf8>)
 8002f50:	f107 040c 	add.w	r4, r7, #12
 8002f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d11c      	bne.n	8002fa0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	643b      	str	r3, [r7, #64]	; 0x40
 8002f6a:	e015      	b.n	8002f98 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f74:	4413      	add	r3, r2
 8002f76:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d308      	bcc.n	8002f92 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002f88:	4413      	add	r3, r2
 8002f8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002f90:	e022      	b.n	8002fd8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f94:	3301      	adds	r3, #1
 8002f96:	643b      	str	r3, [r7, #64]	; 0x40
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d9e6      	bls.n	8002f6c <RCC_SetFlashLatency+0x40>
 8002f9e:	e01b      	b.n	8002fd8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	e015      	b.n	8002fd2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002fae:	4413      	add	r3, r2
 8002fb0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d308      	bcc.n	8002fcc <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002fca:	e005      	b.n	8002fd8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fce:	3301      	adds	r3, #1
 8002fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d9e6      	bls.n	8002fa6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002fd8:	4913      	ldr	r1, [pc, #76]	; (8003028 <RCC_SetFlashLatency+0xfc>)
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <RCC_SetFlashLatency+0xfc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fe8:	f7fe fb36 	bl	8001658 <HAL_GetTick>
 8002fec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002fee:	e008      	b.n	8003002 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ff0:	f7fe fb32 	bl	8001658 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e007      	b.n	8003012 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <RCC_SetFlashLatency+0xfc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0207 	and.w	r2, r3, #7
 800300a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300c:	429a      	cmp	r2, r3
 800300e:	d1ef      	bne.n	8002ff0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	374c      	adds	r7, #76	; 0x4c
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	080073e8 	.word	0x080073e8
 8003020:	080073f8 	.word	0x080073f8
 8003024:	08007404 	.word	0x08007404
 8003028:	58004000 	.word	0x58004000

0800302c <LL_RCC_LSE_IsEnabled>:
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <LL_RCC_LSE_IsEnabled+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_RCC_LSE_IsEnabled+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_RCC_LSE_IsReady>:
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d101      	bne.n	8003068 <LL_RCC_LSE_IsReady+0x18>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <LL_RCC_LSE_IsReady+0x1a>
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_RCC_SetRFWKPClockSource>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_RCC_SetSMPSClockSource>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_RCC_SetSMPSPrescaler>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80030d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_RCC_SetUSARTClockSource>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80030f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 0203 	bic.w	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_RCC_SetLPUARTClockSource>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_SetI2CClockSource>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_RCC_SetLPTIMClockSource>:
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800318a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	43db      	mvns	r3, r3
 800319e:	401a      	ands	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_RCC_SetSAIClockSource>:
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_SetRNGClockSource>:
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80031ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_RCC_SetCLK48ClockSource>:
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_SetUSBClockSource>:
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ffe3 	bl	800320e <LL_RCC_SetCLK48ClockSource>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <LL_RCC_SetADCClockSource>:
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_RCC_SetRTCClockSource>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_RCC_GetRTCClockSource>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_ForceBackupDomainReset>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80032c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80032e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_RCC_PLLSAI1_Enable>:
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800330a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003318:	6013      	str	r3, [r2, #0]
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_RCC_PLLSAI1_Disable>:
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003336:	6013      	str	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_RCC_PLLSAI1_IsReady>:
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003354:	d101      	bne.n	800335a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b088      	sub	sp, #32
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800336e:	2300      	movs	r3, #0
 8003370:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003372:	2300      	movs	r3, #0
 8003374:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d033      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d00c      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800338c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003390:	d802      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003396:	e017      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800339c:	d017      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x68>
 800339e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a2:	d016      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80033a4:	e010      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80033a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80033b6:	e00d      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f947 	bl	8003650 <RCCEx_PLLSAI1_ConfigNP>
 80033c2:	4603      	mov	r3, r0
 80033c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80033c6:	e005      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77fb      	strb	r3, [r7, #31]
        break;
 80033cc:	e002      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80033d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fee9 	bl	80031b6 <LL_RCC_SetSAIClockSource>
 80033e4:	e001      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d046      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80033f6:	f7ff ff57 	bl	80032a8 <LL_RCC_GetRTCClockSource>
 80033fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	429a      	cmp	r2, r3
 8003404:	d03c      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003406:	f7fe fc63 	bl	8001cd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff31 	bl	800327c <LL_RCC_SetRTCClockSource>
 800341a:	e02e      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003426:	f7ff ff4c 	bl	80032c2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800342a:	f7ff ff5b 	bl	80032e4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003446:	f7ff fdf1 	bl	800302c <LL_RCC_LSE_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d114      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003450:	f7fe f902 	bl	8001658 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003456:	e00b      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fe f8fe 	bl	8001658 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d902      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	77fb      	strb	r3, [r7, #31]
              break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003470:	f7ff fdee 	bl	8003050 <LL_RCC_LSE_IsReady>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d1ee      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	77bb      	strb	r3, [r7, #30]
 800347e:	e001      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7ffb      	ldrb	r3, [r7, #31]
 8003482:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fe2b 	bl	80030f0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fe36 	bl	800311c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fe5e 	bl	8003182 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe53 	bl	8003182 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d004      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fe2b 	bl	8003148 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fe20 	bl	8003148 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d022      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fe8e 	bl	800323a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003526:	d107      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003540:	d10b      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f8dd 	bl	8003706 <RCCEx_PLLSAI1_ConfigNQ>
 800354c:	4603      	mov	r3, r0
 800354e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02b      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d008      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003578:	d003      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fe2b 	bl	80031e2 <LL_RCC_SetRNGClockSource>
 800358c:	e00a      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	2000      	movs	r0, #0
 800359a:	f7ff fe22 	bl	80031e2 <LL_RCC_SetRNGClockSource>
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff fe35 	bl	800320e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80035ac:	d107      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80035ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d022      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fe3e 	bl	8003250 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035dc:	d107      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d10b      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f8dd 	bl	80037bc <RCCEx_PLLSAI1_ConfigNR>
 8003602:	4603      	mov	r3, r0
 8003604:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 800360c:	7ffb      	ldrb	r3, [r7, #31]
 800360e:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fd27 	bl	8003074 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fd46 	bl	80030c8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fd2d 	bl	80030a0 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8003646:	7fbb      	ldrb	r3, [r7, #30]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800365c:	f7ff fe62 	bl	8003324 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003660:	f7fd fffa 	bl	8001658 <HAL_GetTick>
 8003664:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003666:	e009      	b.n	800367c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003668:	f7fd fff6 	bl	8001658 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d902      	bls.n	800367c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	73fb      	strb	r3, [r7, #15]
      break;
 800367a:	e004      	b.n	8003686 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800367c:	f7ff fe61 	bl	8003342 <LL_RCC_PLLSAI1_IsReady>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d137      	bne.n	80036fc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800368c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	4313      	orrs	r3, r2
 80036a2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80036a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036ba:	f7ff fe24 	bl	8003306 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036be:	f7fd ffcb 	bl	8001658 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036c4:	e009      	b.n	80036da <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c6:	f7fd ffc7 	bl	8001658 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d902      	bls.n	80036da <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	73fb      	strb	r3, [r7, #15]
        break;
 80036d8:	e004      	b.n	80036e4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036da:	f7ff fe32 	bl	8003342 <LL_RCC_PLLSAI1_IsReady>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d1f0      	bne.n	80036c6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003712:	f7ff fe07 	bl	8003324 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003716:	f7fd ff9f 	bl	8001658 <HAL_GetTick>
 800371a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800371c:	e009      	b.n	8003732 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800371e:	f7fd ff9b 	bl	8001658 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d902      	bls.n	8003732 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e004      	b.n	800373c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003732:	f7ff fe06 	bl	8003342 <LL_RCC_PLLSAI1_IsReady>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d137      	bne.n	80037b2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	4313      	orrs	r3, r2
 8003758:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800375a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4313      	orrs	r3, r2
 800376e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003770:	f7ff fdc9 	bl	8003306 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fd ff70 	bl	8001658 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377c:	f7fd ff6c 	bl	8001658 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
        break;
 800378e:	e004      	b.n	800379a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003790:	f7ff fdd7 	bl	8003342 <LL_RCC_PLLSAI1_IsReady>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d1f0      	bne.n	800377c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d108      	bne.n	80037b2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80037a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80037c8:	f7ff fdac 	bl	8003324 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037cc:	f7fd ff44 	bl	8001658 <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037d2:	e009      	b.n	80037e8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d4:	f7fd ff40 	bl	8001658 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d902      	bls.n	80037e8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	73fb      	strb	r3, [r7, #15]
      break;
 80037e6:	e004      	b.n	80037f2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80037e8:	f7ff fdab 	bl	8003342 <LL_RCC_PLLSAI1_IsReady>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d137      	bne.n	8003868 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80037f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	4313      	orrs	r3, r2
 800380e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003826:	f7ff fd6e 	bl	8003306 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800382a:	f7fd ff15 	bl	8001658 <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003830:	e009      	b.n	8003846 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003832:	f7fd ff11 	bl	8001658 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d902      	bls.n	8003846 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	73fb      	strb	r3, [r7, #15]
        break;
 8003844:	e004      	b.n	8003850 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003846:	f7ff fd7c 	bl	8003342 <LL_RCC_PLLSAI1_IsReady>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d1f0      	bne.n	8003832 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e01d      	b.n	80038c0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f003 f9ff 	bl	8006c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 f833 	bl	800391c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_TIM_Base_Start+0x50>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d00b      	beq.n	8003902 <HAL_TIM_Base_Start+0x3a>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f0:	d007      	beq.n	8003902 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	00010007 	.word	0x00010007

0800391c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <TIM_Base_SetConfig+0xbc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x20>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d108      	bne.n	800394e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <TIM_Base_SetConfig+0xbc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0x52>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0x52>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <TIM_Base_SetConfig+0xc0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0x52>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <TIM_Base_SetConfig+0xc4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <TIM_Base_SetConfig+0xbc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0xa0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <TIM_Base_SetConfig+0xc0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0xa0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <TIM_Base_SetConfig+0xc4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	615a      	str	r2, [r3, #20]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800

080039e4 <LL_RCC_GetUSARTClockSource>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4013      	ands	r3, r2
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_RCC_GetLPUARTClockSource>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4013      	ands	r3, r2
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e042      	b.n	8003abc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f003 f9b9 	bl	8006dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2224      	movs	r2, #36	; 0x24
 8003a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa56 	bl	8003f18 <UART_SetConfig>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e022      	b.n	8003abc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 fa9a 	bl	8004fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	6852      	ldr	r2, [r2, #4]
 8003a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f001 fb21 	bl	80050fc <UART_CheckIdleState>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	f040 8082 	bne.w	8003be4 <HAL_UART_Transmit+0x120>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_UART_Transmit+0x28>
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e07a      	b.n	8003be6 <HAL_UART_Transmit+0x122>
    }

    __HAL_LOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Transmit+0x3a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e073      	b.n	8003be6 <HAL_UART_Transmit+0x122>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b16:	f7fd fd9f 	bl	8001658 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d108      	bne.n	8003b48 <HAL_UART_Transmit+0x84>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b50:	e02b      	b.n	8003baa <HAL_UART_Transmit+0xe6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f001 fb15 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e03c      	b.n	8003be6 <HAL_UART_Transmit+0x122>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_UART_Transmit+0xc4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	8812      	ldrh	r2, [r2, #0]
 8003b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	3302      	adds	r3, #2
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e007      	b.n	8003b98 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	7812      	ldrb	r2, [r2, #0]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1cd      	bne.n	8003b52 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f001 fae3 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e00a      	b.n	8003be6 <HAL_UART_Transmit+0x122>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_UART_Transmit+0x122>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d118      	bne.n	8003c52 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d013      	beq.n	8003c52 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8145 	beq.w	8003ed2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
      }
      return;
 8003c50:	e13f      	b.n	8003ed2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80e8 	beq.w	8003e2a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4ba1      	ldr	r3, [pc, #644]	; (8003ee4 <HAL_UART_IRQHandler+0x2f4>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4ba0      	ldr	r3, [pc, #640]	; (8003ee8 <HAL_UART_IRQHandler+0x2f8>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80dd 	beq.w	8003e2a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_UART_IRQHandler+0xac>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_UART_IRQHandler+0xd8>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f043 0204 	orr.w	r2, r3, #4
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x104>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f043 0202 	orr.w	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_UART_IRQHandler+0x2f4>)
 8003d0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2208      	movs	r2, #8
 8003d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f043 0208 	orr.w	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d011      	beq.n	8003d58 <HAL_UART_IRQHandler+0x168>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80b9 	beq.w	8003ed6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d011      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d004      	beq.n	8003db2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d031      	beq.n	8003e16 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 fa6a 	bl	800528c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d123      	bne.n	8003e0e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	6892      	ldr	r2, [r2, #8]
 8003dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de2:	4a42      	ldr	r2, [pc, #264]	; (8003eec <HAL_UART_IRQHandler+0x2fc>)
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fd59 	bl	80018a2 <HAL_DMA_Abort_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00f      	b.n	8003e26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f87c 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00b      	b.n	8003e26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f878 	bl	8003f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e007      	b.n	8003e26 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f874 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003e24:	e057      	b.n	8003ed6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e26:	bf00      	nop
    return;
 8003e28:	e055      	b.n	8003ed6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_UART_IRQHandler+0x260>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f001 fa72 	bl	8005332 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e4e:	e045      	b.n	8003edc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d031      	beq.n	8003eda <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
    }
    return;
 8003e7e:	e02c      	b.n	8003eda <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_UART_IRQHandler+0x2ac>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f001 fa32 	bl	80052fe <UART_EndTransmit_IT>
    return;
 8003e9a:	e01f      	b.n	8003edc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x2c8>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 fa52 	bl	800535a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eb6:	e011      	b.n	8003edc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_UART_IRQHandler+0x2ec>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da09      	bge.n	8003edc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f001 fa3c 	bl	8005346 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ece:	bf00      	nop
 8003ed0:	e004      	b.n	8003edc <HAL_UART_IRQHandler+0x2ec>
      return;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_UART_IRQHandler+0x2ec>
    return;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_UART_IRQHandler+0x2ec>
    return;
 8003eda:	bf00      	nop
  }
}
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	10000001 	.word	0x10000001
 8003ee8:	04000120 	.word	0x04000120
 8003eec:	080052d3 	.word	0x080052d3

08003ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	b08b      	sub	sp, #44	; 0x2c
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	4ba4      	ldr	r3, [pc, #656]	; (80041ec <UART_SetConfig+0x2d4>)
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	6852      	ldr	r2, [r2, #4]
 8003f6e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a9a      	ldr	r2, [pc, #616]	; (80041f0 <UART_SetConfig+0x2d8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	4313      	orrs	r3, r2
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fb6:	f022 010f 	bic.w	r1, r2, #15
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a8b      	ldr	r2, [pc, #556]	; (80041f4 <UART_SetConfig+0x2dc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d126      	bne.n	800401a <UART_SetConfig+0x102>
 8003fcc:	2003      	movs	r0, #3
 8003fce:	f7ff fd09 	bl	80039e4 <LL_RCC_GetUSARTClockSource>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d81b      	bhi.n	8004010 <UART_SetConfig+0xf8>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0xc8>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08004001 	.word	0x08004001
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08004009 	.word	0x08004009
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e042      	b.n	800407e <UART_SetConfig+0x166>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e03e      	b.n	800407e <UART_SetConfig+0x166>
 8004000:	2304      	movs	r3, #4
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e03a      	b.n	800407e <UART_SetConfig+0x166>
 8004008:	2308      	movs	r3, #8
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e036      	b.n	800407e <UART_SetConfig+0x166>
 8004010:	2310      	movs	r3, #16
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004016:	bf00      	nop
 8004018:	e031      	b.n	800407e <UART_SetConfig+0x166>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a74      	ldr	r2, [pc, #464]	; (80041f0 <UART_SetConfig+0x2d8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d129      	bne.n	8004078 <UART_SetConfig+0x160>
 8004024:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004028:	f7ff fcec 	bl	8003a04 <LL_RCC_GetLPUARTClockSource>
 800402c:	4603      	mov	r3, r0
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d014      	beq.n	800405e <UART_SetConfig+0x146>
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d802      	bhi.n	8004040 <UART_SetConfig+0x128>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <UART_SetConfig+0x136>
 800403e:	e016      	b.n	800406e <UART_SetConfig+0x156>
 8004040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004044:	d007      	beq.n	8004056 <UART_SetConfig+0x13e>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d00c      	beq.n	8004066 <UART_SetConfig+0x14e>
 800404c:	e00f      	b.n	800406e <UART_SetConfig+0x156>
 800404e:	2300      	movs	r3, #0
 8004050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004054:	e013      	b.n	800407e <UART_SetConfig+0x166>
 8004056:	2302      	movs	r3, #2
 8004058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405c:	e00f      	b.n	800407e <UART_SetConfig+0x166>
 800405e:	2304      	movs	r3, #4
 8004060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004064:	e00b      	b.n	800407e <UART_SetConfig+0x166>
 8004066:	2308      	movs	r3, #8
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406c:	e007      	b.n	800407e <UART_SetConfig+0x166>
 800406e:	2310      	movs	r3, #16
 8004070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <UART_SetConfig+0x166>
 8004078:	2310      	movs	r3, #16
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a5b      	ldr	r2, [pc, #364]	; (80041f0 <UART_SetConfig+0x2d8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	f040 8413 	bne.w	80048b0 <UART_SetConfig+0x998>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800408a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800408e:	2b08      	cmp	r3, #8
 8004090:	f200 8173 	bhi.w	800437a <UART_SetConfig+0x462>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x184>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	0800437b 	.word	0x0800437b
 80040a4:	08004163 	.word	0x08004163
 80040a8:	0800437b 	.word	0x0800437b
 80040ac:	0800422b 	.word	0x0800422b
 80040b0:	0800437b 	.word	0x0800437b
 80040b4:	0800437b 	.word	0x0800437b
 80040b8:	0800437b 	.word	0x0800437b
 80040bc:	080042cd 	.word	0x080042cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80040c0:	f7fe fed0 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d044      	beq.n	8004158 <UART_SetConfig+0x240>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d03e      	beq.n	8004154 <UART_SetConfig+0x23c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d038      	beq.n	8004150 <UART_SetConfig+0x238>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d032      	beq.n	800414c <UART_SetConfig+0x234>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d02c      	beq.n	8004148 <UART_SetConfig+0x230>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d026      	beq.n	8004144 <UART_SetConfig+0x22c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d020      	beq.n	8004140 <UART_SetConfig+0x228>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2b07      	cmp	r3, #7
 8004104:	d01a      	beq.n	800413c <UART_SetConfig+0x224>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2b08      	cmp	r3, #8
 800410c:	d014      	beq.n	8004138 <UART_SetConfig+0x220>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b09      	cmp	r3, #9
 8004114:	d00e      	beq.n	8004134 <UART_SetConfig+0x21c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	2b0a      	cmp	r3, #10
 800411c:	d008      	beq.n	8004130 <UART_SetConfig+0x218>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b0b      	cmp	r3, #11
 8004124:	d102      	bne.n	800412c <UART_SetConfig+0x214>
 8004126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412a:	e016      	b.n	800415a <UART_SetConfig+0x242>
 800412c:	2301      	movs	r3, #1
 800412e:	e014      	b.n	800415a <UART_SetConfig+0x242>
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	e012      	b.n	800415a <UART_SetConfig+0x242>
 8004134:	2340      	movs	r3, #64	; 0x40
 8004136:	e010      	b.n	800415a <UART_SetConfig+0x242>
 8004138:	2320      	movs	r3, #32
 800413a:	e00e      	b.n	800415a <UART_SetConfig+0x242>
 800413c:	2310      	movs	r3, #16
 800413e:	e00c      	b.n	800415a <UART_SetConfig+0x242>
 8004140:	230c      	movs	r3, #12
 8004142:	e00a      	b.n	800415a <UART_SetConfig+0x242>
 8004144:	230a      	movs	r3, #10
 8004146:	e008      	b.n	800415a <UART_SetConfig+0x242>
 8004148:	2308      	movs	r3, #8
 800414a:	e006      	b.n	800415a <UART_SetConfig+0x242>
 800414c:	2306      	movs	r3, #6
 800414e:	e004      	b.n	800415a <UART_SetConfig+0x242>
 8004150:	2304      	movs	r3, #4
 8004152:	e002      	b.n	800415a <UART_SetConfig+0x242>
 8004154:	2302      	movs	r3, #2
 8004156:	e000      	b.n	800415a <UART_SetConfig+0x242>
 8004158:	2301      	movs	r3, #1
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	617b      	str	r3, [r7, #20]
        break;
 8004160:	e10e      	b.n	8004380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d05c      	beq.n	8004224 <UART_SetConfig+0x30c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b01      	cmp	r3, #1
 8004170:	d056      	beq.n	8004220 <UART_SetConfig+0x308>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b02      	cmp	r3, #2
 8004178:	d050      	beq.n	800421c <UART_SetConfig+0x304>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2b03      	cmp	r3, #3
 8004180:	d032      	beq.n	80041e8 <UART_SetConfig+0x2d0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b04      	cmp	r3, #4
 8004188:	d02c      	beq.n	80041e4 <UART_SetConfig+0x2cc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b05      	cmp	r3, #5
 8004190:	d026      	beq.n	80041e0 <UART_SetConfig+0x2c8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b06      	cmp	r3, #6
 8004198:	d020      	beq.n	80041dc <UART_SetConfig+0x2c4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	2b07      	cmp	r3, #7
 80041a0:	d01a      	beq.n	80041d8 <UART_SetConfig+0x2c0>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d014      	beq.n	80041d4 <UART_SetConfig+0x2bc>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	d00e      	beq.n	80041d0 <UART_SetConfig+0x2b8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b0a      	cmp	r3, #10
 80041b8:	d008      	beq.n	80041cc <UART_SetConfig+0x2b4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b0b      	cmp	r3, #11
 80041c0:	d102      	bne.n	80041c8 <UART_SetConfig+0x2b0>
 80041c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041c6:	e02e      	b.n	8004226 <UART_SetConfig+0x30e>
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <UART_SetConfig+0x2e0>)
 80041ca:	e02c      	b.n	8004226 <UART_SetConfig+0x30e>
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <UART_SetConfig+0x2e4>)
 80041ce:	e02a      	b.n	8004226 <UART_SetConfig+0x30e>
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <UART_SetConfig+0x2e8>)
 80041d2:	e028      	b.n	8004226 <UART_SetConfig+0x30e>
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <UART_SetConfig+0x2ec>)
 80041d6:	e026      	b.n	8004226 <UART_SetConfig+0x30e>
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <UART_SetConfig+0x2f0>)
 80041da:	e024      	b.n	8004226 <UART_SetConfig+0x30e>
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <UART_SetConfig+0x2f4>)
 80041de:	e022      	b.n	8004226 <UART_SetConfig+0x30e>
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <UART_SetConfig+0x2f8>)
 80041e2:	e020      	b.n	8004226 <UART_SetConfig+0x30e>
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <UART_SetConfig+0x2fc>)
 80041e6:	e01e      	b.n	8004226 <UART_SetConfig+0x30e>
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <UART_SetConfig+0x300>)
 80041ea:	e01c      	b.n	8004226 <UART_SetConfig+0x30e>
 80041ec:	cfff69f3 	.word	0xcfff69f3
 80041f0:	40008000 	.word	0x40008000
 80041f4:	40013800 	.word	0x40013800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	0001e848 	.word	0x0001e848
 8004200:	0003d090 	.word	0x0003d090
 8004204:	0007a120 	.word	0x0007a120
 8004208:	000f4240 	.word	0x000f4240
 800420c:	00145855 	.word	0x00145855
 8004210:	00186a00 	.word	0x00186a00
 8004214:	001e8480 	.word	0x001e8480
 8004218:	0028b0aa 	.word	0x0028b0aa
 800421c:	4ba7      	ldr	r3, [pc, #668]	; (80044bc <UART_SetConfig+0x5a4>)
 800421e:	e002      	b.n	8004226 <UART_SetConfig+0x30e>
 8004220:	4ba7      	ldr	r3, [pc, #668]	; (80044c0 <UART_SetConfig+0x5a8>)
 8004222:	e000      	b.n	8004226 <UART_SetConfig+0x30e>
 8004224:	4ba7      	ldr	r3, [pc, #668]	; (80044c4 <UART_SetConfig+0x5ac>)
 8004226:	617b      	str	r3, [r7, #20]
        break;
 8004228:	e0aa      	b.n	8004380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800422a:	f7fe fd9d 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d044      	beq.n	80042c2 <UART_SetConfig+0x3aa>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b01      	cmp	r3, #1
 800423e:	d03e      	beq.n	80042be <UART_SetConfig+0x3a6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b02      	cmp	r3, #2
 8004246:	d038      	beq.n	80042ba <UART_SetConfig+0x3a2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2b03      	cmp	r3, #3
 800424e:	d032      	beq.n	80042b6 <UART_SetConfig+0x39e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b04      	cmp	r3, #4
 8004256:	d02c      	beq.n	80042b2 <UART_SetConfig+0x39a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b05      	cmp	r3, #5
 800425e:	d026      	beq.n	80042ae <UART_SetConfig+0x396>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b06      	cmp	r3, #6
 8004266:	d020      	beq.n	80042aa <UART_SetConfig+0x392>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2b07      	cmp	r3, #7
 800426e:	d01a      	beq.n	80042a6 <UART_SetConfig+0x38e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b08      	cmp	r3, #8
 8004276:	d014      	beq.n	80042a2 <UART_SetConfig+0x38a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b09      	cmp	r3, #9
 800427e:	d00e      	beq.n	800429e <UART_SetConfig+0x386>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	2b0a      	cmp	r3, #10
 8004286:	d008      	beq.n	800429a <UART_SetConfig+0x382>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b0b      	cmp	r3, #11
 800428e:	d102      	bne.n	8004296 <UART_SetConfig+0x37e>
 8004290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004294:	e016      	b.n	80042c4 <UART_SetConfig+0x3ac>
 8004296:	2301      	movs	r3, #1
 8004298:	e014      	b.n	80042c4 <UART_SetConfig+0x3ac>
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	e012      	b.n	80042c4 <UART_SetConfig+0x3ac>
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	e010      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042a2:	2320      	movs	r3, #32
 80042a4:	e00e      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042a6:	2310      	movs	r3, #16
 80042a8:	e00c      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042aa:	230c      	movs	r3, #12
 80042ac:	e00a      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042ae:	230a      	movs	r3, #10
 80042b0:	e008      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042b2:	2308      	movs	r3, #8
 80042b4:	e006      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042b6:	2306      	movs	r3, #6
 80042b8:	e004      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042ba:	2304      	movs	r3, #4
 80042bc:	e002      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042be:	2302      	movs	r3, #2
 80042c0:	e000      	b.n	80042c4 <UART_SetConfig+0x3ac>
 80042c2:	2301      	movs	r3, #1
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
        break;
 80042ca:	e059      	b.n	8004380 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04e      	beq.n	8004372 <UART_SetConfig+0x45a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d047      	beq.n	800436c <UART_SetConfig+0x454>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d040      	beq.n	8004366 <UART_SetConfig+0x44e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d039      	beq.n	8004360 <UART_SetConfig+0x448>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d032      	beq.n	800435a <UART_SetConfig+0x442>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d02b      	beq.n	8004354 <UART_SetConfig+0x43c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b06      	cmp	r3, #6
 8004302:	d024      	beq.n	800434e <UART_SetConfig+0x436>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b07      	cmp	r3, #7
 800430a:	d01d      	beq.n	8004348 <UART_SetConfig+0x430>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2b08      	cmp	r3, #8
 8004312:	d016      	beq.n	8004342 <UART_SetConfig+0x42a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b09      	cmp	r3, #9
 800431a:	d00f      	beq.n	800433c <UART_SetConfig+0x424>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	2b0a      	cmp	r3, #10
 8004322:	d008      	beq.n	8004336 <UART_SetConfig+0x41e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b0b      	cmp	r3, #11
 800432a:	d101      	bne.n	8004330 <UART_SetConfig+0x418>
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	e022      	b.n	8004376 <UART_SetConfig+0x45e>
 8004330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004334:	e01f      	b.n	8004376 <UART_SetConfig+0x45e>
 8004336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800433a:	e01c      	b.n	8004376 <UART_SetConfig+0x45e>
 800433c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004340:	e019      	b.n	8004376 <UART_SetConfig+0x45e>
 8004342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004346:	e016      	b.n	8004376 <UART_SetConfig+0x45e>
 8004348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800434c:	e013      	b.n	8004376 <UART_SetConfig+0x45e>
 800434e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004352:	e010      	b.n	8004376 <UART_SetConfig+0x45e>
 8004354:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004358:	e00d      	b.n	8004376 <UART_SetConfig+0x45e>
 800435a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800435e:	e00a      	b.n	8004376 <UART_SetConfig+0x45e>
 8004360:	f241 5355 	movw	r3, #5461	; 0x1555
 8004364:	e007      	b.n	8004376 <UART_SetConfig+0x45e>
 8004366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436a:	e004      	b.n	8004376 <UART_SetConfig+0x45e>
 800436c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004370:	e001      	b.n	8004376 <UART_SetConfig+0x45e>
 8004372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004376:	617b      	str	r3, [r7, #20]
        break;
 8004378:	e002      	b.n	8004380 <UART_SetConfig+0x468>
      default:
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	76fb      	strb	r3, [r7, #27]
        break;
 800437e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 85ee 	beq.w	8004f64 <UART_SetConfig+0x104c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	441a      	add	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	d805      	bhi.n	80043a4 <UART_SetConfig+0x48c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d203      	bcs.n	80043ac <UART_SetConfig+0x494>
      {
        ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	76fb      	strb	r3, [r7, #27]
 80043a8:	f000 bddc 	b.w	8004f64 <UART_SetConfig+0x104c>
      }
      else
      {
        switch (clocksource)
 80043ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	f200 826a 	bhi.w	800488a <UART_SetConfig+0x972>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0x4a4>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	0800488b 	.word	0x0800488b
 80043c4:	0800451d 	.word	0x0800451d
 80043c8:	0800488b 	.word	0x0800488b
 80043cc:	0800460d 	.word	0x0800460d
 80043d0:	0800488b 	.word	0x0800488b
 80043d4:	0800488b 	.word	0x0800488b
 80043d8:	0800488b 	.word	0x0800488b
 80043dc:	08004737 	.word	0x08004737
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7fe fd40 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 80043e4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d06d      	beq.n	80044d2 <UART_SetConfig+0x5ba>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d064      	beq.n	80044c8 <UART_SetConfig+0x5b0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b02      	cmp	r3, #2
 8004404:	d055      	beq.n	80044b2 <UART_SetConfig+0x59a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b03      	cmp	r3, #3
 800440c:	d04c      	beq.n	80044a8 <UART_SetConfig+0x590>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2b04      	cmp	r3, #4
 8004414:	d043      	beq.n	800449e <UART_SetConfig+0x586>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b05      	cmp	r3, #5
 800441c:	d03a      	beq.n	8004494 <UART_SetConfig+0x57c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b06      	cmp	r3, #6
 8004424:	d031      	beq.n	800448a <UART_SetConfig+0x572>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b07      	cmp	r3, #7
 800442c:	d028      	beq.n	8004480 <UART_SetConfig+0x568>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b08      	cmp	r3, #8
 8004434:	d01f      	beq.n	8004476 <UART_SetConfig+0x55e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b09      	cmp	r3, #9
 800443c:	d016      	beq.n	800446c <UART_SetConfig+0x554>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b0a      	cmp	r3, #10
 8004444:	d00d      	beq.n	8004462 <UART_SetConfig+0x54a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b0b      	cmp	r3, #11
 800444c:	d104      	bne.n	8004458 <UART_SetConfig+0x540>
 800444e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004452:	f04f 0400 	mov.w	r4, #0
 8004456:	e040      	b.n	80044da <UART_SetConfig+0x5c2>
 8004458:	f04f 0301 	mov.w	r3, #1
 800445c:	f04f 0400 	mov.w	r4, #0
 8004460:	e03b      	b.n	80044da <UART_SetConfig+0x5c2>
 8004462:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004466:	f04f 0400 	mov.w	r4, #0
 800446a:	e036      	b.n	80044da <UART_SetConfig+0x5c2>
 800446c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004470:	f04f 0400 	mov.w	r4, #0
 8004474:	e031      	b.n	80044da <UART_SetConfig+0x5c2>
 8004476:	f04f 0320 	mov.w	r3, #32
 800447a:	f04f 0400 	mov.w	r4, #0
 800447e:	e02c      	b.n	80044da <UART_SetConfig+0x5c2>
 8004480:	f04f 0310 	mov.w	r3, #16
 8004484:	f04f 0400 	mov.w	r4, #0
 8004488:	e027      	b.n	80044da <UART_SetConfig+0x5c2>
 800448a:	f04f 030c 	mov.w	r3, #12
 800448e:	f04f 0400 	mov.w	r4, #0
 8004492:	e022      	b.n	80044da <UART_SetConfig+0x5c2>
 8004494:	f04f 030a 	mov.w	r3, #10
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	e01d      	b.n	80044da <UART_SetConfig+0x5c2>
 800449e:	f04f 0308 	mov.w	r3, #8
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	e018      	b.n	80044da <UART_SetConfig+0x5c2>
 80044a8:	f04f 0306 	mov.w	r3, #6
 80044ac:	f04f 0400 	mov.w	r4, #0
 80044b0:	e013      	b.n	80044da <UART_SetConfig+0x5c2>
 80044b2:	f04f 0304 	mov.w	r3, #4
 80044b6:	f04f 0400 	mov.w	r4, #0
 80044ba:	e00e      	b.n	80044da <UART_SetConfig+0x5c2>
 80044bc:	003d0900 	.word	0x003d0900
 80044c0:	007a1200 	.word	0x007a1200
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	f04f 0302 	mov.w	r3, #2
 80044cc:	f04f 0400 	mov.w	r4, #0
 80044d0:	e003      	b.n	80044da <UART_SetConfig+0x5c2>
 80044d2:	f04f 0301 	mov.w	r3, #1
 80044d6:	f04f 0400 	mov.w	r4, #0
 80044da:	461a      	mov	r2, r3
 80044dc:	4623      	mov	r3, r4
 80044de:	f7fc fa71 	bl	80009c4 <__aeabi_uldivmod>
 80044e2:	4603      	mov	r3, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80044ea:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80044ee:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	f04f 0400 	mov.w	r4, #0
 80044fc:	eb18 0003 	adds.w	r0, r8, r3
 8004500:	eb49 0104 	adc.w	r1, r9, r4
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fc fa58 	bl	80009c4 <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	61fb      	str	r3, [r7, #28]
            break;
 800451a:	e1b9      	b.n	8004890 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d059      	beq.n	80045d8 <UART_SetConfig+0x6c0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	2b01      	cmp	r3, #1
 800452a:	d051      	beq.n	80045d0 <UART_SetConfig+0x6b8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2b02      	cmp	r3, #2
 8004532:	d049      	beq.n	80045c8 <UART_SetConfig+0x6b0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	2b03      	cmp	r3, #3
 800453a:	d042      	beq.n	80045c2 <UART_SetConfig+0x6aa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	2b04      	cmp	r3, #4
 8004542:	d03a      	beq.n	80045ba <UART_SetConfig+0x6a2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b05      	cmp	r3, #5
 800454a:	d032      	beq.n	80045b2 <UART_SetConfig+0x69a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	2b06      	cmp	r3, #6
 8004552:	d02b      	beq.n	80045ac <UART_SetConfig+0x694>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	2b07      	cmp	r3, #7
 800455a:	d023      	beq.n	80045a4 <UART_SetConfig+0x68c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b08      	cmp	r3, #8
 8004562:	d01b      	beq.n	800459c <UART_SetConfig+0x684>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b09      	cmp	r3, #9
 800456a:	d013      	beq.n	8004594 <UART_SetConfig+0x67c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b0a      	cmp	r3, #10
 8004572:	d00b      	beq.n	800458c <UART_SetConfig+0x674>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b0b      	cmp	r3, #11
 800457a:	d103      	bne.n	8004584 <UART_SetConfig+0x66c>
 800457c:	4ba8      	ldr	r3, [pc, #672]	; (8004820 <UART_SetConfig+0x908>)
 800457e:	f04f 0400 	mov.w	r4, #0
 8004582:	e02c      	b.n	80045de <UART_SetConfig+0x6c6>
 8004584:	4ba7      	ldr	r3, [pc, #668]	; (8004824 <UART_SetConfig+0x90c>)
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	e028      	b.n	80045de <UART_SetConfig+0x6c6>
 800458c:	4ba6      	ldr	r3, [pc, #664]	; (8004828 <UART_SetConfig+0x910>)
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	e024      	b.n	80045de <UART_SetConfig+0x6c6>
 8004594:	4ba5      	ldr	r3, [pc, #660]	; (800482c <UART_SetConfig+0x914>)
 8004596:	f04f 0400 	mov.w	r4, #0
 800459a:	e020      	b.n	80045de <UART_SetConfig+0x6c6>
 800459c:	4ba4      	ldr	r3, [pc, #656]	; (8004830 <UART_SetConfig+0x918>)
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	e01c      	b.n	80045de <UART_SetConfig+0x6c6>
 80045a4:	4ba3      	ldr	r3, [pc, #652]	; (8004834 <UART_SetConfig+0x91c>)
 80045a6:	f04f 0400 	mov.w	r4, #0
 80045aa:	e018      	b.n	80045de <UART_SetConfig+0x6c6>
 80045ac:	a498      	add	r4, pc, #608	; (adr r4, 8004810 <UART_SetConfig+0x8f8>)
 80045ae:	cc18      	ldmia	r4, {r3, r4}
 80045b0:	e015      	b.n	80045de <UART_SetConfig+0x6c6>
 80045b2:	4ba1      	ldr	r3, [pc, #644]	; (8004838 <UART_SetConfig+0x920>)
 80045b4:	f04f 0400 	mov.w	r4, #0
 80045b8:	e011      	b.n	80045de <UART_SetConfig+0x6c6>
 80045ba:	4ba0      	ldr	r3, [pc, #640]	; (800483c <UART_SetConfig+0x924>)
 80045bc:	f04f 0400 	mov.w	r4, #0
 80045c0:	e00d      	b.n	80045de <UART_SetConfig+0x6c6>
 80045c2:	a495      	add	r4, pc, #596	; (adr r4, 8004818 <UART_SetConfig+0x900>)
 80045c4:	cc18      	ldmia	r4, {r3, r4}
 80045c6:	e00a      	b.n	80045de <UART_SetConfig+0x6c6>
 80045c8:	4b9d      	ldr	r3, [pc, #628]	; (8004840 <UART_SetConfig+0x928>)
 80045ca:	f04f 0400 	mov.w	r4, #0
 80045ce:	e006      	b.n	80045de <UART_SetConfig+0x6c6>
 80045d0:	4b9c      	ldr	r3, [pc, #624]	; (8004844 <UART_SetConfig+0x92c>)
 80045d2:	f04f 0400 	mov.w	r4, #0
 80045d6:	e002      	b.n	80045de <UART_SetConfig+0x6c6>
 80045d8:	4b92      	ldr	r3, [pc, #584]	; (8004824 <UART_SetConfig+0x90c>)
 80045da:	f04f 0400 	mov.w	r4, #0
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6852      	ldr	r2, [r2, #4]
 80045e2:	0852      	lsrs	r2, r2, #1
 80045e4:	4611      	mov	r1, r2
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	185d      	adds	r5, r3, r1
 80045ec:	eb44 0602 	adc.w	r6, r4, r2
 80045f0:	4628      	mov	r0, r5
 80045f2:	4631      	mov	r1, r6
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	f7fc f9e0 	bl	80009c4 <__aeabi_uldivmod>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	61fb      	str	r3, [r7, #28]
            break;
 800460a:	e141      	b.n	8004890 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800460c:	f7fe fbac 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8004610:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4618      	mov	r0, r3
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d067      	beq.n	80046f2 <UART_SetConfig+0x7da>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	2b01      	cmp	r3, #1
 8004628:	d05e      	beq.n	80046e8 <UART_SetConfig+0x7d0>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b02      	cmp	r3, #2
 8004630:	d055      	beq.n	80046de <UART_SetConfig+0x7c6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b03      	cmp	r3, #3
 8004638:	d04c      	beq.n	80046d4 <UART_SetConfig+0x7bc>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b04      	cmp	r3, #4
 8004640:	d043      	beq.n	80046ca <UART_SetConfig+0x7b2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b05      	cmp	r3, #5
 8004648:	d03a      	beq.n	80046c0 <UART_SetConfig+0x7a8>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b06      	cmp	r3, #6
 8004650:	d031      	beq.n	80046b6 <UART_SetConfig+0x79e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b07      	cmp	r3, #7
 8004658:	d028      	beq.n	80046ac <UART_SetConfig+0x794>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b08      	cmp	r3, #8
 8004660:	d01f      	beq.n	80046a2 <UART_SetConfig+0x78a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2b09      	cmp	r3, #9
 8004668:	d016      	beq.n	8004698 <UART_SetConfig+0x780>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b0a      	cmp	r3, #10
 8004670:	d00d      	beq.n	800468e <UART_SetConfig+0x776>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	2b0b      	cmp	r3, #11
 8004678:	d104      	bne.n	8004684 <UART_SetConfig+0x76c>
 800467a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467e:	f04f 0400 	mov.w	r4, #0
 8004682:	e03a      	b.n	80046fa <UART_SetConfig+0x7e2>
 8004684:	f04f 0301 	mov.w	r3, #1
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	e035      	b.n	80046fa <UART_SetConfig+0x7e2>
 800468e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	e030      	b.n	80046fa <UART_SetConfig+0x7e2>
 8004698:	f04f 0340 	mov.w	r3, #64	; 0x40
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	e02b      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046a2:	f04f 0320 	mov.w	r3, #32
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	e026      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046ac:	f04f 0310 	mov.w	r3, #16
 80046b0:	f04f 0400 	mov.w	r4, #0
 80046b4:	e021      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046b6:	f04f 030c 	mov.w	r3, #12
 80046ba:	f04f 0400 	mov.w	r4, #0
 80046be:	e01c      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046c0:	f04f 030a 	mov.w	r3, #10
 80046c4:	f04f 0400 	mov.w	r4, #0
 80046c8:	e017      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046ca:	f04f 0308 	mov.w	r3, #8
 80046ce:	f04f 0400 	mov.w	r4, #0
 80046d2:	e012      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046d4:	f04f 0306 	mov.w	r3, #6
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	e00d      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046de:	f04f 0304 	mov.w	r3, #4
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	e008      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046e8:	f04f 0302 	mov.w	r3, #2
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	e003      	b.n	80046fa <UART_SetConfig+0x7e2>
 80046f2:	f04f 0301 	mov.w	r3, #1
 80046f6:	f04f 0400 	mov.w	r4, #0
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	f7fc f961 	bl	80009c4 <__aeabi_uldivmod>
 8004702:	4603      	mov	r3, r0
 8004704:	460c      	mov	r4, r1
 8004706:	0226      	lsls	r6, r4, #8
 8004708:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 800470c:	021d      	lsls	r5, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	18e8      	adds	r0, r5, r3
 800471a:	eb46 0104 	adc.w	r1, r6, r4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	461a      	mov	r2, r3
 8004728:	4623      	mov	r3, r4
 800472a:	f7fc f94b 	bl	80009c4 <__aeabi_uldivmod>
 800472e:	4603      	mov	r3, r0
 8004730:	460c      	mov	r4, r1
 8004732:	61fb      	str	r3, [r7, #28]
            break;
 8004734:	e0ac      	b.n	8004890 <UART_SetConfig+0x978>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 808a 	beq.w	8004854 <UART_SetConfig+0x93c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b01      	cmp	r3, #1
 8004746:	d05b      	beq.n	8004800 <UART_SetConfig+0x8e8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b02      	cmp	r3, #2
 800474e:	d052      	beq.n	80047f6 <UART_SetConfig+0x8de>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b03      	cmp	r3, #3
 8004756:	d04a      	beq.n	80047ee <UART_SetConfig+0x8d6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b04      	cmp	r3, #4
 800475e:	d041      	beq.n	80047e4 <UART_SetConfig+0x8cc>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b05      	cmp	r3, #5
 8004766:	d039      	beq.n	80047dc <UART_SetConfig+0x8c4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b06      	cmp	r3, #6
 800476e:	d031      	beq.n	80047d4 <UART_SetConfig+0x8bc>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b07      	cmp	r3, #7
 8004776:	d028      	beq.n	80047ca <UART_SetConfig+0x8b2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b08      	cmp	r3, #8
 800477e:	d01f      	beq.n	80047c0 <UART_SetConfig+0x8a8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b09      	cmp	r3, #9
 8004786:	d016      	beq.n	80047b6 <UART_SetConfig+0x89e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	2b0a      	cmp	r3, #10
 800478e:	d00d      	beq.n	80047ac <UART_SetConfig+0x894>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	2b0b      	cmp	r3, #11
 8004796:	d104      	bne.n	80047a2 <UART_SetConfig+0x88a>
 8004798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479c:	f04f 0400 	mov.w	r4, #0
 80047a0:	e05c      	b.n	800485c <UART_SetConfig+0x944>
 80047a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80047a6:	f04f 0400 	mov.w	r4, #0
 80047aa:	e057      	b.n	800485c <UART_SetConfig+0x944>
 80047ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	e052      	b.n	800485c <UART_SetConfig+0x944>
 80047b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	e04d      	b.n	800485c <UART_SetConfig+0x944>
 80047c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80047c4:	f04f 0400 	mov.w	r4, #0
 80047c8:	e048      	b.n	800485c <UART_SetConfig+0x944>
 80047ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047ce:	f04f 0400 	mov.w	r4, #0
 80047d2:	e043      	b.n	800485c <UART_SetConfig+0x944>
 80047d4:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <UART_SetConfig+0x930>)
 80047d6:	f04f 0400 	mov.w	r4, #0
 80047da:	e03f      	b.n	800485c <UART_SetConfig+0x944>
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <UART_SetConfig+0x934>)
 80047de:	f04f 0400 	mov.w	r4, #0
 80047e2:	e03b      	b.n	800485c <UART_SetConfig+0x944>
 80047e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047e8:	f04f 0400 	mov.w	r4, #0
 80047ec:	e036      	b.n	800485c <UART_SetConfig+0x944>
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <UART_SetConfig+0x938>)
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	e032      	b.n	800485c <UART_SetConfig+0x944>
 80047f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047fa:	f04f 0400 	mov.w	r4, #0
 80047fe:	e02d      	b.n	800485c <UART_SetConfig+0x944>
 8004800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004804:	f04f 0400 	mov.w	r4, #0
 8004808:	e028      	b.n	800485c <UART_SetConfig+0x944>
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w
 8004810:	14585500 	.word	0x14585500
 8004814:	00000000 	.word	0x00000000
 8004818:	28b0aa00 	.word	0x28b0aa00
 800481c:	00000000 	.word	0x00000000
 8004820:	00f42400 	.word	0x00f42400
 8004824:	f4240000 	.word	0xf4240000
 8004828:	01e84800 	.word	0x01e84800
 800482c:	03d09000 	.word	0x03d09000
 8004830:	07a12000 	.word	0x07a12000
 8004834:	0f424000 	.word	0x0f424000
 8004838:	186a0000 	.word	0x186a0000
 800483c:	1e848000 	.word	0x1e848000
 8004840:	3d090000 	.word	0x3d090000
 8004844:	7a120000 	.word	0x7a120000
 8004848:	000aaa00 	.word	0x000aaa00
 800484c:	000ccc00 	.word	0x000ccc00
 8004850:	00155500 	.word	0x00155500
 8004854:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004858:	f04f 0400 	mov.w	r4, #0
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6852      	ldr	r2, [r2, #4]
 8004860:	0852      	lsrs	r2, r2, #1
 8004862:	4611      	mov	r1, r2
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	185d      	adds	r5, r3, r1
 800486a:	eb44 0602 	adc.w	r6, r4, r2
 800486e:	4628      	mov	r0, r5
 8004870:	4631      	mov	r1, r6
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f04f 0400 	mov.w	r4, #0
 800487a:	461a      	mov	r2, r3
 800487c:	4623      	mov	r3, r4
 800487e:	f7fc f8a1 	bl	80009c4 <__aeabi_uldivmod>
 8004882:	4603      	mov	r3, r0
 8004884:	460c      	mov	r4, r1
 8004886:	61fb      	str	r3, [r7, #28]
            break;
 8004888:	e002      	b.n	8004890 <UART_SetConfig+0x978>
          default:
            ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	76fb      	strb	r3, [r7, #27]
            break;
 800488e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d308      	bcc.n	80048aa <UART_SetConfig+0x992>
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d204      	bcs.n	80048aa <UART_SetConfig+0x992>
        {
          huart->Instance->BRR = usartdiv;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	60da      	str	r2, [r3, #12]
 80048a8:	e35c      	b.n	8004f64 <UART_SetConfig+0x104c>
        }
        else
        {
          ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e359      	b.n	8004f64 <UART_SetConfig+0x104c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	f040 81a7 	bne.w	8004c0a <UART_SetConfig+0xcf2>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80048bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c0:	3b01      	subs	r3, #1
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	f200 8181 	bhi.w	8004bca <UART_SetConfig+0xcb2>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <UART_SetConfig+0x9b8>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	080049a9 	.word	0x080049a9
 80048d8:	08004bcb 	.word	0x08004bcb
 80048dc:	08004a51 	.word	0x08004a51
 80048e0:	08004bcb 	.word	0x08004bcb
 80048e4:	08004bcb 	.word	0x08004bcb
 80048e8:	08004bcb 	.word	0x08004bcb
 80048ec:	08004b09 	.word	0x08004b09
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f0:	f7fe face 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 80048f4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d044      	beq.n	8004988 <UART_SetConfig+0xa70>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b01      	cmp	r3, #1
 8004904:	d03e      	beq.n	8004984 <UART_SetConfig+0xa6c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b02      	cmp	r3, #2
 800490c:	d038      	beq.n	8004980 <UART_SetConfig+0xa68>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2b03      	cmp	r3, #3
 8004914:	d032      	beq.n	800497c <UART_SetConfig+0xa64>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b04      	cmp	r3, #4
 800491c:	d02c      	beq.n	8004978 <UART_SetConfig+0xa60>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b05      	cmp	r3, #5
 8004924:	d026      	beq.n	8004974 <UART_SetConfig+0xa5c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	2b06      	cmp	r3, #6
 800492c:	d020      	beq.n	8004970 <UART_SetConfig+0xa58>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b07      	cmp	r3, #7
 8004934:	d01a      	beq.n	800496c <UART_SetConfig+0xa54>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b08      	cmp	r3, #8
 800493c:	d014      	beq.n	8004968 <UART_SetConfig+0xa50>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b09      	cmp	r3, #9
 8004944:	d00e      	beq.n	8004964 <UART_SetConfig+0xa4c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b0a      	cmp	r3, #10
 800494c:	d008      	beq.n	8004960 <UART_SetConfig+0xa48>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b0b      	cmp	r3, #11
 8004954:	d102      	bne.n	800495c <UART_SetConfig+0xa44>
 8004956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800495a:	e016      	b.n	800498a <UART_SetConfig+0xa72>
 800495c:	2301      	movs	r3, #1
 800495e:	e014      	b.n	800498a <UART_SetConfig+0xa72>
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	e012      	b.n	800498a <UART_SetConfig+0xa72>
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	e010      	b.n	800498a <UART_SetConfig+0xa72>
 8004968:	2320      	movs	r3, #32
 800496a:	e00e      	b.n	800498a <UART_SetConfig+0xa72>
 800496c:	2310      	movs	r3, #16
 800496e:	e00c      	b.n	800498a <UART_SetConfig+0xa72>
 8004970:	230c      	movs	r3, #12
 8004972:	e00a      	b.n	800498a <UART_SetConfig+0xa72>
 8004974:	230a      	movs	r3, #10
 8004976:	e008      	b.n	800498a <UART_SetConfig+0xa72>
 8004978:	2308      	movs	r3, #8
 800497a:	e006      	b.n	800498a <UART_SetConfig+0xa72>
 800497c:	2306      	movs	r3, #6
 800497e:	e004      	b.n	800498a <UART_SetConfig+0xa72>
 8004980:	2304      	movs	r3, #4
 8004982:	e002      	b.n	800498a <UART_SetConfig+0xa72>
 8004984:	2302      	movs	r3, #2
 8004986:	e000      	b.n	800498a <UART_SetConfig+0xa72>
 8004988:	2301      	movs	r3, #1
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	005a      	lsls	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	61fb      	str	r3, [r7, #28]
        break;
 80049a6:	e113      	b.n	8004bd0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d043      	beq.n	8004a38 <UART_SetConfig+0xb20>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d03d      	beq.n	8004a34 <UART_SetConfig+0xb1c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d037      	beq.n	8004a30 <UART_SetConfig+0xb18>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d031      	beq.n	8004a2c <UART_SetConfig+0xb14>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d02b      	beq.n	8004a28 <UART_SetConfig+0xb10>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	d025      	beq.n	8004a24 <UART_SetConfig+0xb0c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d01f      	beq.n	8004a20 <UART_SetConfig+0xb08>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d019      	beq.n	8004a1c <UART_SetConfig+0xb04>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d013      	beq.n	8004a18 <UART_SetConfig+0xb00>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	2b09      	cmp	r3, #9
 80049f6:	d00d      	beq.n	8004a14 <UART_SetConfig+0xafc>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2b0a      	cmp	r3, #10
 80049fe:	d007      	beq.n	8004a10 <UART_SetConfig+0xaf8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2b0b      	cmp	r3, #11
 8004a06:	d101      	bne.n	8004a0c <UART_SetConfig+0xaf4>
 8004a08:	4b8c      	ldr	r3, [pc, #560]	; (8004c3c <UART_SetConfig+0xd24>)
 8004a0a:	e016      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a0c:	4b8c      	ldr	r3, [pc, #560]	; (8004c40 <UART_SetConfig+0xd28>)
 8004a0e:	e014      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a10:	4b8c      	ldr	r3, [pc, #560]	; (8004c44 <UART_SetConfig+0xd2c>)
 8004a12:	e012      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a14:	4b8c      	ldr	r3, [pc, #560]	; (8004c48 <UART_SetConfig+0xd30>)
 8004a16:	e010      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a18:	4b8c      	ldr	r3, [pc, #560]	; (8004c4c <UART_SetConfig+0xd34>)
 8004a1a:	e00e      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a1c:	4b8c      	ldr	r3, [pc, #560]	; (8004c50 <UART_SetConfig+0xd38>)
 8004a1e:	e00c      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a20:	4b8c      	ldr	r3, [pc, #560]	; (8004c54 <UART_SetConfig+0xd3c>)
 8004a22:	e00a      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a24:	4b8c      	ldr	r3, [pc, #560]	; (8004c58 <UART_SetConfig+0xd40>)
 8004a26:	e008      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a28:	4b8c      	ldr	r3, [pc, #560]	; (8004c5c <UART_SetConfig+0xd44>)
 8004a2a:	e006      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a2c:	4b8c      	ldr	r3, [pc, #560]	; (8004c60 <UART_SetConfig+0xd48>)
 8004a2e:	e004      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a30:	4b8c      	ldr	r3, [pc, #560]	; (8004c64 <UART_SetConfig+0xd4c>)
 8004a32:	e002      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a34:	4b8c      	ldr	r3, [pc, #560]	; (8004c68 <UART_SetConfig+0xd50>)
 8004a36:	e000      	b.n	8004a3a <UART_SetConfig+0xb22>
 8004a38:	4b81      	ldr	r3, [pc, #516]	; (8004c40 <UART_SetConfig+0xd28>)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6852      	ldr	r2, [r2, #4]
 8004a3e:	0852      	lsrs	r2, r2, #1
 8004a40:	441a      	add	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
        break;
 8004a4e:	e0bf      	b.n	8004bd0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a50:	f7fe f98a 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8004a54:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <UART_SetConfig+0xbd0>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d03e      	beq.n	8004ae4 <UART_SetConfig+0xbcc>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d038      	beq.n	8004ae0 <UART_SetConfig+0xbc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d032      	beq.n	8004adc <UART_SetConfig+0xbc4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d02c      	beq.n	8004ad8 <UART_SetConfig+0xbc0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d026      	beq.n	8004ad4 <UART_SetConfig+0xbbc>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d020      	beq.n	8004ad0 <UART_SetConfig+0xbb8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b07      	cmp	r3, #7
 8004a94:	d01a      	beq.n	8004acc <UART_SetConfig+0xbb4>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d014      	beq.n	8004ac8 <UART_SetConfig+0xbb0>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b09      	cmp	r3, #9
 8004aa4:	d00e      	beq.n	8004ac4 <UART_SetConfig+0xbac>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b0a      	cmp	r3, #10
 8004aac:	d008      	beq.n	8004ac0 <UART_SetConfig+0xba8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b0b      	cmp	r3, #11
 8004ab4:	d102      	bne.n	8004abc <UART_SetConfig+0xba4>
 8004ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aba:	e016      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e014      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	e012      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ac4:	2340      	movs	r3, #64	; 0x40
 8004ac6:	e010      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ac8:	2320      	movs	r3, #32
 8004aca:	e00e      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004acc:	2310      	movs	r3, #16
 8004ace:	e00c      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	e00a      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ad4:	230a      	movs	r3, #10
 8004ad6:	e008      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	e006      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004adc:	2306      	movs	r3, #6
 8004ade:	e004      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	e002      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e000      	b.n	8004aea <UART_SetConfig+0xbd2>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	005a      	lsls	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	441a      	add	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	61fb      	str	r3, [r7, #28]
        break;
 8004b06:	e063      	b.n	8004bd0 <UART_SetConfig+0xcb8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d04f      	beq.n	8004bb0 <UART_SetConfig+0xc98>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d048      	beq.n	8004baa <UART_SetConfig+0xc92>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d041      	beq.n	8004ba4 <UART_SetConfig+0xc8c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d03a      	beq.n	8004b9e <UART_SetConfig+0xc86>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d033      	beq.n	8004b98 <UART_SetConfig+0xc80>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d02c      	beq.n	8004b92 <UART_SetConfig+0xc7a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b06      	cmp	r3, #6
 8004b3e:	d025      	beq.n	8004b8c <UART_SetConfig+0xc74>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	d01e      	beq.n	8004b86 <UART_SetConfig+0xc6e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d017      	beq.n	8004b80 <UART_SetConfig+0xc68>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d010      	beq.n	8004b7a <UART_SetConfig+0xc62>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b0a      	cmp	r3, #10
 8004b5e:	d009      	beq.n	8004b74 <UART_SetConfig+0xc5c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b0b      	cmp	r3, #11
 8004b66:	d102      	bne.n	8004b6e <UART_SetConfig+0xc56>
 8004b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6c:	e022      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b72:	e01f      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b78:	e01c      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7e:	e019      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b84:	e016      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8a:	e013      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b8c:	f241 5354 	movw	r3, #5460	; 0x1554
 8004b90:	e010      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b92:	f641 1398 	movw	r3, #6552	; 0x1998
 8004b96:	e00d      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b9c:	e00a      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004b9e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004ba2:	e007      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba8:	e004      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bae:	e001      	b.n	8004bb4 <UART_SetConfig+0xc9c>
 8004bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6852      	ldr	r2, [r2, #4]
 8004bb8:	0852      	lsrs	r2, r2, #1
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	61fb      	str	r3, [r7, #28]
        break;
 8004bc8:	e002      	b.n	8004bd0 <UART_SetConfig+0xcb8>
      default:
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	76fb      	strb	r3, [r7, #27]
        break;
 8004bce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d916      	bls.n	8004c04 <UART_SetConfig+0xcec>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d212      	bcs.n	8004c04 <UART_SetConfig+0xcec>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f023 030f 	bic.w	r3, r3, #15
 8004be6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	89fa      	ldrh	r2, [r7, #14]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e1af      	b.n	8004f64 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	76fb      	strb	r3, [r7, #27]
 8004c08:	e1ac      	b.n	8004f64 <UART_SetConfig+0x104c>
    }
  }
  else
  {
    switch (clocksource)
 8004c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	f200 8196 	bhi.w	8004f42 <UART_SetConfig+0x102a>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <UART_SetConfig+0xd04>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c6d 	.word	0x08004c6d
 8004c20:	08004d23 	.word	0x08004d23
 8004c24:	08004f43 	.word	0x08004f43
 8004c28:	08004dcd 	.word	0x08004dcd
 8004c2c:	08004f43 	.word	0x08004f43
 8004c30:	08004f43 	.word	0x08004f43
 8004c34:	08004f43 	.word	0x08004f43
 8004c38:	08004e83 	.word	0x08004e83
 8004c3c:	0001e848 	.word	0x0001e848
 8004c40:	01e84800 	.word	0x01e84800
 8004c44:	0003d090 	.word	0x0003d090
 8004c48:	0007a120 	.word	0x0007a120
 8004c4c:	000f4240 	.word	0x000f4240
 8004c50:	001e8480 	.word	0x001e8480
 8004c54:	0028b0aa 	.word	0x0028b0aa
 8004c58:	0030d400 	.word	0x0030d400
 8004c5c:	003d0900 	.word	0x003d0900
 8004c60:	00516154 	.word	0x00516154
 8004c64:	007a1200 	.word	0x007a1200
 8004c68:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c6c:	f7fe f910 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8004c70:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d044      	beq.n	8004d04 <UART_SetConfig+0xdec>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d03e      	beq.n	8004d00 <UART_SetConfig+0xde8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d038      	beq.n	8004cfc <UART_SetConfig+0xde4>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d032      	beq.n	8004cf8 <UART_SetConfig+0xde0>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d02c      	beq.n	8004cf4 <UART_SetConfig+0xddc>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d026      	beq.n	8004cf0 <UART_SetConfig+0xdd8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d020      	beq.n	8004cec <UART_SetConfig+0xdd4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b07      	cmp	r3, #7
 8004cb0:	d01a      	beq.n	8004ce8 <UART_SetConfig+0xdd0>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d014      	beq.n	8004ce4 <UART_SetConfig+0xdcc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d00e      	beq.n	8004ce0 <UART_SetConfig+0xdc8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b0a      	cmp	r3, #10
 8004cc8:	d008      	beq.n	8004cdc <UART_SetConfig+0xdc4>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b0b      	cmp	r3, #11
 8004cd0:	d102      	bne.n	8004cd8 <UART_SetConfig+0xdc0>
 8004cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cd6:	e016      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e014      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	e012      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004ce0:	2340      	movs	r3, #64	; 0x40
 8004ce2:	e010      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	e00e      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	e00c      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cec:	230c      	movs	r3, #12
 8004cee:	e00a      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cf0:	230a      	movs	r3, #10
 8004cf2:	e008      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	e006      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cf8:	2306      	movs	r3, #6
 8004cfa:	e004      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	e002      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e000      	b.n	8004d06 <UART_SetConfig+0xdee>
 8004d04:	2301      	movs	r3, #1
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	441a      	add	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e112      	b.n	8004f48 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d044      	beq.n	8004db4 <UART_SetConfig+0xe9c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d03e      	beq.n	8004db0 <UART_SetConfig+0xe98>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d038      	beq.n	8004dac <UART_SetConfig+0xe94>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d032      	beq.n	8004da8 <UART_SetConfig+0xe90>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d02c      	beq.n	8004da4 <UART_SetConfig+0xe8c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d026      	beq.n	8004da0 <UART_SetConfig+0xe88>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d020      	beq.n	8004d9c <UART_SetConfig+0xe84>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b07      	cmp	r3, #7
 8004d60:	d01a      	beq.n	8004d98 <UART_SetConfig+0xe80>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d014      	beq.n	8004d94 <UART_SetConfig+0xe7c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b09      	cmp	r3, #9
 8004d70:	d00e      	beq.n	8004d90 <UART_SetConfig+0xe78>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	2b0a      	cmp	r3, #10
 8004d78:	d008      	beq.n	8004d8c <UART_SetConfig+0xe74>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b0b      	cmp	r3, #11
 8004d80:	d102      	bne.n	8004d88 <UART_SetConfig+0xe70>
 8004d82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d86:	e016      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004d88:	4b80      	ldr	r3, [pc, #512]	; (8004f8c <UART_SetConfig+0x1074>)
 8004d8a:	e014      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004d8c:	4b80      	ldr	r3, [pc, #512]	; (8004f90 <UART_SetConfig+0x1078>)
 8004d8e:	e012      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004d90:	4b80      	ldr	r3, [pc, #512]	; (8004f94 <UART_SetConfig+0x107c>)
 8004d92:	e010      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004d94:	4b80      	ldr	r3, [pc, #512]	; (8004f98 <UART_SetConfig+0x1080>)
 8004d96:	e00e      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004d98:	4b80      	ldr	r3, [pc, #512]	; (8004f9c <UART_SetConfig+0x1084>)
 8004d9a:	e00c      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004d9c:	4b80      	ldr	r3, [pc, #512]	; (8004fa0 <UART_SetConfig+0x1088>)
 8004d9e:	e00a      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004da0:	4b80      	ldr	r3, [pc, #512]	; (8004fa4 <UART_SetConfig+0x108c>)
 8004da2:	e008      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004da4:	4b80      	ldr	r3, [pc, #512]	; (8004fa8 <UART_SetConfig+0x1090>)
 8004da6:	e006      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004da8:	4b80      	ldr	r3, [pc, #512]	; (8004fac <UART_SetConfig+0x1094>)
 8004daa:	e004      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004dac:	4b80      	ldr	r3, [pc, #512]	; (8004fb0 <UART_SetConfig+0x1098>)
 8004dae:	e002      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004db0:	4b80      	ldr	r3, [pc, #512]	; (8004fb4 <UART_SetConfig+0x109c>)
 8004db2:	e000      	b.n	8004db6 <UART_SetConfig+0xe9e>
 8004db4:	4b75      	ldr	r3, [pc, #468]	; (8004f8c <UART_SetConfig+0x1074>)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6852      	ldr	r2, [r2, #4]
 8004dba:	0852      	lsrs	r2, r2, #1
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	61fb      	str	r3, [r7, #28]
        break;
 8004dca:	e0bd      	b.n	8004f48 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dcc:	f7fd ffcc 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8004dd0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d044      	beq.n	8004e64 <UART_SetConfig+0xf4c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d03e      	beq.n	8004e60 <UART_SetConfig+0xf48>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d038      	beq.n	8004e5c <UART_SetConfig+0xf44>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d032      	beq.n	8004e58 <UART_SetConfig+0xf40>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d02c      	beq.n	8004e54 <UART_SetConfig+0xf3c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	d026      	beq.n	8004e50 <UART_SetConfig+0xf38>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d020      	beq.n	8004e4c <UART_SetConfig+0xf34>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b07      	cmp	r3, #7
 8004e10:	d01a      	beq.n	8004e48 <UART_SetConfig+0xf30>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d014      	beq.n	8004e44 <UART_SetConfig+0xf2c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b09      	cmp	r3, #9
 8004e20:	d00e      	beq.n	8004e40 <UART_SetConfig+0xf28>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b0a      	cmp	r3, #10
 8004e28:	d008      	beq.n	8004e3c <UART_SetConfig+0xf24>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b0b      	cmp	r3, #11
 8004e30:	d102      	bne.n	8004e38 <UART_SetConfig+0xf20>
 8004e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e36:	e016      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	e012      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e40:	2340      	movs	r3, #64	; 0x40
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e44:	2320      	movs	r3, #32
 8004e46:	e00e      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	e00c      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	e00a      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e50:	230a      	movs	r3, #10
 8004e52:	e008      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e54:	2308      	movs	r3, #8
 8004e56:	e006      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e58:	2306      	movs	r3, #6
 8004e5a:	e004      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	e002      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e000      	b.n	8004e66 <UART_SetConfig+0xf4e>
 8004e64:	2301      	movs	r3, #1
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	61fb      	str	r3, [r7, #28]
        break;
 8004e80:	e062      	b.n	8004f48 <UART_SetConfig+0x1030>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04e      	beq.n	8004f28 <UART_SetConfig+0x1010>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d047      	beq.n	8004f22 <UART_SetConfig+0x100a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d040      	beq.n	8004f1c <UART_SetConfig+0x1004>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d039      	beq.n	8004f16 <UART_SetConfig+0xffe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d032      	beq.n	8004f10 <UART_SetConfig+0xff8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d02b      	beq.n	8004f0a <UART_SetConfig+0xff2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d024      	beq.n	8004f04 <UART_SetConfig+0xfec>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b07      	cmp	r3, #7
 8004ec0:	d01d      	beq.n	8004efe <UART_SetConfig+0xfe6>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d016      	beq.n	8004ef8 <UART_SetConfig+0xfe0>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b09      	cmp	r3, #9
 8004ed0:	d00f      	beq.n	8004ef2 <UART_SetConfig+0xfda>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b0a      	cmp	r3, #10
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0xfd4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b0b      	cmp	r3, #11
 8004ee0:	d101      	bne.n	8004ee6 <UART_SetConfig+0xfce>
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	e022      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	e01f      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef0:	e01c      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef6:	e019      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efc:	e016      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f02:	e013      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f04:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004f08:	e010      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f0a:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004f0e:	e00d      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f14:	e00a      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f16:	f241 5355 	movw	r3, #5461	; 0x1555
 8004f1a:	e007      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f20:	e004      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f26:	e001      	b.n	8004f2c <UART_SetConfig+0x1014>
 8004f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6852      	ldr	r2, [r2, #4]
 8004f30:	0852      	lsrs	r2, r2, #1
 8004f32:	441a      	add	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	61fb      	str	r3, [r7, #28]
        break;
 8004f40:	e002      	b.n	8004f48 <UART_SetConfig+0x1030>
      default:
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	76fb      	strb	r3, [r7, #27]
        break;
 8004f46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b0f      	cmp	r3, #15
 8004f4c:	d908      	bls.n	8004f60 <UART_SetConfig+0x1048>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d204      	bcs.n	8004f60 <UART_SetConfig+0x1048>
    {
      huart->Instance->BRR = usartdiv;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	60da      	str	r2, [r3, #12]
 8004f5e:	e001      	b.n	8004f64 <UART_SetConfig+0x104c>
    }
    else
    {
      ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004f80:	7efb      	ldrb	r3, [r7, #27]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	372c      	adds	r7, #44	; 0x2c
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	0001e848 	.word	0x0001e848
 8004f94:	0003d090 	.word	0x0003d090
 8004f98:	0007a120 	.word	0x0007a120
 8004f9c:	000f4240 	.word	0x000f4240
 8004fa0:	00145855 	.word	0x00145855
 8004fa4:	00186a00 	.word	0x00186a00
 8004fa8:	001e8480 	.word	0x001e8480
 8004fac:	0028b0aa 	.word	0x0028b0aa
 8004fb0:	003d0900 	.word	0x003d0900
 8004fb4:	007a1200 	.word	0x007a1200

08004fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	6852      	ldr	r2, [r2, #4]
 8004fd6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	6852      	ldr	r2, [r2, #4]
 8004ff8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	6852      	ldr	r2, [r2, #4]
 800501a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	6852      	ldr	r2, [r2, #4]
 800503c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	6892      	ldr	r2, [r2, #8]
 800505e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	6892      	ldr	r2, [r2, #8]
 8005080:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01a      	beq.n	80050ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	6852      	ldr	r2, [r2, #4]
 80050a2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b6:	d10a      	bne.n	80050ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	6852      	ldr	r2, [r2, #4]
 80050c2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	6852      	ldr	r2, [r2, #4]
 80050e4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800510c:	f7fc faa4 	bl	8001658 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d10e      	bne.n	800513e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f82c 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e022      	b.n	8005184 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d10e      	bne.n	800516a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f816 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e00c      	b.n	8005184 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519c:	e062      	b.n	8005264 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d05e      	beq.n	8005264 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fc fa57 	bl	8001658 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d802      	bhi.n	80051bc <UART_WaitOnFlagUntilTimeout+0x30>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11d      	bne.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	6892      	ldr	r2, [r2, #8]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e045      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02e      	beq.n	8005264 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005214:	d126      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800521e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800522e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	6892      	ldr	r2, [r2, #8]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e00f      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	401a      	ands	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	429a      	cmp	r2, r3
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	429a      	cmp	r2, r3
 8005280:	d08d      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f7fe fe07 	bl	8003f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fe fde3 	bl	8003ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_UARTEx_DisableFifoMode+0x16>
 8005380:	2302      	movs	r3, #2
 8005382:	e027      	b.n	80053d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e02d      	b.n	8005454 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	f022 4160 	bic.w	r1, r2, #3758096384	; 0xe0000000
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f84f 	bl	80054d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005470:	2302      	movs	r3, #2
 8005472:	e02d      	b.n	80054d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	; 0x24
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	f022 6160 	bic.w	r1, r2, #234881024	; 0xe000000
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f811 	bl	80054d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80054e0:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <UARTEx_SetNbDataToProcess+0xc8>)
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054ea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80054ee:	4a2d      	ldr	r2, [pc, #180]	; (80055a4 <UARTEx_SetNbDataToProcess+0xcc>)
 80054f0:	f107 030c 	add.w	r3, r7, #12
 80054f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054f8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005500:	2b00      	cmp	r3, #0
 8005502:	d108      	bne.n	8005516 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005514:	e03d      	b.n	8005592 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800551a:	2308      	movs	r3, #8
 800551c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	0e5b      	lsrs	r3, r3, #25
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	0f5b      	lsrs	r3, r3, #29
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800553e:	7fbb      	ldrb	r3, [r7, #30]
 8005540:	7f3a      	ldrb	r2, [r7, #28]
 8005542:	f107 0120 	add.w	r1, r7, #32
 8005546:	440a      	add	r2, r1
 8005548:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	7f3a      	ldrb	r2, [r7, #28]
 8005552:	f107 0120 	add.w	r1, r7, #32
 8005556:	440a      	add	r2, r1
 8005558:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800555c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005568:	7ffb      	ldrb	r3, [r7, #31]
 800556a:	7f7a      	ldrb	r2, [r7, #29]
 800556c:	f107 0120 	add.w	r1, r7, #32
 8005570:	440a      	add	r2, r1
 8005572:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	7f7a      	ldrb	r2, [r7, #29]
 800557c:	f107 0120 	add.w	r1, r7, #32
 8005580:	440a      	add	r2, r1
 8005582:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005586:	fb93 f3f2 	sdiv	r3, r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005592:	bf00      	nop
 8005594:	3724      	adds	r7, #36	; 0x24
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	08007414 	.word	0x08007414
 80055a4:	0800741c 	.word	0x0800741c

080055a8 <UART_Send_Start>:

#define BUF_SIZE 4



void UART_Send_Start(){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
	char *message_buf = "start\n";
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <UART_Send_Start+0x28>)
 80055b0:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)message_buf, strlen(message_buf), 0xFFFF);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fa fde4 	bl	8000180 <strlen>
 80055b8:	4603      	mov	r3, r0
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4804      	ldr	r0, [pc, #16]	; (80055d4 <UART_Send_Start+0x2c>)
 80055c4:	f7fe fa7e 	bl	8003ac4 <HAL_UART_Transmit>
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	08007424 	.word	0x08007424
 80055d4:	20000504 	.word	0x20000504

080055d8 <UART_Print_float>:

void UART_Print_float(float val){
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t message_buf[BUF_SIZE];
	memcpy(message_buf, &val, sizeof(float));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)message_buf, BUF_SIZE, 1000);
 80055e6:	f107 010c 	add.w	r1, r7, #12
 80055ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055ee:	2204      	movs	r2, #4
 80055f0:	4803      	ldr	r0, [pc, #12]	; (8005600 <UART_Print_float+0x28>)
 80055f2:	f7fe fa67 	bl	8003ac4 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_buf, BUF_SIZE - 2);
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000504 	.word	0x20000504

08005604 <empty>:
 *  Created on: Dec 4, 2019
 *      Author: giand
 */
#include "circular_buffer.h"

uint8_t empty(CircularBuffer *self){
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	return self->read_idx_ == self->write_idx_;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005618:	429a      	cmp	r2, r3
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <front>:

uint32_t size(CircularBuffer *self){
	return self->write_idx_ - self->read_idx_;
}

void* front(CircularBuffer *self){
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
	return self->elems_[self->read_idx_ & MAX_SIZE];
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800563c:	b2da      	uxtb	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <pop_front>:

uint8_t pop_front(CircularBuffer *self){
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	if(!empty(self)){
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ffd3 	bl	8005604 <empty>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d110      	bne.n	8005686 <pop_front+0x36>
		//free(self->elems_[self->read_idx_ & MAX_SIZE]);
		self->elems_[self->read_idx_ & MAX_SIZE] = NULL;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800566a:	b2da      	uxtb	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2100      	movs	r1, #0
 8005670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		self->read_idx_ += 1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		return 1;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <pop_front+0x38>
	}
	else{
		return 0;
 8005686:	2300      	movs	r3, #0
	}
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <append_back>:

void append_back(CircularBuffer *self, void * elem){
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	self->elems_[self->write_idx_ & MAX_SIZE] = elem;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	self->write_idx_++;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <process_pulse_lengths>:
    kPhaseFixAcquired = 4,
    kPhaseFixFinal = 16,
};

//length of pulse_lens is num_base_stations
void process_pulse_lengths(CyclePhaseClassifier * self, uint32_t cycle_idx, const uint16_t *pulse_lens){
 80056c4:	b480      	push	{r7}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
	int cur_phase_id = -1;
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	61fb      	str	r3, [r7, #28]
	if(pulse_lens[0] > 0 && pulse_lens[1] > 0){
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d02a      	beq.n	8005734 <process_pulse_lengths+0x70>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3302      	adds	r3, #2
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d025      	beq.n	8005734 <process_pulse_lengths+0x70>
		uint8_t cur_more = pulse_lens[0] > pulse_lens[1];
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3302      	adds	r3, #2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	bf8c      	ite	hi
 80056f6:	2301      	movhi	r3, #1
 80056f8:	2300      	movls	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	76fb      	strb	r3, [r7, #27]
        if (cycle_idx == self->prev_full_cycle_idx_ + 1) {
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	d10e      	bne.n	8005728 <process_pulse_lengths+0x64>
            // To get current phase, we use simple fact that in phases 0 and 1, first pulse is shorter than the second,
            // and in phases 2, 3 it is longer. This allows us to estimate current phase using comparison between
            // the pair of pulses in current cycle (cur_more) and the previous one.
            self->phase_history_ = (self->phase_history_ << 1) | cur_more;  // phase_history_ keeps a bit for each pulse comparison.
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	005a      	lsls	r2, r3, #1
 8005710:	7efb      	ldrb	r3, [r7, #27]
 8005712:	431a      	orrs	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
            static const char phases[4] = {1, 2, 0, 3};
            cur_phase_id = phases[self->phase_history_ & 0x3];  // 2 least significant bits give us enough info to get phase.
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <process_pulse_lengths+0xd0>)
 8005722:	5cd3      	ldrb	r3, [r2, r3]
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	e002      	b.n	800572e <process_pulse_lengths+0x6a>
        }
        else {
            self->phase_history_ = cur_more;
 8005728:	7efa      	ldrb	r2, [r7, #27]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
        }
        self->prev_full_cycle_idx_ = cycle_idx;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	601a      	str	r2, [r3, #0]
	}

    // If we haven't achieved final fix yet, check the cur_phase_id is as expected.
    if (cur_phase_id >= 0 && self->fix_level_ < kPhaseFixFinal) {
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	db26      	blt.n	8005788 <process_pulse_lengths+0xc4>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	dc22      	bgt.n	8005788 <process_pulse_lengths+0xc4>
        if (self->fix_level_ == kPhaseFixNone) {
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <process_pulse_lengths+0x9c>
            // Use current phase_id as the candidate.
            self->fix_level_ = kPhaseFixCandidate;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	609a      	str	r2, [r3, #8]
            self->phase_shift_ = (cur_phase_id - cycle_idx) & 0x3;
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f003 0203 	and.w	r2, r3, #3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	60da      	str	r2, [r3, #12]
            // Either add or remove confidence that the phase_shift_ is correct.
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
        }
    }
}
 800575e:	e013      	b.n	8005788 <process_pulse_lengths+0xc4>
            int expected_phase_id = (cycle_idx + self->phase_shift_) & 0x3;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4413      	add	r3, r2
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	617b      	str	r3, [r7, #20]
            self->fix_level_ += (cur_phase_id == expected_phase_id) ? +1 : -1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	69f9      	ldr	r1, [r7, #28]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4299      	cmp	r1, r3
 8005778:	d101      	bne.n	800577e <process_pulse_lengths+0xba>
 800577a:	2301      	movs	r3, #1
 800577c:	e001      	b.n	8005782 <process_pulse_lengths+0xbe>
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	441a      	add	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	609a      	str	r2, [r3, #8]
}
 8005788:	bf00      	nop
 800578a:	3724      	adds	r7, #36	; 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	08007d50 	.word	0x08007d50

08005798 <get_phase>:
float expected_pulse_len(CyclePhaseClassifier * self, uint8_t skip, uint8_t data, uint8_t axis) {
    // See https://github.com/nairol/LighthouseRedox/blob/master/docs/Light%20Emissions.md
    return self->pulse_base_len_ + (skip << 2 | data << 1 | axis) * 10.416f;
}

int get_phase(CyclePhaseClassifier * self, uint32_t cycle_idx) {
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
    if (self->fix_level_ >= kPhaseFixAcquired) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	dd06      	ble.n	80057b8 <get_phase+0x20>
        return (cycle_idx + self->phase_shift_) & 0x3;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	4413      	add	r3, r2
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	e001      	b.n	80057bc <get_phase+0x24>
    } else {
        return -1;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <reset>:

void reset(CyclePhaseClassifier * self) {
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    self->fix_level_ = kPhaseFixNone;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]
    self->prev_full_cycle_idx_ = -1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	601a      	str	r2, [r3, #0]
    self->pulse_base_len_ = 62.5f;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a05      	ldr	r2, [pc, #20]	; (80057f8 <reset+0x30>)
 80057e2:	611a      	str	r2, [r3, #16]
    self->phase_history_ = 0;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	427a0000 	.word	0x427a0000

080057fc <consume_angles>:
#include "geometry.h"
#include <math.h>
#include <assert.h>
#include <arm_math.h>

void consume_angles(GeometryBuilder * self, const SensorAnglesFrame * f) {
 80057fc:	b5b0      	push	{r4, r5, r7, lr}
 80057fe:	b096      	sub	sp, #88	; 0x58
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
    // First 2 angles - x, y of station B; second 2 angles - x, y of station C.
    // Coordinate system: Y - Up;  X ->  Z v  (to the viewer)
    // Station 'looks' to inverse Z axis (vector 0;0;-1).
    self->pos_.time = f->time;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    self->pos_.fix_level = f->fix_level;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	679a      	str	r2, [r3, #120]	; 0x78

    if (f->fix_level >= kCycleSynced) {
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2bc7      	cmp	r3, #199	; 0xc7
 800581e:	f340 8090 	ble.w	8005942 <consume_angles+0x146>
        SensorLocalGeometry *sens_def = &self->sensors[0];
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3360      	adds	r3, #96	; 0x60
 8005826:	643b      	str	r3, [r7, #64]	; 0x40
        SensorAngles *sens = &f->sensors[sens_def->input_idx];
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	015b      	lsls	r3, r3, #5
 800582e:	3310      	adds	r3, #16
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	4413      	add	r3, r2
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c

        // Check angles are fresh enough.
        uint32_t max_stale = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800583a:	2300      	movs	r3, #0
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
 800583e:	e011      	b.n	8005864 <consume_angles+0x68>
        	//Get time since we last updated the angles for phase i
        	int stale = f->cycle_idx - sens->updated_cycles[i];
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005846:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005848:	3104      	adds	r1, #4
 800584a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	63bb      	str	r3, [r7, #56]	; 0x38
        	max_stale = (stale > max_stale) ? stale : max_stale;
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005856:	4293      	cmp	r3, r2
 8005858:	bf38      	it	cc
 800585a:	4613      	movcc	r3, r2
 800585c:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < NUM_CYCLE_PHASES; i++){
 800585e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005860:	3301      	adds	r3, #1
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48
 8005864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005866:	2b03      	cmp	r3, #3
 8005868:	ddea      	ble.n	8005840 <consume_angles+0x44>
        }

        if (max_stale < NUM_CYCLE_PHASES * 3) {  // We tolerate stale angles up to 2 cycles old.
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	2b0b      	cmp	r3, #11
 800586e:	d864      	bhi.n	800593a <consume_angles+0x13e>
            self->pos_.fix_level = (max_stale < NUM_CYCLE_PHASES) ? kFullFix : kStaleFix;
 8005870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005872:	2b03      	cmp	r3, #3
 8005874:	d802      	bhi.n	800587c <consume_angles+0x80>
 8005876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800587a:	e001      	b.n	8005880 <consume_angles+0x84>
 800587c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	679a      	str	r2, [r3, #120]	; 0x78

            float ray1[VEC3D_SIZE], ray2[VEC3D_SIZE], origin1[VEC3D_SIZE], origin2[VEC3D_SIZE];
            calc_ray_vec(&self->base_stations_[0], sens->angles[0], sens->angles[1], ray1, origin1);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	edd3 7a00 	vldr	s15, [r3]
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005892:	f107 0214 	add.w	r2, r7, #20
 8005896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800589a:	4619      	mov	r1, r3
 800589c:	eef0 0a47 	vmov.f32	s1, s14
 80058a0:	eeb0 0a67 	vmov.f32	s0, s15
 80058a4:	f000 f8d3 	bl	8005a4e <calc_ray_vec>
            calc_ray_vec(&self->base_stations_[1], sens->angles[2], sens->angles[3], ray2, origin2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80058b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80058ba:	f107 0208 	add.w	r2, r7, #8
 80058be:	f107 0320 	add.w	r3, r7, #32
 80058c2:	4619      	mov	r1, r3
 80058c4:	eef0 0a47 	vmov.f32	s1, s14
 80058c8:	eeb0 0a67 	vmov.f32	s0, s15
 80058cc:	f000 f8bf 	bl	8005a4e <calc_ray_vec>

            intersect_lines(origin1, ray1, origin2, ray2, self->pos_.pos, &self->pos_.pos_delta);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	337c      	adds	r3, #124	; 0x7c
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	3288      	adds	r2, #136	; 0x88
 80058d8:	f107 0520 	add.w	r5, r7, #32
 80058dc:	f107 0408 	add.w	r4, r7, #8
 80058e0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80058e4:	f107 0014 	add.w	r0, r7, #20
 80058e8:	9201      	str	r2, [sp, #4]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	462b      	mov	r3, r5
 80058ee:	4622      	mov	r2, r4
 80058f0:	f000 f934 	bl	8005b5c <intersect_lines>

            // Translate object position depending on the position of sensor relative to object.
            for (int i = 0; i < VEC3D_SIZE; i++){
 80058f4:	2300      	movs	r3, #0
 80058f6:	647b      	str	r3, [r7, #68]	; 0x44
 80058f8:	e01b      	b.n	8005932 <consume_angles+0x136>
            	self->pos_.pos[i] -= sens_def->pos[i];
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fe:	331e      	adds	r3, #30
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	ed93 7a00 	vldr	s14, [r3]
 800590a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800590c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	edd3 7a00 	vldr	s15, [r3]
 8005918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005920:	331e      	adds	r3, #30
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	3304      	adds	r3, #4
 8005928:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < VEC3D_SIZE; i++){
 800592c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592e:	3301      	adds	r3, #1
 8005930:	647b      	str	r3, [r7, #68]	; 0x44
 8005932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005934:	2b02      	cmp	r3, #2
 8005936:	dde0      	ble.n	80058fa <consume_angles+0xfe>
        else {
            // Angles too stale - cannot calculate position anymore.
            self->pos_.fix_level = kPartialVis;
        }
    }
}
 8005938:	e003      	b.n	8005942 <consume_angles+0x146>
            self->pos_.fix_level = kPartialVis;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005940:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005942:	bf00      	nop
 8005944:	3750      	adds	r7, #80	; 0x50
 8005946:	46bd      	mov	sp, r7
 8005948:	bdb0      	pop	{r4, r5, r7, pc}

0800594a <vec_cross_product>:
    // TODO: Make compatible with multiple geometry objects.
    //set_led_state(self->pos_.fix_level >= kStaleFix ? kFixFound : kNoFix);
}
*/

void vec_cross_product(float *a, float *b, float *res) {
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
    res[0] = a[1] * b[2] - a[2] * b[1];
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3304      	adds	r3, #4
 800595a:	ed93 7a00 	vldr	s14, [r3]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3308      	adds	r3, #8
 8005962:	edd3 7a00 	vldr	s15, [r3]
 8005966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3308      	adds	r3, #8
 800596e:	edd3 6a00 	vldr	s13, [r3]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3304      	adds	r3, #4
 8005976:	edd3 7a00 	vldr	s15, [r3]
 800597a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	edc3 7a00 	vstr	s15, [r3]
    res[1] = a[2] * b[0] - a[0] * b[2];
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	3208      	adds	r2, #8
 8005990:	ed92 7a00 	vldr	s14, [r2]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	edd2 7a00 	vldr	s15, [r2]
 800599a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	edd2 6a00 	vldr	s13, [r2]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	3208      	adds	r2, #8
 80059a8:	edd2 7a00 	vldr	s15, [r2]
 80059ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b4:	edc3 7a00 	vstr	s15, [r3]
    res[2] = a[0] * b[1] - a[1] * b[0];
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3308      	adds	r3, #8
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	ed92 7a00 	vldr	s14, [r2]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	3204      	adds	r2, #4
 80059c6:	edd2 7a00 	vldr	s15, [r2]
 80059ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	3204      	adds	r2, #4
 80059d2:	edd2 6a00 	vldr	s13, [r2]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	edd2 7a00 	vldr	s15, [r2]
 80059dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e4:	edc3 7a00 	vstr	s15, [r3]
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <vec_length>:

float vec_length(float *vec) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
    float pow, res;

    arm_power_f32(vec, VEC3D_SIZE, &pow); // returns sum of squares
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	461a      	mov	r2, r3
 8005a02:	2103      	movs	r1, #3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fb fd3f 	bl	8001488 <arm_power_f32>
    arm_sqrt_f32(pow, &res);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	f107 0308 	add.w	r3, r7, #8
 8005a12:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8005a14:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a20:	db09      	blt.n	8005a36 <vec_length+0x42>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8005a22:	ed97 0a05 	vldr	s0, [r7, #20]
 8005a26:	f001 fc39 	bl	800729c <sqrtf>
 8005a2a:	eef0 7a40 	vmov.f32	s15, s0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	edc3 7a00 	vstr	s15, [r3]
 8005a34:	e003      	b.n	8005a3e <vec_length+0x4a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]

    return res;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	ee07 3a90 	vmov	s15, r3
}
 8005a44:	eeb0 0a67 	vmov.f32	s0, s15
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <calc_ray_vec>:

void calc_ray_vec(const BaseStationGeometryDef * bs, float angle1, float angle2, float *res, float *origin) {
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b09a      	sub	sp, #104	; 0x68
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6178      	str	r0, [r7, #20]
 8005a56:	ed87 0a04 	vstr	s0, [r7, #16]
 8005a5a:	edc7 0a03 	vstr	s1, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
    float a[VEC3D_SIZE] = {arm_cos_f32(angle1), 0, -arm_sin_f32(angle1)};  // Normal vector to X plane
 8005a62:	ed97 0a04 	vldr	s0, [r7, #16]
 8005a66:	f7fb fb1f 	bl	80010a8 <arm_cos_f32>
 8005a6a:	eef0 7a40 	vmov.f32	s15, s0
 8005a6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a78:	ed97 0a04 	vldr	s0, [r7, #16]
 8005a7c:	f7fb fb90 	bl	80011a0 <arm_sin_f32>
 8005a80:	eef0 7a40 	vmov.f32	s15, s0
 8005a84:	eef1 7a67 	vneg.f32	s15, s15
 8005a88:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float b[VEC3D_SIZE] = {0, arm_cos_f32(angle2), arm_sin_f32(angle2)};   // Normal vector to Y plane
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a92:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a96:	f7fb fb07 	bl	80010a8 <arm_cos_f32>
 8005a9a:	eef0 7a40 	vmov.f32	s15, s0
 8005a9e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005aa2:	ed97 0a03 	vldr	s0, [r7, #12]
 8005aa6:	f7fb fb7b 	bl	80011a0 <arm_sin_f32>
 8005aaa:	eef0 7a40 	vmov.f32	s15, s0
 8005aae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    float ray[VEC3D_SIZE] = {};
 8005ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	609a      	str	r2, [r3, #8]
    vec_cross_product(b, a, ray); // Intersection of two planes -> ray vector.
 8005abe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005ac2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ac6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ff3d 	bl	800594a <vec_cross_product>
    float len = vec_length(ray);
 8005ad0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff8d 	bl	80059f4 <vec_length>
 8005ada:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    arm_scale_f32(ray, 1/len, ray, VEC3D_SIZE); // Normalize ray length.
 8005ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ae2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005ae6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005aea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005aee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005af2:	2203      	movs	r2, #3
 8005af4:	eeb0 0a66 	vmov.f32	s0, s13
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fb f9e8 	bl	8000ece <arm_scale_f32>

    arm_matrix_instance_f32 source_rotation_matrix = {3, 3, (const float*) bs->mat};
 8005afe:	2303      	movs	r3, #3
 8005b00:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b02:	2303      	movs	r3, #3
 8005b04:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_matrix_instance_f32 ray_vec = {3, 1, ray};
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	863b      	strh	r3, [r7, #48]	; 0x30
 8005b10:	2301      	movs	r3, #1
 8005b12:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
    arm_matrix_instance_f32 ray_rotated_vec = {3, 1, res};
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b1e:	2301      	movs	r3, #1
 8005b20:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    arm_mat_mult_f32(&source_rotation_matrix, &ray_vec, &ray_rotated_vec);
 8005b26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b2a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fb fbc0 	bl	80012b8 <arm_mat_mult_f32>

    // TODO: Make geometry adjustments within base station.
    float rotated_origin_delta[VEC3D_SIZE] = {};
 8005b38:	f107 031c 	add.w	r3, r7, #28
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	609a      	str	r2, [r3, #8]
    //vec3d base_origin_delta = {-0.025f, -0.025f, 0.f};  // Rotors are slightly off center in base station.
    // arm_matrix_instance_f32 origin_vec = {3, 1, base_origin_delta};
    // arm_matrix_instance_f32 origin_rotated_vec = {3, 1, rotated_origin_delta};
    // arm_mat_mult_f32(&source_rotation_matrix, &origin_vec, &origin_rotated_vec);
    arm_add_f32((const float *) bs->origin, rotated_origin_delta, origin, VEC3D_SIZE);
 8005b44:	6978      	ldr	r0, [r7, #20]
 8005b46:	f107 011c 	add.w	r1, r7, #28
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	f7fb f8c1 	bl	8000cd4 <arm_add_f32>
}
 8005b52:	bf00      	nop
 8005b54:	3768      	adds	r7, #104	; 0x68
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <intersect_lines>:


uint8_t intersect_lines(float *orig1, float *vec1, float *orig2, float *vec2, float *res, float *dist) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b098      	sub	sp, #96	; 0x60
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
    // Algorithm: http://geomalgorithms.com/a07-_distance.html#Distance-between-Lines

    float w0[VEC3D_SIZE] = {};
 8005b6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	609a      	str	r2, [r3, #8]
    arm_sub_f32((const float *)orig1, (const float *)orig2, w0, VEC3D_SIZE);
 8005b76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7fb fa17 	bl	8000fb2 <arm_sub_f32>

    float a, b, c, d, e;
    arm_dot_prod_f32((const float *)vec1, (const float *)vec1, VEC3D_SIZE, &a);
 8005b84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b88:	2203      	movs	r2, #3
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f7fb f91c 	bl	8000dca <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, (const float *)vec2, VEC3D_SIZE, &b);
 8005b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b96:	2203      	movs	r2, #3
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	68b8      	ldr	r0, [r7, #8]
 8005b9c:	f7fb f915 	bl	8000dca <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, (const float *)vec2, VEC3D_SIZE, &c);
 8005ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6838      	ldr	r0, [r7, #0]
 8005baa:	f7fb f90e 	bl	8000dca <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec1, w0, VEC3D_SIZE, &d);
 8005bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	68b8      	ldr	r0, [r7, #8]
 8005bba:	f7fb f906 	bl	8000dca <arm_dot_prod_f32>
    arm_dot_prod_f32((const float *)vec2, w0, VEC3D_SIZE, &e);
 8005bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bc2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	6838      	ldr	r0, [r7, #0]
 8005bca:	f7fb f8fe 	bl	8000dca <arm_dot_prod_f32>

    float denom = a * c - b * b;
 8005bce:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005bd2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bda:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005bde:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bea:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    if (fabs(denom) < 1e-5f)
 8005bee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bf2:	eef0 7ae7 	vabs.f32	s15, s15
 8005bf6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005d14 <intersect_lines+0x1b8>
 8005bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c02:	d501      	bpl.n	8005c08 <intersect_lines+0xac>
        return 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e081      	b.n	8005d0c <intersect_lines+0x1b0>

    // Closest point to 2nd line on 1st line
    float t1 = (b * e - c * d) / denom;
 8005c08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c14:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005c18:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c20:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c24:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c2c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    float pt1[VEC3D_SIZE] = {};
 8005c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec1, t1, pt1, VEC3D_SIZE);
 8005c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c40:	2203      	movs	r2, #3
 8005c42:	4619      	mov	r1, r3
 8005c44:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	f7fb f940 	bl	8000ece <arm_scale_f32>
    arm_add_f32(pt1, (const float *)orig1, pt1, VEC3D_SIZE);
 8005c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c52:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005c56:	2303      	movs	r3, #3
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	f7fb f83b 	bl	8000cd4 <arm_add_f32>

    // Closest point to 1st line on 2nd line
    float t2 = (a * e - b * d) / denom;
 8005c5e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005c62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c6a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005c6e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005c7a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c82:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float pt2[VEC3D_SIZE] = {};
 8005c86:	f107 031c 	add.w	r3, r7, #28
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	609a      	str	r2, [r3, #8]
    arm_scale_f32((const float *)vec2, t2, pt2, VEC3D_SIZE);
 8005c92:	f107 031c 	add.w	r3, r7, #28
 8005c96:	2203      	movs	r2, #3
 8005c98:	4619      	mov	r1, r3
 8005c9a:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8005c9e:	6838      	ldr	r0, [r7, #0]
 8005ca0:	f7fb f915 	bl	8000ece <arm_scale_f32>
    arm_add_f32(pt2, (const float *)orig2, pt2, VEC3D_SIZE);
 8005ca4:	f107 021c 	add.w	r2, r7, #28
 8005ca8:	f107 001c 	add.w	r0, r7, #28
 8005cac:	2303      	movs	r3, #3
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	f7fb f810 	bl	8000cd4 <arm_add_f32>

    // Result is in the middle
    float tmp[VEC3D_SIZE] = {};
 8005cb4:	f107 0310 	add.w	r3, r7, #16
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	609a      	str	r2, [r3, #8]
    arm_add_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8005cc0:	f107 0210 	add.w	r2, r7, #16
 8005cc4:	f107 011c 	add.w	r1, r7, #28
 8005cc8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005ccc:	2303      	movs	r3, #3
 8005cce:	f7fb f801 	bl	8000cd4 <arm_add_f32>
    arm_scale_f32(tmp, 0.5f, res, VEC3D_SIZE);
 8005cd2:	f107 0310 	add.w	r3, r7, #16
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cda:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fb f8f5 	bl	8000ece <arm_scale_f32>

    // Dist is distance between pt1 and pt2
    arm_sub_f32(pt1, pt2, tmp, VEC3D_SIZE);
 8005ce4:	f107 0210 	add.w	r2, r7, #16
 8005ce8:	f107 011c 	add.w	r1, r7, #28
 8005cec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	f7fb f95e 	bl	8000fb2 <arm_sub_f32>
    *dist = vec_length(tmp);
 8005cf6:	f107 0310 	add.w	r3, r7, #16
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fe7a 	bl	80059f4 <vec_length>
 8005d00:	eef0 7a40 	vmov.f32	s15, s0
 8005d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d06:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8005d0a:	2301      	movs	r3, #1
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3760      	adds	r7, #96	; 0x60
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	3727c5ac 	.word	0x3727c5ac

08005d18 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d60:	2004      	movs	r0, #4
 8005d62:	f7ff ffd9 	bl	8005d18 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d66:	2001      	movs	r0, #1
 8005d68:	f7ff ffd6 	bl	8005d18 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d6c:	2002      	movs	r0, #2
 8005d6e:	f7ff ffd3 	bl	8005d18 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d72:	2008      	movs	r0, #8
 8005d74:	f7ff ffd0 	bl	8005d18 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA0_GPIO_Port, PA0_Pin, GPIO_PIN_RESET);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d80:	f7fb ff76 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8005d84:	2200      	movs	r2, #0
 8005d86:	2123      	movs	r1, #35	; 0x23
 8005d88:	4825      	ldr	r0, [pc, #148]	; (8005e20 <MX_GPIO_Init+0xd4>)
 8005d8a:	f7fb ff71 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PC0_Pin;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005d92:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <MX_GPIO_Init+0xd8>)
 8005d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PC0_GPIO_Port, &GPIO_InitStruct);
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4822      	ldr	r0, [pc, #136]	; (8005e28 <MX_GPIO_Init+0xdc>)
 8005da0:	f7fb fdde 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA0_Pin;
 8005da4:	2301      	movs	r3, #1
 8005da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 8005db4:	1d3b      	adds	r3, r7, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dbc:	f7fb fdd0 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <MX_GPIO_Init+0xe0>)
 8005dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4815      	ldr	r0, [pc, #84]	; (8005e28 <MX_GPIO_Init+0xdc>)
 8005dd2:	f7fb fdc5 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8005dd6:	2323      	movs	r3, #35	; 0x23
 8005dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	480d      	ldr	r0, [pc, #52]	; (8005e20 <MX_GPIO_Init+0xd4>)
 8005dec:	f7fb fdb8 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8005df0:	2303      	movs	r3, #3
 8005df2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dfc:	1d3b      	adds	r3, r7, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	480b      	ldr	r0, [pc, #44]	; (8005e30 <MX_GPIO_Init+0xe4>)
 8005e02:	f7fb fdad 	bl	8001960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005e06:	2200      	movs	r2, #0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	2006      	movs	r0, #6
 8005e0c:	f7fb fd15 	bl	800183a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005e10:	2006      	movs	r0, #6
 8005e12:	f7fb fd2c 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 8005e16:	bf00      	nop
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	48000400 	.word	0x48000400
 8005e24:	10310000 	.word	0x10310000
 8005e28:	48000800 	.word	0x48000800
 8005e2c:	10110000 	.word	0x10110000
 8005e30:	48000c00 	.word	0x48000c00

08005e34 <do_work_input>:
 *      Author: giand
 */
#include "input.h"
#include "UART_Print.h"

void do_work_input(Input *self, uint16_t cur_time){
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	807b      	strh	r3, [r7, #2]

	Pulse *p;
	while(!empty(&self->pulses_buf_)){
 8005e40:	e00f      	b.n	8005e62 <do_work_input+0x2e>
		p = front(&self->pulses_buf_);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fbf2 	bl	800562e <front>
 8005e4a:	60f8      	str	r0, [r7, #12]
		consume_pulse(self->next, p);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fa10 	bl	800627a <consume_pulse>
		pop_front(&self->pulses_buf_);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fbf7 	bl	8005650 <pop_front>
	while(!empty(&self->pulses_buf_)){
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fbcd 	bl	8005604 <empty>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0e8      	beq.n	8005e42 <do_work_input+0xe>
	}

}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <enqueue_pulse>:

void enqueue_pulse(Input *self, uint16_t start_time, uint16_t len){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
 8005e84:	4613      	mov	r3, r2
 8005e86:	803b      	strh	r3, [r7, #0]
	//UART_Print_uint64_t(start_time);
	//UART_Print_uint64_t(len);
	//----------------


    Pulse *p = malloc(sizeof(Pulse));
 8005e88:	2008      	movs	r0, #8
 8005e8a:	f001 f8ed 	bl	8007068 <malloc>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	60fb      	str	r3, [r7, #12]
    p->input_idx = self->input_idx_;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]
    p->start_time = start_time;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	887a      	ldrh	r2, [r7, #2]
 8005ea0:	809a      	strh	r2, [r3, #4]
    p->pulse_len = len;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	883a      	ldrh	r2, [r7, #0]
 8005ea6:	80da      	strh	r2, [r3, #6]
    append_back(&self->pulses_buf_, p);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fbef 	bl	8005690 <append_back>

}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ebc:	b5b0      	push	{r4, r5, r7, lr}
 8005ebe:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8005ec2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ec4:	f7fb fb5c 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ec8:	f000 f8be 	bl	8006048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ecc:	f7ff ff3e 	bl	8005d4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005ed0:	f000 ff2a 	bl	8006d28 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8005ed4:	f000 febc 	bl	8006c50 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  UART_Send_Start();
 8005ed8:	f7ff fb66 	bl	80055a8 <UART_Send_Start>
  HAL_TIM_Base_Start(&htim16);
 8005edc:	4855      	ldr	r0, [pc, #340]	; (8006034 <main+0x178>)
 8005ede:	f7fd fcf3 	bl	80038c8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  BaseStationGeometryDef bs_0 = {{0.682646, 1.712605, 0.298152},
 8005ee2:	4b55      	ldr	r3, [pc, #340]	; (8006038 <main+0x17c>)
 8005ee4:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 8005ee8:	461d      	mov	r5, r3
 8005eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	  	  	  	  	 {0.356806, -0.017381, 0.934017, 0.001791, 0.999838, 0.017922, -0.934177, -0.004722, 0.356779}};

  BaseStationGeometryDef bs_1 = {{0.780941, 2.300994, -0.204002},
 8005efa:	4b50      	ldr	r3, [pc, #320]	; (800603c <main+0x180>)
 8005efc:	f507 7437 	add.w	r4, r7, #732	; 0x2dc
 8005f00:	461d      	mov	r5, r3
 8005f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	  	  	  	  	  	  	  	 {-0.184830, -0.411017, 0.892694, 0.104180, 0.895032, 0.433664, -0.977233, 0.173155, -0.122609}};

  SensorLocalGeometry s_loc_geo = {0, {0.0, 0.0, 0.0}};
 8005f12:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	60da      	str	r2, [r3, #12]
  GeometryBuilder geometry_builder = {{bs_0, bs_1}, {s_loc_geo}};
 8005f20:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005f24:	4618      	mov	r0, r3
 8005f26:	239c      	movs	r3, #156	; 0x9c
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	f001 f8b7 	bl	800709e <memset>
 8005f30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005f34:	461d      	mov	r5, r3
 8005f36:	f507 7443 	add.w	r4, r7, #780	; 0x30c
 8005f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005f4a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005f4e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8005f52:	f507 7537 	add.w	r5, r7, #732	; 0x2dc
 8005f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005f66:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005f6a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8005f6e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8005f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  PulseProcessor pulse_processor = _PulseProcessor(1);
 8005f78:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 f92b 	bl	80061da <_PulseProcessor>
  pulse_processor.next = &geometry_builder;
 8005f84:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f88:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8005f8c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  input.next = &pulse_processor;
 8005f90:	4a2b      	ldr	r2, [pc, #172]	; (8006040 <main+0x184>)
 8005f92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005f96:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418

  Pulse dummyPulses[] = {{0, 0, 65}, {0, 400, 84}, {0, 1500, 10},
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	4a29      	ldr	r2, [pc, #164]	; (8006044 <main+0x188>)
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f001 f86f 	bl	8007088 <memcpy>

						 {0, 33332, 65}, {0, 33732, 84}, {0, 35332, 10},
						 {0, 41665, 65}, {0, 42065, 85}, {0, 44665, 15},
						 {0, 49998, 85}, {0, 50398, 66}, {0, 53998, 9},
						 {0, 58331, 84}, {0, 58731, 66}, {0, 63331, 10}};
  int i = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  uint64_t timer = 0;
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	f04f 0400 	mov.w	r4, #0
 8005fb8:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8005fbc:	e882 0018 	stmia.w	r2, {r3, r4}
	do_work_input(&input, timestamp);
	do_work_pulse_processor(&pulse_processor, timestamp);
	timestamp += 1;
	*/

	do_work_input(&input, __HAL_TIM_GET_COUNTER(&htim16));
 8005fc0:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <main+0x178>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	481d      	ldr	r0, [pc, #116]	; (8006040 <main+0x184>)
 8005fcc:	f7ff ff32 	bl	8005e34 <do_work_input>
	do_work_pulse_processor(&pulse_processor, __HAL_TIM_GET_COUNTER(&htim16));
 8005fd0:	4b18      	ldr	r3, [pc, #96]	; (8006034 <main+0x178>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fc83 	bl	80068ea <do_work_pulse_processor>


	if(timer % 65536 == 0){
 8005fe4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8005fe8:	cb18      	ldmia	r3, {r3, r4}
 8005fea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	ea03 0301 	and.w	r3, r3, r1
 8005ff6:	ea04 0402 	and.w	r4, r4, r2
 8005ffa:	4323      	orrs	r3, r4
 8005ffc:	d10e      	bne.n	800601c <main+0x160>
		float x = geometry_builder.pos_.pos[0];
 8005ffe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8006002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006004:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
		float y = geometry_builder.pos_.pos[1];
 8006008:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800600c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006010:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
		UART_Print_float(x);
 8006014:	ed97 0ad0 	vldr	s0, [r7, #832]	; 0x340
 8006018:	f7ff fade 	bl	80055d8 <UART_Print_float>
	}
	timer += 1;
 800601c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8006020:	cb18      	ldmia	r3, {r3, r4}
 8006022:	3301      	adds	r3, #1
 8006024:	f144 0400 	adc.w	r4, r4, #0
 8006028:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800602c:	e882 0018 	stmia.w	r2, {r3, r4}
	do_work_input(&input, __HAL_TIM_GET_COUNTER(&htim16));
 8006030:	e7c6      	b.n	8005fc0 <main+0x104>
 8006032:	bf00      	nop
 8006034:	200004c4 	.word	0x200004c4
 8006038:	0800742c 	.word	0x0800742c
 800603c:	0800745c 	.word	0x0800745c
 8006040:	200000a8 	.word	0x200000a8
 8006044:	0800748c 	.word	0x0800748c

08006048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0ae      	sub	sp, #184	; 0xb8
 800604c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800604e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006052:	2248      	movs	r2, #72	; 0x48
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f821 	bl	800709e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800605c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	605a      	str	r2, [r3, #4]
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	60da      	str	r2, [r3, #12]
 800606a:	611a      	str	r2, [r3, #16]
 800606c:	615a      	str	r2, [r3, #20]
 800606e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006070:	1d3b      	adds	r3, r7, #4
 8006072:	2250      	movs	r2, #80	; 0x50
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f811 	bl	800709e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800607c:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <SystemClock_Config+0xe0>)
 800607e:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <SystemClock_Config+0xe0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b26      	ldr	r3, [pc, #152]	; (8006128 <SystemClock_Config+0xe0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006098:	2303      	movs	r3, #3
 800609a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800609c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060a0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80060a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fc f9bb 	bl	8002434 <HAL_RCC_OscConfig>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80060c4:	f000 f882 	bl	80061cc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80060c8:	236f      	movs	r3, #111	; 0x6f
 80060ca:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80060cc:	2302      	movs	r3, #2
 80060ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060d0:	2300      	movs	r3, #0
 80060d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80060d4:	2300      	movs	r3, #0
 80060d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80060d8:	2300      	movs	r3, #0
 80060da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80060dc:	2300      	movs	r3, #0
 80060de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80060e0:	2300      	movs	r3, #0
 80060e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80060e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fc fd00 	bl	8002af0 <HAL_RCC_ClockConfig>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80060f6:	f000 f869 	bl	80061cc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 80060fa:	f242 0301 	movw	r3, #8193	; 0x2001
 80060fe:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8006104:	2300      	movs	r3, #0
 8006106:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8006108:	2310      	movs	r3, #16
 800610a:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800610c:	1d3b      	adds	r3, r7, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f7fd f929 	bl	8003366 <HAL_RCCEx_PeriphCLKConfig>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800611a:	f000 f857 	bl	80061cc <Error_Handler>
  }
}
 800611e:	bf00      	nop
 8006120:	37b8      	adds	r7, #184	; 0xb8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	58000400 	.word	0x58000400

0800612c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	80fb      	strh	r3, [r7, #6]
	//timestamp = HAL_GetTick();
	timestamp = __HAL_TIM_GET_COUNTER(&htim16);
 8006136:	4b21      	ldr	r3, [pc, #132]	; (80061bc <HAL_GPIO_EXTI_Callback+0x90>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b29a      	uxth	r2, r3
 800613e:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <HAL_GPIO_EXTI_Callback+0x94>)
 8006140:	801a      	strh	r2, [r3, #0]

	GPIO_PinState pin_state = HAL_GPIO_ReadPin(PC0_GPIO_Port, PC0_Pin);
 8006142:	2101      	movs	r1, #1
 8006144:	481f      	ldr	r0, [pc, #124]	; (80061c4 <HAL_GPIO_EXTI_Callback+0x98>)
 8006146:	f7fb fd7b 	bl	8001c40 <HAL_GPIO_ReadPin>
 800614a:	4603      	mov	r3, r0
 800614c:	73fb      	strb	r3, [r7, #15]
	if (pin_state == GPIO_PIN_SET) {
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d10f      	bne.n	8006174 <HAL_GPIO_EXTI_Callback+0x48>
		//Rising edge
		input.rise_time_ = timestamp;
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <HAL_GPIO_EXTI_Callback+0x94>)
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800615a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
		input.rise_valid_ = 1;
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8006160:	2201      	movs	r2, #1
 8006162:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8006166:	2201      	movs	r2, #1
 8006168:	2101      	movs	r1, #1
 800616a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800616e:	f7fb fd7f 	bl	8001c70 <HAL_GPIO_WritePin>
		//Falling edge
		enqueue_pulse(&input, input.rise_time_, timestamp - input.rise_time_);
		input.rise_valid_ = 0;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
	}
}
 8006172:	e01f      	b.n	80061b4 <HAL_GPIO_EXTI_Callback+0x88>
	else if (input.rise_valid_ && pin_state == GPIO_PIN_RESET) {
 8006174:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8006176:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01a      	beq.n	80061b4 <HAL_GPIO_EXTI_Callback+0x88>
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d117      	bne.n	80061b4 <HAL_GPIO_EXTI_Callback+0x88>
		enqueue_pulse(&input, input.rise_time_, timestamp - input.rise_time_);
 8006184:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8006186:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	; 0x40c
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <HAL_GPIO_EXTI_Callback+0x94>)
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8006190:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	480b      	ldr	r0, [pc, #44]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800619c:	f7ff fe6c 	bl	8005e78 <enqueue_pulse>
		input.rise_valid_ = 0;
 80061a0:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80061a8:	2200      	movs	r2, #0
 80061aa:	2101      	movs	r1, #1
 80061ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061b0:	f7fb fd5e 	bl	8001c70 <HAL_GPIO_WritePin>
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	200004c4 	.word	0x200004c4
 80061c0:	200000a4 	.word	0x200000a4
 80061c4:	48000800 	.word	0x48000800
 80061c8:	200000a8 	.word	0x200000a8

080061cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <_PulseProcessor>:
	kCycleFixCandidate = 1,
	kCycleFixAcquired = 5,
	kCycleFixMax = 10
};

PulseProcessor _PulseProcessor(uint32_t num_inputs){
 80061da:	b580      	push	{r7, lr}
 80061dc:	b0e0      	sub	sp, #384	; 0x180
 80061de:	af00      	add	r7, sp, #0
 80061e0:	1d3b      	adds	r3, r7, #4
 80061e2:	6018      	str	r0, [r3, #0]
 80061e4:	463b      	mov	r3, r7
 80061e6:	6019      	str	r1, [r3, #0]
	PulseProcessor pulse_processor;
	pulse_processor.num_inputs_ = num_inputs;
 80061e8:	f107 030c 	add.w	r3, r7, #12
 80061ec:	463a      	mov	r2, r7
 80061ee:	6812      	ldr	r2, [r2, #0]
 80061f0:	601a      	str	r2, [r3, #0]
	pulse_processor.cycle_fix_level_ = 0;
 80061f2:	f107 030c 	add.w	r3, r7, #12
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
	pulse_processor.cycle_idx_ = 0;
 80061fa:	f107 030c 	add.w	r3, r7, #12
 80061fe:	2200      	movs	r2, #0
 8006200:	60da      	str	r2, [r3, #12]


	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8006202:	2300      	movs	r3, #0
 8006204:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006208:	e011      	b.n	800622e <_PulseProcessor+0x54>
		vector_init(&pulse_processor.cycle_long_pulses_[i]);
 800620a:	f107 010c 	add.w	r1, r7, #12
 800620e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006212:	4613      	mov	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	3310      	adds	r3, #16
 800621c:	440b      	add	r3, r1
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fe1c 	bl	8006e5c <vector_init>
	for(int i = 0; i < NUM_BASE_STATIONS; i++){
 8006224:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800622e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8006232:	2b01      	cmp	r3, #1
 8006234:	dde9      	ble.n	800620a <_PulseProcessor+0x30>
	}
	vector_init(&pulse_processor.cycle_short_pulses_);
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	3328      	adds	r3, #40	; 0x28
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fe0d 	bl	8006e5c <vector_init>
	vector_init(&pulse_processor.unclassified_long_pulses_);
 8006242:	f107 030c 	add.w	r3, r7, #12
 8006246:	3334      	adds	r3, #52	; 0x34
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fe07 	bl	8006e5c <vector_init>
	pulse_processor.time_from_last_long_pulse_ = 0;
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	return pulse_processor;
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f107 030c 	add.w	r3, r7, #12
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8006268:	461a      	mov	r2, r3
 800626a:	f000 ff0d 	bl	8007088 <memcpy>
}
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <consume_pulse>:

void consume_pulse(PulseProcessor *self, Pulse* p){
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
	if(p->pulse_len >= MAX_LONG_PULSE_LEN){
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	88db      	ldrh	r3, [r3, #6]
 8006288:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800628c:	d20c      	bcs.n	80062a8 <consume_pulse+0x2e>
		//Ignore very long pulses
	}
	else if(p->pulse_len >= MIN_LONG_PULSE_LEN){ // Long pulse - likely sync pulse
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	88db      	ldrh	r3, [r3, #6]
 8006292:	2b27      	cmp	r3, #39	; 0x27
 8006294:	d904      	bls.n	80062a0 <consume_pulse+0x26>
		process_long_pulse(self, p);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f809 	bl	80062b0 <process_long_pulse>
	}
	else{	//Short pulse -likely laser sweep
		process_short_pulse(self, p);
	}
}
 800629e:	e003      	b.n	80062a8 <consume_pulse+0x2e>
		process_short_pulse(self, p);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f890 	bl	80063c8 <process_short_pulse>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <process_long_pulse>:

void process_long_pulse(PulseProcessor *self, Pulse* p){
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	if(self->cycle_fix_level_ == kCycleFixNone){
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d140      	bne.n	8006344 <process_long_pulse+0x94>
        // Bootstrap mode. We keep the previous long pulse in unclassified_long_pulses_ vector.
        // With this algorithm 2 base stations needed for a fix. We search for a situation where the last pulse was
        // second in last cycle, which means (8333-400) us difference in start time.
		if(self->unclassified_long_pulses_.count > 0){
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d03c      	beq.n	8006344 <process_long_pulse+0x94>
			Pulse *last_long_pulse = (Pulse *) vector_pop(&self->unclassified_long_pulses_);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3334      	adds	r3, #52	; 0x34
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fe33 	bl	8006f3a <vector_pop>
 80062d4:	6178      	str	r0, [r7, #20]

			self->time_from_last_long_pulse_ = p->start_time - last_long_pulse->start_time;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	889a      	ldrh	r2, [r3, #4]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	889b      	ldrh	r3, [r3, #4]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168


			int delta = self->time_from_last_long_pulse_ - (CYCLE_PERIOD - long_pulse_starts[1]);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 80062ee:	461a      	mov	r2, r3
 80062f0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80062f4:	f5c3 5302 	rsb	r3, r3, #8320	; 0x2080
 80062f8:	330d      	adds	r3, #13
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	613b      	str	r3, [r7, #16]
			if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE){
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f113 0f1e 	cmn.w	r3, #30
 8006304:	db1b      	blt.n	800633e <process_long_pulse+0x8e>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b1d      	cmp	r3, #29
 800630a:	dc18      	bgt.n	800633e <process_long_pulse+0x8e>
                // Found candidate first pulse.
                self->cycle_fix_level_ = kCycleFixCandidate;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	605a      	str	r2, [r3, #4]
                self->cycle_start_time_ = p->start_time;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	889a      	ldrh	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	811a      	strh	r2, [r3, #8]
                self->cycle_idx_ = 0;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	60da      	str	r2, [r3, #12]

                reset(&self->phase_classifier_);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3340      	adds	r3, #64	; 0x40
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fa4f 	bl	80057c8 <reset>

                reset_cycle_long_pulses(self);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa46 	bl	80067bc <reset_cycle_long_pulses>
                reset_unclassified_long_pulses(self);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa8c 	bl	800684e <reset_unclassified_long_pulses>
                reset_cycle_short_pulses(self);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fab0 	bl	800689c <reset_cycle_short_pulses>
 800633c:	e002      	b.n	8006344 <process_long_pulse+0x94>
            }
			else{
				reset_unclassified_long_pulses(self);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa85 	bl	800684e <reset_unclassified_long_pulses>
			}
		}
	}

    // Put the pulse into either one of two buckets, or keep it as unclassified.
    uint8_t pulse_classified = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	77fb      	strb	r3, [r7, #31]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02b      	beq.n	80063a8 <process_long_pulse+0xf8>
        // Put pulse into one of two buckets by start time.
    	uint16_t time_from_cycle_start = p->start_time - self->cycle_start_time_;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	889a      	ldrh	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	891b      	ldrh	r3, [r3, #8]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	81fb      	strh	r3, [r7, #14]
        // DEBUG long pulse lengths
        //UART_Print_uint16_t(p->pulse_len);
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e01f      	b.n	80063a2 <process_long_pulse+0xf2>
        	int delta = time_from_cycle_start - long_pulse_starts[i];
 8006362:	89fb      	ldrh	r3, [r7, #14]
 8006364:	4917      	ldr	r1, [pc, #92]	; (80063c4 <process_long_pulse+0x114>)
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
        	if(-LONG_PULSE_STARTS_ACCEPTED_RANGE <= delta && delta < LONG_PULSE_STARTS_ACCEPTED_RANGE) {
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f113 0f1e 	cmn.w	r3, #30
 8006376:	db11      	blt.n	800639c <process_long_pulse+0xec>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b1d      	cmp	r3, #29
 800637c:	dc0e      	bgt.n	800639c <process_long_pulse+0xec>
                vector_push(&self->cycle_long_pulses_[i], p);
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	3310      	adds	r3, #16
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fd96 	bl	8006ec2 <vector_push>
                pulse_classified = 1;
 8006396:	2301      	movs	r3, #1
 8006398:	77fb      	strb	r3, [r7, #31]
                break;
 800639a:	e005      	b.n	80063a8 <process_long_pulse+0xf8>
        for (int i = 0; i < NUM_BASE_STATIONS; i++) {
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3301      	adds	r3, #1
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	dddc      	ble.n	8006362 <process_long_pulse+0xb2>
            }
        }
    }
    if (!pulse_classified){
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <process_long_pulse+0x10a>
    	vector_push(&self->unclassified_long_pulses_, p);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3334      	adds	r3, #52	; 0x34
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fd84 	bl	8006ec2 <vector_push>
    }
}
 80063ba:	bf00      	nop
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	08007d54 	.word	0x08007d54

080063c8 <process_short_pulse>:

void process_short_pulse(PulseProcessor *self, Pulse *p){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	if (self->cycle_fix_level_ >= kCycleFixCandidate && p->input_idx < self->num_inputs_) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <process_short_pulse+0x2a>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d205      	bcs.n	80063f2 <process_short_pulse+0x2a>
	    // TODO: Filter out pulses outside of current cycle.
		vector_push(&self->cycle_short_pulses_, p);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3328      	adds	r3, #40	; 0x28
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fd68 	bl	8006ec2 <vector_push>
		// DEBUG short pulse lengths
		//UART_Print_uint16_t(p->pulse_len);
	}

}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <process_cycle_fix>:

void process_cycle_fix(PulseProcessor *self, uint16_t cur_time) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b0a0      	sub	sp, #128	; 0x80
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	807b      	strh	r3, [r7, #2]
    int pulse_start_corrections[NUM_BASE_STATIONS] = {};
 8006408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	605a      	str	r2, [r3, #4]
    uint16_t pulse_lens[NUM_BASE_STATIONS] = {};
 8006412:	2300      	movs	r3, #0
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Check if we have long pulses from at least one base station.
    if (self->cycle_long_pulses_[0].count > 0 || self->cycle_long_pulses_[1].count > 0) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <process_cycle_fix+0x2c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80a4 	beq.w	8006570 <process_cycle_fix+0x174>
        // Increase fix level if we have pulses from both stations.
        if (self->cycle_fix_level_ < kCycleFixMax && self->cycle_long_pulses_[0].count > 0 && self->cycle_long_pulses_[1].count > 0){
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b09      	cmp	r3, #9
 800642e:	d80c      	bhi.n	800644a <process_cycle_fix+0x4e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <process_cycle_fix+0x4e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <process_cycle_fix+0x4e>
        	self->cycle_fix_level_++;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	605a      	str	r2, [r3, #4]
        }

        // Average out long pulse lengths and start times for each base station across sensors.
        // pulse_start_corrections is the delta between actual start time and expected start time.
        // TODO: Take into account previous cycles as well, i.e. adjust slowly.
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 800644a:	2300      	movs	r3, #0
 800644c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800644e:	e080      	b.n	8006552 <process_cycle_fix+0x156>
        	uint32_t num_pulses = self->cycle_long_pulses_[b].count;
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006454:	4613      	mov	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	3318      	adds	r3, #24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	66fb      	str	r3, [r7, #108]	; 0x6c
            if (num_pulses) {
 8006464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d070      	beq.n	800654c <process_cycle_fix+0x150>
            	uint16_t expected_start_time = self->cycle_start_time_ + long_pulse_starts[b];
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	891a      	ldrh	r2, [r3, #8]
 800646e:	49b7      	ldr	r1, [pc, #732]	; (800674c <process_cycle_fix+0x350>)
 8006470:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006472:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006476:	4413      	add	r3, r2
 8006478:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
                for (uint32_t i = 0; i < num_pulses; i++) {
 800647c:	2300      	movs	r3, #0
 800647e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006480:	e037      	b.n	80064f2 <process_cycle_fix+0xf6>
                    const Pulse *pulse = (Pulse *) vector_get(&self->cycle_long_pulses_[b], i);
 8006482:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	3310      	adds	r3, #16
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	4413      	add	r3, r2
 8006492:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fd34 	bl	8006f04 <vector_get>
 800649c:	6678      	str	r0, [r7, #100]	; 0x64
                    pulse_start_corrections[b] += pulse->start_time - expected_start_time;
 800649e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80064a6:	4413      	add	r3, r2
 80064a8:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80064ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ae:	889b      	ldrh	r3, [r3, #4]
 80064b0:	4619      	mov	r1, r3
 80064b2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80064b6:	1acb      	subs	r3, r1, r3
 80064b8:	441a      	add	r2, r3
 80064ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80064c2:	440b      	add	r3, r1
 80064c4:	f843 2c40 	str.w	r2, [r3, #-64]
                    pulse_lens[b] += pulse->pulse_len;
 80064c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80064d0:	4413      	add	r3, r2
 80064d2:	f833 2c44 	ldrh.w	r2, [r3, #-68]
 80064d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d8:	88db      	ldrh	r3, [r3, #6]
 80064da:	4413      	add	r3, r2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80064e6:	440b      	add	r3, r1
 80064e8:	f823 2c44 	strh.w	r2, [r3, #-68]
                for (uint32_t i = 0; i < num_pulses; i++) {
 80064ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ee:	3301      	adds	r3, #1
 80064f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80064f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d3c3      	bcc.n	8006482 <process_cycle_fix+0x86>
                }
                if (num_pulses > 1) {
 80064fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d925      	bls.n	800654c <process_cycle_fix+0x150>
                    pulse_start_corrections[b] /= num_pulses;
 8006500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006508:	4413      	add	r3, r2
 800650a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800650e:	461a      	mov	r2, r3
 8006510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	461a      	mov	r2, r3
 8006518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006520:	440b      	add	r3, r1
 8006522:	f843 2c40 	str.w	r2, [r3, #-64]
                    pulse_lens[b] /= num_pulses;
 8006526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800652e:	4413      	add	r3, r2
 8006530:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8006534:	461a      	mov	r2, r3
 8006536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	b29a      	uxth	r2, r3
 800653e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8006546:	440b      	add	r3, r1
 8006548:	f823 2c44 	strh.w	r2, [r3, #-68]
        for (int b = 0; b < NUM_BASE_STATIONS; b++){
 800654c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800654e:	3301      	adds	r3, #1
 8006550:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006552:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006554:	2b01      	cmp	r3, #1
 8006556:	f77f af7b 	ble.w	8006450 <process_cycle_fix+0x54>
                }
            }
        }
        // Send pulse lengths to phase classifier.
        process_pulse_lengths(&self->phase_classifier_, self->cycle_idx_, pulse_lens);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006568:	4619      	mov	r1, r3
 800656a:	f7ff f8ab 	bl	80056c4 <process_pulse_lengths>
 800656e:	e008      	b.n	8006582 <process_cycle_fix+0x186>

    }
    else {
        // No long pulses this cycle. We can survive several of such cycles, but our confidence in timing sinks.
        //self->cycle_fix_level_--;
    	if(self->cycle_fix_level_ > 0){
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <process_cycle_fix+0x186>
    		self->cycle_fix_level_--;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	1e5a      	subs	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]
    	}
    }

    // Given the cycle phase, we can put the angle timings to a correct bucket.

    int cycle_phase = get_phase(&self->phase_classifier_, self->cycle_idx_);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f7ff f902 	bl	8005798 <get_phase>
 8006594:	6638      	str	r0, [r7, #96]	; 0x60
    if (cycle_phase >= 0) {
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	2b00      	cmp	r3, #0
 800659a:	f2c0 80b4 	blt.w	8006706 <process_cycle_fix+0x30a>
    	//UART_Print_int32_t(cycle_phase);
        // From (potentially several) short pulses for the same input, we choose the longest one.
        Pulse *short_pulses[MAX_NUM_INPUTS] = {};
 800659e:	f107 030c 	add.w	r3, r7, #12
 80065a2:	2220      	movs	r2, #32
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fd79 	bl	800709e <memset>
        uint16_t short_pulse_timings[MAX_NUM_INPUTS] = {};
 80065ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	60da      	str	r2, [r3, #12]

        //Base 0 is emitting during cycle phases 0 and 1. Base 1 is emitting during cycle phases 2 and 3.
        uint32_t emitting_base = cycle_phase >> 1;
 80065ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065bc:	105b      	asrs	r3, r3, #1
 80065be:	65fb      	str	r3, [r7, #92]	; 0x5c
        uint16_t base_pulse_start = self->cycle_start_time_ + long_pulse_starts[emitting_base] + pulse_start_corrections[emitting_base];
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	891a      	ldrh	r2, [r3, #8]
 80065c4:	4961      	ldr	r1, [pc, #388]	; (800674c <process_cycle_fix+0x350>)
 80065c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80065cc:	4413      	add	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80065d8:	440b      	add	r3, r1
 80065da:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 80065e6:	2300      	movs	r3, #0
 80065e8:	677b      	str	r3, [r7, #116]	; 0x74
 80065ea:	e04b      	b.n	8006684 <process_cycle_fix+0x288>
            Pulse *p = (Pulse *) vector_get(&self->cycle_short_pulses_, i);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3328      	adds	r3, #40	; 0x28
 80065f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fc85 	bl	8006f04 <vector_get>
 80065fa:	6578      	str	r0, [r7, #84]	; 0x54
            uint32_t input_idx = p->input_idx;
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	653b      	str	r3, [r7, #80]	; 0x50

            // To get better precision, we calculate pulse timing based on the long pulse from the same base station.
            uint16_t pulse_timing = p->start_time + p->pulse_len / 2 - base_pulse_start;
 8006602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006604:	889a      	ldrh	r2, [r3, #4]
 8006606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006608:	88db      	ldrh	r3, [r3, #6]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	b29b      	uxth	r3, r3
 800660e:	4413      	add	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            // Get longest laser pulse.
            if (SHORT_PULSE_MIN_TIME < pulse_timing && pulse_timing < SHORT_PULSE_MAX_TIME){
 800661c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006620:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 8006624:	d32b      	bcc.n	800667e <process_cycle_fix+0x282>
 8006626:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800662a:	f641 2278 	movw	r2, #6776	; 0x1a78
 800662e:	4293      	cmp	r3, r2
 8006630:	d825      	bhi.n	800667e <process_cycle_fix+0x282>
            	if (!short_pulses[input_idx] || short_pulses[input_idx]->pulse_len < p->pulse_len) {
 8006632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800663a:	4413      	add	r3, r2
 800663c:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <process_cycle_fix+0x260>
 8006644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800664c:	4413      	add	r3, r2
 800664e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8006652:	88da      	ldrh	r2, [r3, #6]
 8006654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006656:	88db      	ldrh	r3, [r3, #6]
 8006658:	429a      	cmp	r2, r3
 800665a:	d210      	bcs.n	800667e <process_cycle_fix+0x282>
					short_pulses[input_idx] = p;
 800665c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006664:	4413      	add	r3, r2
 8006666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006668:	f843 2c74 	str.w	r2, [r3, #-116]
					short_pulse_timings[input_idx] = pulse_timing;
 800666c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006674:	4413      	add	r3, r2
 8006676:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800667a:	f823 2c54 	strh.w	r2, [r3, #-84]
        for (uint32_t i = 0; i < self->cycle_short_pulses_.count; i++) {
 800667e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006680:	3301      	adds	r3, #1
 8006682:	677b      	str	r3, [r7, #116]	; 0x74
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668a:	429a      	cmp	r2, r3
 800668c:	d8ae      	bhi.n	80065ec <process_cycle_fix+0x1f0>
            	}
            }
        }

        // Calculate the angles for inputs where we saw short pulses.
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 800668e:	2300      	movs	r3, #0
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
 8006692:	e033      	b.n	80066fc <process_cycle_fix+0x300>
            if (short_pulses[i]) {
 8006694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800669c:	4413      	add	r3, r2
 800669e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d027      	beq.n	80066f6 <process_cycle_fix+0x2fa>
                SensorAngles *angles = &self->angles_frame_.sensors[i];
 80066a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a8:	015b      	lsls	r3, r3, #5
 80066aa:	3368      	adds	r3, #104	; 0x68
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	64bb      	str	r3, [r7, #72]	; 0x48
                angles->angles[cycle_phase] = (float)M_PI * ((int)(short_pulse_timings[i] - ANGLE_CENTER_LEN)) / (float)CYCLE_PERIOD;
 80066b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80066ba:	4413      	add	r3, r2
 80066bc:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80066c0:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006750 <process_cycle_fix+0x354>
 80066d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066d4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006754 <process_cycle_fix+0x358>
 80066d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	edc3 7a00 	vstr	s15, [r3]
                angles->updated_cycles[cycle_phase] = self->cycle_idx_;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68d9      	ldr	r1, [r3, #12]
 80066ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066f0:	3204      	adds	r2, #4
 80066f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint32_t i = 0; i < self->num_inputs_; i++){
 80066f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f8:	3301      	adds	r3, #1
 80066fa:	673b      	str	r3, [r7, #112]	; 0x70
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006702:	429a      	cmp	r2, r3
 8006704:	d8c6      	bhi.n	8006694 <process_cycle_fix+0x298>
        }
    }

    // Send the data down the pipeline every 4th cycle (30Hz). Can be increased to 120Hz if needed.

    if ((cycle_phase >= 0) ? (cycle_phase == 3) : (self->cycle_idx_ % 4 == 0)) {
 8006706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006708:	2b00      	cmp	r3, #0
 800670a:	db06      	blt.n	800671a <process_cycle_fix+0x31e>
 800670c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800670e:	2b03      	cmp	r3, #3
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	e008      	b.n	800672c <process_cycle_fix+0x330>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b00      	cmp	r3, #0
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d026      	beq.n	800677e <process_cycle_fix+0x382>
        self->angles_frame_.time = self->cycle_start_time_;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	891a      	ldrh	r2, [r3, #8]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
                                        ? kCycleSynced : kCycleSyncing;
 800673a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800673c:	2b00      	cmp	r3, #0
 800673e:	db0b      	blt.n	8006758 <process_cycle_fix+0x35c>
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b04      	cmp	r3, #4
 8006746:	d907      	bls.n	8006758 <process_cycle_fix+0x35c>
                                        ? kCycleSynced : kCycleSyncing;
 8006748:	22c8      	movs	r2, #200	; 0xc8
 800674a:	e006      	b.n	800675a <process_cycle_fix+0x35e>
 800674c:	08007d54 	.word	0x08007d54
 8006750:	40490fdb 	.word	0x40490fdb
 8006754:	46023400 	.word	0x46023400
 8006758:	2264      	movs	r2, #100	; 0x64
        self->angles_frame_.fix_level = (cycle_phase >= 0 && self->cycle_fix_level_ >= kCycleFixAcquired)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	65da      	str	r2, [r3, #92]	; 0x5c
        self->angles_frame_.cycle_idx = self->cycle_idx_;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	661a      	str	r2, [r3, #96]	; 0x60
        self->angles_frame_.phase_id = cycle_phase;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800676a:	665a      	str	r2, [r3, #100]	; 0x64

        //UART_Print_float(self->angles_frame_.sensors[0].angles[0]);
        consume_angles(self->next, &self->angles_frame_);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3358      	adds	r3, #88	; 0x58
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7ff f83f 	bl	80057fc <consume_angles>
    }



    // Prepare for the next cycle.
    reset_cycle_long_pulses(self);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f81c 	bl	80067bc <reset_cycle_long_pulses>
    reset_unclassified_long_pulses(self);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f862 	bl	800684e <reset_unclassified_long_pulses>
    reset_cycle_short_pulses(self);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f886 	bl	800689c <reset_cycle_short_pulses>

    self->cycle_start_time_ += CYCLE_PERIOD + pulse_start_corrections[0];
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	891a      	ldrh	r2, [r3, #8]
 8006794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006796:	b29b      	uxth	r3, r3
 8006798:	4413      	add	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80067a0:	330d      	adds	r3, #13
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	811a      	strh	r2, [r3, #8]
    self->cycle_idx_++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]
}
 80067b2:	bf00      	nop
 80067b4:	3780      	adds	r7, #128	; 0x80
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop

080067bc <reset_cycle_long_pulses>:

void reset_cycle_long_pulses(PulseProcessor *self){
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	e03a      	b.n	8006840 <reset_cycle_long_pulses+0x84>
	    for(int j = 0; j < self->cycle_long_pulses_[i].count; j++){
 80067ca:	2300      	movs	r3, #0
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	e012      	b.n	80067f6 <reset_cycle_long_pulses+0x3a>
	    	free(vector_get(&self->cycle_long_pulses_[i], j));
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	3310      	adds	r3, #16
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4413      	add	r3, r2
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fb8e 	bl	8006f04 <vector_get>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fc44 	bl	8007078 <free>
	    for(int j = 0; j < self->cycle_long_pulses_[i].count; j++){
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4613      	mov	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	3318      	adds	r3, #24
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	d8e0      	bhi.n	80067d0 <reset_cycle_long_pulses+0x14>
	    }
	    vector_free(&self->cycle_long_pulses_[i]);
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4613      	mov	r3, r2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	3310      	adds	r3, #16
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fbc1 	bl	8006fa6 <vector_free>
	    vector_init(&self->cycle_long_pulses_[i]);
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4613      	mov	r3, r2
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	3310      	adds	r3, #16
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fb11 	bl	8006e5c <vector_init>
	for (int i = 0; i < NUM_BASE_STATIONS; i++){
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b01      	cmp	r3, #1
 8006844:	ddc1      	ble.n	80067ca <reset_cycle_long_pulses+0xe>
	}
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <reset_unclassified_long_pulses>:

void reset_unclassified_long_pulses(PulseProcessor *self){
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < self->unclassified_long_pulses_.count; i++){
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e00c      	b.n	8006876 <reset_unclassified_long_pulses+0x28>
		free(vector_get(&self->unclassified_long_pulses_, i));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3334      	adds	r3, #52	; 0x34
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fb4e 	bl	8006f04 <vector_get>
 8006868:	4603      	mov	r3, r0
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc04 	bl	8007078 <free>
	for(int i = 0; i < self->unclassified_long_pulses_.count; i++){
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d8ed      	bhi.n	800685c <reset_unclassified_long_pulses+0xe>
	}
	vector_free(&self->unclassified_long_pulses_);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3334      	adds	r3, #52	; 0x34
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fb8e 	bl	8006fa6 <vector_free>
	vector_init(&self->unclassified_long_pulses_);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3334      	adds	r3, #52	; 0x34
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fae4 	bl	8006e5c <vector_init>
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <reset_cycle_short_pulses>:

void reset_cycle_short_pulses(PulseProcessor *self){
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < self->cycle_short_pulses_.count; i++){
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e00c      	b.n	80068c4 <reset_cycle_short_pulses+0x28>
		free(vector_get(&self->cycle_short_pulses_, i));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3328      	adds	r3, #40	; 0x28
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fb27 	bl	8006f04 <vector_get>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fbdd 	bl	8007078 <free>
	for(int i = 0; i < self->cycle_short_pulses_.count; i++){
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d8ed      	bhi.n	80068aa <reset_cycle_short_pulses+0xe>
	}
	vector_free(&self->cycle_short_pulses_);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3328      	adds	r3, #40	; 0x28
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fb67 	bl	8006fa6 <vector_free>
	vector_init(&self->cycle_short_pulses_);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3328      	adds	r3, #40	; 0x28
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fabd 	bl	8006e5c <vector_init>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <do_work_pulse_processor>:
        (*slips) += (cnt-1);
    return cnt;
}
*/

void do_work_pulse_processor(PulseProcessor *self, uint16_t cur_time) {
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	807b      	strh	r3, [r7, #2]
    if (self->cycle_fix_level_ >= kCycleFixCandidate) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d020      	beq.n	8006940 <do_work_pulse_processor+0x56>
    	//CYCLE_PROCESSING_POINT = 6877


    	uint16_t temp;
    	if(((uint16_t)(cur_time - self->cycle_start_time_)) < ((uint16_t)(self->cycle_start_time_ - cur_time))){
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	891b      	ldrh	r3, [r3, #8]
 8006902:	887a      	ldrh	r2, [r7, #2]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8919      	ldrh	r1, [r3, #8]
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	1acb      	subs	r3, r1, r3
 8006910:	b29b      	uxth	r3, r3
 8006912:	429a      	cmp	r2, r3
 8006914:	d205      	bcs.n	8006922 <do_work_pulse_processor+0x38>
    		temp = (uint16_t)(cur_time - self->cycle_start_time_);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	891b      	ldrh	r3, [r3, #8]
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	81fb      	strh	r3, [r7, #14]
 8006920:	e004      	b.n	800692c <do_work_pulse_processor+0x42>
    	}
    	else{
    		temp = (uint16_t)(self->cycle_start_time_ - cur_time);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	891a      	ldrh	r2, [r3, #8]
 8006926:	887b      	ldrh	r3, [r7, #2]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	81fb      	strh	r3, [r7, #14]
    	}
    	if(temp > ((uint16_t) CYCLE_PROCESSING_POINT)){
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	f641 22dd 	movw	r2, #6877	; 0x1add
 8006932:	4293      	cmp	r3, r2
 8006934:	d904      	bls.n	8006940 <do_work_pulse_processor+0x56>
    		//UART_Print_uint16_t(self->cycle_start_time_);
    		process_cycle_fix(self, cur_time);
 8006936:	887b      	ldrh	r3, [r7, #2]
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff fd5e 	bl	80063fc <process_cycle_fix>
            self->angles_frame_.phase_id = 0;
            consume_angles(self->next, &self->angles_frame_);
        }
        */
    }
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800694c:	bf00      	nop
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006956:	b480      	push	{r7}
 8006958:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800695a:	bf00      	nop
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006968:	e7fe      	b.n	8006968 <HardFault_Handler+0x4>

0800696a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800696e:	e7fe      	b.n	800696e <MemManage_Handler+0x4>

08006970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006974:	e7fe      	b.n	8006974 <BusFault_Handler+0x4>

08006976 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006976:	b480      	push	{r7}
 8006978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800697a:	e7fe      	b.n	800697a <UsageFault_Handler+0x4>

0800697c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006980:	bf00      	nop
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800698a:	b480      	push	{r7}
 800698c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800699c:	bf00      	nop
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069aa:	f7fa fe43 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	af00      	add	r7, sp, #0

	//Debugging ----------------------
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
	//--------------------------------
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80069b6:	2001      	movs	r0, #1
 80069b8:	f7fb f972 	bl	8001ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80069c4:	4802      	ldr	r0, [pc, #8]	; (80069d0 <USART1_IRQHandler+0x10>)
 80069c6:	f7fd f913 	bl	8003bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80069ca:	bf00      	nop
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000504 	.word	0x20000504

080069d4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <_sbrk+0x50>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <_sbrk+0x16>
		heap_end = &end;
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <_sbrk+0x50>)
 80069e6:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <_sbrk+0x54>)
 80069e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <_sbrk+0x50>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80069f0:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <_sbrk+0x50>)
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4413      	add	r3, r2
 80069f8:	466a      	mov	r2, sp
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d907      	bls.n	8006a0e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80069fe:	f000 fb09 	bl	8007014 <__errno>
 8006a02:	4602      	mov	r2, r0
 8006a04:	230c      	movs	r3, #12
 8006a06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006a08:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0c:	e006      	b.n	8006a1c <_sbrk+0x48>
	}

	heap_end += incr;
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <_sbrk+0x50>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4413      	add	r3, r2
 8006a16:	4a03      	ldr	r2, [pc, #12]	; (8006a24 <_sbrk+0x50>)
 8006a18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000094 	.word	0x20000094
 8006a28:	20000598 	.word	0x20000598

08006a2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8006a30:	4b26      	ldr	r3, [pc, #152]	; (8006acc <SystemInit+0xa0>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8006a36:	4a25      	ldr	r2, [pc, #148]	; (8006acc <SystemInit+0xa0>)
 8006a38:	4b24      	ldr	r3, [pc, #144]	; (8006acc <SystemInit+0xa0>)
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8006a5e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <SystemInit+0xa4>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a7c:	f023 0305 	bic.w	r3, r3, #5
 8006a80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8006a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9c:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <SystemInit+0xa8>)
 8006a9e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	4a0b      	ldr	r2, [pc, #44]	; (8006ad4 <SystemInit+0xa8>)
 8006aa6:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006abc:	2200      	movs	r2, #0
 8006abe:	619a      	str	r2, [r3, #24]
}
 8006ac0:	bf00      	nop
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	e000ed00 	.word	0xe000ed00
 8006ad0:	faf6fefb 	.word	0xfaf6fefb
 8006ad4:	22041000 	.word	0x22041000

08006ad8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8006ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	091b      	lsrs	r3, r3, #4
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	4a47      	ldr	r2, [pc, #284]	; (8006c08 <SystemCoreClockUpdate+0x130>)
 8006aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 030c 	and.w	r3, r3, #12
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	d867      	bhi.n	8006bd0 <SystemCoreClockUpdate+0xf8>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <SystemCoreClockUpdate+0x30>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006bd1 	.word	0x08006bd1
 8006b10:	08006bd1 	.word	0x08006bd1
 8006b14:	08006bd1 	.word	0x08006bd1
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	08006bd1 	.word	0x08006bd1
 8006b20:	08006bd1 	.word	0x08006bd1
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006bd1 	.word	0x08006bd1
 8006b30:	08006bd1 	.word	0x08006bd1
 8006b34:	08006bd1 	.word	0x08006bd1
 8006b38:	08006b55 	.word	0x08006b55
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8006b3c:	4a33      	ldr	r2, [pc, #204]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6013      	str	r3, [r2, #0]
      break;
 8006b42:	e049      	b.n	8006bd8 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8006b44:	4b31      	ldr	r3, [pc, #196]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006b46:	4a32      	ldr	r2, [pc, #200]	; (8006c10 <SystemCoreClockUpdate+0x138>)
 8006b48:	601a      	str	r2, [r3, #0]
      break;
 8006b4a:	e045      	b.n	8006bd8 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006b4e:	4a31      	ldr	r2, [pc, #196]	; (8006c14 <SystemCoreClockUpdate+0x13c>)
 8006b50:	601a      	str	r2, [r3, #0]
      break;
 8006b52:	e041      	b.n	8006bd8 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d105      	bne.n	8006b82 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8006b76:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <SystemCoreClockUpdate+0x138>)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e00d      	b.n	8006b9e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d105      	bne.n	8006b94 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8006b88:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <SystemCoreClockUpdate+0x13c>)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e004      	b.n	8006b9e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8006bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	0f5b      	lsrs	r3, r3, #29
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bca:	4a10      	ldr	r2, [pc, #64]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006bcc:	6013      	str	r3, [r2, #0]
      break;
 8006bce:	e003      	b.n	8006bd8 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8006bd0:	4a0e      	ldr	r2, [pc, #56]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6013      	str	r3, [r2, #0]
      break;
 8006bd6:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <SystemCoreClockUpdate+0x140>)
 8006be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bea:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	4a05      	ldr	r2, [pc, #20]	; (8006c0c <SystemCoreClockUpdate+0x134>)
 8006bf8:	6013      	str	r3, [r2, #0]

}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	08007db8 	.word	0x08007db8
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	00f42400 	.word	0x00f42400
 8006c14:	01e84800 	.word	0x01e84800
 8006c18:	08007d58 	.word	0x08007d58

08006c1c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c56:	4a10      	ldr	r2, [pc, #64]	; (8006c98 <MX_TIM16_Init+0x48>)
 8006c58:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8006c5a:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c5c:	221f      	movs	r2, #31
 8006c5e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c6c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006c80:	4804      	ldr	r0, [pc, #16]	; (8006c94 <MX_TIM16_Init+0x44>)
 8006c82:	f7fc fdf6 	bl	8003872 <HAL_TIM_Base_Init>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006c8c:	f7ff fa9e 	bl	80061cc <Error_Handler>
  }

}
 8006c90:	bf00      	nop
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	200004c4 	.word	0x200004c4
 8006c98:	40014400 	.word	0x40014400

08006c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <HAL_TIM_Base_MspInit+0x24>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d103      	bne.n	8006cb6 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006cae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006cb2:	f7ff ffb3 	bl	8006c1c <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40014400 	.word	0x40014400

08006cc4 <LL_AHB2_GRP1_EnableClock>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_APB2_GRP1_EnableClock>:
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4013      	ands	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006d2c:	4b22      	ldr	r3, [pc, #136]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d2e:	4a23      	ldr	r2, [pc, #140]	; (8006dbc <MX_USART1_UART_Init+0x94>)
 8006d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006d32:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d3a:	4b1f      	ldr	r3, [pc, #124]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d40:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006d46:	4b1c      	ldr	r3, [pc, #112]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d4e:	2208      	movs	r2, #8
 8006d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d52:	4b19      	ldr	r3, [pc, #100]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d58:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d5e:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d64:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d6a:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d70:	4811      	ldr	r0, [pc, #68]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d72:	f7fc fe57 	bl	8003a24 <HAL_UART_Init>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006d7c:	f7ff fa26 	bl	80061cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d80:	2100      	movs	r1, #0
 8006d82:	480d      	ldr	r0, [pc, #52]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d84:	f7fe fb2c 	bl	80053e0 <HAL_UARTEx_SetTxFifoThreshold>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006d8e:	f7ff fa1d 	bl	80061cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006d92:	2100      	movs	r1, #0
 8006d94:	4808      	ldr	r0, [pc, #32]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006d96:	f7fe fb61 	bl	800545c <HAL_UARTEx_SetRxFifoThreshold>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006da0:	f7ff fa14 	bl	80061cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006da4:	4804      	ldr	r0, [pc, #16]	; (8006db8 <MX_USART1_UART_Init+0x90>)
 8006da6:	f7fe fae2 	bl	800536e <HAL_UARTEx_DisableFifoMode>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006db0:	f7ff fa0c 	bl	80061cc <Error_Handler>
  }

}
 8006db4:	bf00      	nop
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000504 	.word	0x20000504
 8006dbc:	40013800 	.word	0x40013800

08006dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc8:	f107 030c 	add.w	r3, r7, #12
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	605a      	str	r2, [r3, #4]
 8006dd2:	609a      	str	r2, [r3, #8]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <HAL_UART_MspInit+0x94>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d133      	bne.n	8006e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006de2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006de6:	f7ff ff86 	bl	8006cf6 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dea:	2001      	movs	r0, #1
 8006dec:	f7ff ff6a 	bl	8006cc4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006df0:	2002      	movs	r0, #2
 8006df2:	f7ff ff67 	bl	8006cc4 <LL_AHB2_GRP1_EnableClock>
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006df6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006dfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e08:	2307      	movs	r3, #7
 8006e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0c:	f107 030c 	add.w	r3, r7, #12
 8006e10:	4619      	mov	r1, r3
 8006e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e16:	f7fa fda3 	bl	8001960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006e1a:	23c0      	movs	r3, #192	; 0xc0
 8006e1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e2e:	f107 030c 	add.w	r3, r7, #12
 8006e32:	4619      	mov	r1, r3
 8006e34:	4808      	ldr	r0, [pc, #32]	; (8006e58 <HAL_UART_MspInit+0x98>)
 8006e36:	f7fa fd93 	bl	8001960 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	2024      	movs	r0, #36	; 0x24
 8006e40:	f7fa fcfb 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e44:	2024      	movs	r0, #36	; 0x24
 8006e46:	f7fa fd12 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40013800 	.word	0x40013800
 8006e58:	48000400 	.word	0x48000400

08006e5c <vector_init>:
#include "vector.h"

void vector_init(vector *self)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	self->capacity = VECTOR_INIT_CAPACITY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2204      	movs	r2, #4
 8006e68:	605a      	str	r2, [r3, #4]
	self->count = 0;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	609a      	str	r2, [r3, #8]
    self->items = malloc(sizeof(void *) * self->capacity);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f8f6 	bl	8007068 <malloc>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <vector_resize>:


void vector_resize(vector *self, int capacity)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
    #ifdef DEBUG_ON
    printf("vector_resize: %d to %d\n", self->capacity, capacity);
    #endif

    void **items = realloc(self->items, sizeof(void *) * capacity);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f000 f9b1 	bl	8007208 <realloc>
 8006ea6:	60f8      	str	r0, [r7, #12]
    if (items) {
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <vector_resize+0x2e>
        self->items = items;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	601a      	str	r2, [r3, #0]
        self->capacity = capacity;
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	605a      	str	r2, [r3, #4]
    }
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <vector_push>:

void vector_push(vector *self, void *item)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
    if (self->capacity == self->count)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d106      	bne.n	8006ee6 <vector_push+0x24>
        vector_resize(self, self->capacity * 2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ffd3 	bl	8006e8c <vector_resize>
    self->items[self->count++] = item;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	1c58      	adds	r0, r3, #1
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	6088      	str	r0, [r1, #8]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <vector_get>:
    if (index >= 0 && index < self->count)
        self->items[index] = item;
}

void *vector_get(vector *self, int index)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
    if (index >= 0 && index < self->count)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db0b      	blt.n	8006f2c <vector_get+0x28>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d906      	bls.n	8006f2c <vector_get+0x28>
        return self->items[index];
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	e000      	b.n	8006f2e <vector_get+0x2a>
    return NULL;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <vector_pop>:

    if (self->count > 0 && self->count == self->capacity / 4)
        vector_resize(self, self->capacity / 2);
}

void * vector_pop(vector *self){
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
	void * last = self->items[self->count - 1];
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]
    self->items[self->count - 1] = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f64:	3b01      	subs	r3, #1
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
    self->count--;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	1e5a      	subs	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	609a      	str	r2, [r3, #8]
    if (self->count > 0 && self->count == self->capacity / 4)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00d      	beq.n	8006f9c <vector_pop+0x62>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d106      	bne.n	8006f9c <vector_pop+0x62>
        vector_resize(self, self->capacity / 2);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff ff78 	bl	8006e8c <vector_resize>
    return last;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <vector_free>:

void vector_free(vector *self)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
    free(self->items);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f860 	bl	8007078 <free>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006fc0:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006fc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006fc4:	480d      	ldr	r0, [pc, #52]	; (8006ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8006fc6:	490e      	ldr	r1, [pc, #56]	; (8007000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006fc8:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <LoopForever+0xe>)
  movs r3, #0
 8006fca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006fcc:	e002      	b.n	8006fd4 <LoopCopyDataInit>

08006fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fd2:	3304      	adds	r3, #4

08006fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fd8:	d3f9      	bcc.n	8006fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fda:	4a0b      	ldr	r2, [pc, #44]	; (8007008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006fdc:	4c0b      	ldr	r4, [pc, #44]	; (800700c <LoopForever+0x16>)
  movs r3, #0
 8006fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fe0:	e001      	b.n	8006fe6 <LoopFillZerobss>

08006fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fe4:	3204      	adds	r2, #4

08006fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fe8:	d3fb      	bcc.n	8006fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006fea:	f7ff fd1f 	bl	8006a2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006fee:	f000 f817 	bl	8007020 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006ff2:	f7fe ff63 	bl	8005ebc <main>

08006ff6 <LoopForever>:

LoopForever:
  b LoopForever
 8006ff6:	e7fe      	b.n	8006ff6 <LoopForever>
  ldr   r0, =_estack
 8006ff8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006ffc:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8007000:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8007004:	08007e10 	.word	0x08007e10
  ldr r2, =_sbss
 8007008:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800700c:	20000594 	.word	0x20000594

08007010 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007010:	e7fe      	b.n	8007010 <ADC1_IRQHandler>
	...

08007014 <__errno>:
 8007014:	4b01      	ldr	r3, [pc, #4]	; (800701c <__errno+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000010 	.word	0x20000010

08007020 <__libc_init_array>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4e0d      	ldr	r6, [pc, #52]	; (8007058 <__libc_init_array+0x38>)
 8007024:	4c0d      	ldr	r4, [pc, #52]	; (800705c <__libc_init_array+0x3c>)
 8007026:	1ba4      	subs	r4, r4, r6
 8007028:	10a4      	asrs	r4, r4, #2
 800702a:	2500      	movs	r5, #0
 800702c:	42a5      	cmp	r5, r4
 800702e:	d109      	bne.n	8007044 <__libc_init_array+0x24>
 8007030:	4e0b      	ldr	r6, [pc, #44]	; (8007060 <__libc_init_array+0x40>)
 8007032:	4c0c      	ldr	r4, [pc, #48]	; (8007064 <__libc_init_array+0x44>)
 8007034:	f000 f9cc 	bl	80073d0 <_init>
 8007038:	1ba4      	subs	r4, r4, r6
 800703a:	10a4      	asrs	r4, r4, #2
 800703c:	2500      	movs	r5, #0
 800703e:	42a5      	cmp	r5, r4
 8007040:	d105      	bne.n	800704e <__libc_init_array+0x2e>
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007048:	4798      	blx	r3
 800704a:	3501      	adds	r5, #1
 800704c:	e7ee      	b.n	800702c <__libc_init_array+0xc>
 800704e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007052:	4798      	blx	r3
 8007054:	3501      	adds	r5, #1
 8007056:	e7f2      	b.n	800703e <__libc_init_array+0x1e>
 8007058:	08007e08 	.word	0x08007e08
 800705c:	08007e08 	.word	0x08007e08
 8007060:	08007e08 	.word	0x08007e08
 8007064:	08007e0c 	.word	0x08007e0c

08007068 <malloc>:
 8007068:	4b02      	ldr	r3, [pc, #8]	; (8007074 <malloc+0xc>)
 800706a:	4601      	mov	r1, r0
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	f000 b86d 	b.w	800714c <_malloc_r>
 8007072:	bf00      	nop
 8007074:	20000010 	.word	0x20000010

08007078 <free>:
 8007078:	4b02      	ldr	r3, [pc, #8]	; (8007084 <free+0xc>)
 800707a:	4601      	mov	r1, r0
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	f000 b817 	b.w	80070b0 <_free_r>
 8007082:	bf00      	nop
 8007084:	20000010 	.word	0x20000010

08007088 <memcpy>:
 8007088:	b510      	push	{r4, lr}
 800708a:	1e43      	subs	r3, r0, #1
 800708c:	440a      	add	r2, r1
 800708e:	4291      	cmp	r1, r2
 8007090:	d100      	bne.n	8007094 <memcpy+0xc>
 8007092:	bd10      	pop	{r4, pc}
 8007094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709c:	e7f7      	b.n	800708e <memcpy+0x6>

0800709e <memset>:
 800709e:	4402      	add	r2, r0
 80070a0:	4603      	mov	r3, r0
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d100      	bne.n	80070a8 <memset+0xa>
 80070a6:	4770      	bx	lr
 80070a8:	f803 1b01 	strb.w	r1, [r3], #1
 80070ac:	e7f9      	b.n	80070a2 <memset+0x4>
	...

080070b0 <_free_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4605      	mov	r5, r0
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d045      	beq.n	8007144 <_free_r+0x94>
 80070b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070bc:	1f0c      	subs	r4, r1, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfb8      	it	lt
 80070c2:	18e4      	addlt	r4, r4, r3
 80070c4:	f000 f8b8 	bl	8007238 <__malloc_lock>
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <_free_r+0x98>)
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	4610      	mov	r0, r2
 80070ce:	b933      	cbnz	r3, 80070de <_free_r+0x2e>
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	6014      	str	r4, [r2, #0]
 80070d4:	4628      	mov	r0, r5
 80070d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070da:	f000 b8ae 	b.w	800723a <__malloc_unlock>
 80070de:	42a3      	cmp	r3, r4
 80070e0:	d90c      	bls.n	80070fc <_free_r+0x4c>
 80070e2:	6821      	ldr	r1, [r4, #0]
 80070e4:	1862      	adds	r2, r4, r1
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bf04      	itt	eq
 80070ea:	681a      	ldreq	r2, [r3, #0]
 80070ec:	685b      	ldreq	r3, [r3, #4]
 80070ee:	6063      	str	r3, [r4, #4]
 80070f0:	bf04      	itt	eq
 80070f2:	1852      	addeq	r2, r2, r1
 80070f4:	6022      	streq	r2, [r4, #0]
 80070f6:	6004      	str	r4, [r0, #0]
 80070f8:	e7ec      	b.n	80070d4 <_free_r+0x24>
 80070fa:	4613      	mov	r3, r2
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	b10a      	cbz	r2, 8007104 <_free_r+0x54>
 8007100:	42a2      	cmp	r2, r4
 8007102:	d9fa      	bls.n	80070fa <_free_r+0x4a>
 8007104:	6819      	ldr	r1, [r3, #0]
 8007106:	1858      	adds	r0, r3, r1
 8007108:	42a0      	cmp	r0, r4
 800710a:	d10b      	bne.n	8007124 <_free_r+0x74>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	4401      	add	r1, r0
 8007110:	1858      	adds	r0, r3, r1
 8007112:	4282      	cmp	r2, r0
 8007114:	6019      	str	r1, [r3, #0]
 8007116:	d1dd      	bne.n	80070d4 <_free_r+0x24>
 8007118:	6810      	ldr	r0, [r2, #0]
 800711a:	6852      	ldr	r2, [r2, #4]
 800711c:	605a      	str	r2, [r3, #4]
 800711e:	4401      	add	r1, r0
 8007120:	6019      	str	r1, [r3, #0]
 8007122:	e7d7      	b.n	80070d4 <_free_r+0x24>
 8007124:	d902      	bls.n	800712c <_free_r+0x7c>
 8007126:	230c      	movs	r3, #12
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	e7d3      	b.n	80070d4 <_free_r+0x24>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	1821      	adds	r1, r4, r0
 8007130:	428a      	cmp	r2, r1
 8007132:	bf04      	itt	eq
 8007134:	6811      	ldreq	r1, [r2, #0]
 8007136:	6852      	ldreq	r2, [r2, #4]
 8007138:	6062      	str	r2, [r4, #4]
 800713a:	bf04      	itt	eq
 800713c:	1809      	addeq	r1, r1, r0
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	605c      	str	r4, [r3, #4]
 8007142:	e7c7      	b.n	80070d4 <_free_r+0x24>
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	20000098 	.word	0x20000098

0800714c <_malloc_r>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	1ccd      	adds	r5, r1, #3
 8007150:	f025 0503 	bic.w	r5, r5, #3
 8007154:	3508      	adds	r5, #8
 8007156:	2d0c      	cmp	r5, #12
 8007158:	bf38      	it	cc
 800715a:	250c      	movcc	r5, #12
 800715c:	2d00      	cmp	r5, #0
 800715e:	4606      	mov	r6, r0
 8007160:	db01      	blt.n	8007166 <_malloc_r+0x1a>
 8007162:	42a9      	cmp	r1, r5
 8007164:	d903      	bls.n	800716e <_malloc_r+0x22>
 8007166:	230c      	movs	r3, #12
 8007168:	6033      	str	r3, [r6, #0]
 800716a:	2000      	movs	r0, #0
 800716c:	bd70      	pop	{r4, r5, r6, pc}
 800716e:	f000 f863 	bl	8007238 <__malloc_lock>
 8007172:	4a23      	ldr	r2, [pc, #140]	; (8007200 <_malloc_r+0xb4>)
 8007174:	6814      	ldr	r4, [r2, #0]
 8007176:	4621      	mov	r1, r4
 8007178:	b991      	cbnz	r1, 80071a0 <_malloc_r+0x54>
 800717a:	4c22      	ldr	r4, [pc, #136]	; (8007204 <_malloc_r+0xb8>)
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	b91b      	cbnz	r3, 8007188 <_malloc_r+0x3c>
 8007180:	4630      	mov	r0, r6
 8007182:	f000 f849 	bl	8007218 <_sbrk_r>
 8007186:	6020      	str	r0, [r4, #0]
 8007188:	4629      	mov	r1, r5
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f844 	bl	8007218 <_sbrk_r>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d126      	bne.n	80071e2 <_malloc_r+0x96>
 8007194:	230c      	movs	r3, #12
 8007196:	6033      	str	r3, [r6, #0]
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f84e 	bl	800723a <__malloc_unlock>
 800719e:	e7e4      	b.n	800716a <_malloc_r+0x1e>
 80071a0:	680b      	ldr	r3, [r1, #0]
 80071a2:	1b5b      	subs	r3, r3, r5
 80071a4:	d41a      	bmi.n	80071dc <_malloc_r+0x90>
 80071a6:	2b0b      	cmp	r3, #11
 80071a8:	d90f      	bls.n	80071ca <_malloc_r+0x7e>
 80071aa:	600b      	str	r3, [r1, #0]
 80071ac:	50cd      	str	r5, [r1, r3]
 80071ae:	18cc      	adds	r4, r1, r3
 80071b0:	4630      	mov	r0, r6
 80071b2:	f000 f842 	bl	800723a <__malloc_unlock>
 80071b6:	f104 000b 	add.w	r0, r4, #11
 80071ba:	1d23      	adds	r3, r4, #4
 80071bc:	f020 0007 	bic.w	r0, r0, #7
 80071c0:	1ac3      	subs	r3, r0, r3
 80071c2:	d01b      	beq.n	80071fc <_malloc_r+0xb0>
 80071c4:	425a      	negs	r2, r3
 80071c6:	50e2      	str	r2, [r4, r3]
 80071c8:	bd70      	pop	{r4, r5, r6, pc}
 80071ca:	428c      	cmp	r4, r1
 80071cc:	bf0d      	iteet	eq
 80071ce:	6863      	ldreq	r3, [r4, #4]
 80071d0:	684b      	ldrne	r3, [r1, #4]
 80071d2:	6063      	strne	r3, [r4, #4]
 80071d4:	6013      	streq	r3, [r2, #0]
 80071d6:	bf18      	it	ne
 80071d8:	460c      	movne	r4, r1
 80071da:	e7e9      	b.n	80071b0 <_malloc_r+0x64>
 80071dc:	460c      	mov	r4, r1
 80071de:	6849      	ldr	r1, [r1, #4]
 80071e0:	e7ca      	b.n	8007178 <_malloc_r+0x2c>
 80071e2:	1cc4      	adds	r4, r0, #3
 80071e4:	f024 0403 	bic.w	r4, r4, #3
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d005      	beq.n	80071f8 <_malloc_r+0xac>
 80071ec:	1a21      	subs	r1, r4, r0
 80071ee:	4630      	mov	r0, r6
 80071f0:	f000 f812 	bl	8007218 <_sbrk_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d0cd      	beq.n	8007194 <_malloc_r+0x48>
 80071f8:	6025      	str	r5, [r4, #0]
 80071fa:	e7d9      	b.n	80071b0 <_malloc_r+0x64>
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	bf00      	nop
 8007200:	20000098 	.word	0x20000098
 8007204:	2000009c 	.word	0x2000009c

08007208 <realloc>:
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <realloc+0xc>)
 800720a:	460a      	mov	r2, r1
 800720c:	4601      	mov	r1, r0
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	f000 b814 	b.w	800723c <_realloc_r>
 8007214:	20000010 	.word	0x20000010

08007218 <_sbrk_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4c06      	ldr	r4, [pc, #24]	; (8007234 <_sbrk_r+0x1c>)
 800721c:	2300      	movs	r3, #0
 800721e:	4605      	mov	r5, r0
 8007220:	4608      	mov	r0, r1
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	f7ff fbd6 	bl	80069d4 <_sbrk>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_sbrk_r+0x1a>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	b103      	cbz	r3, 8007232 <_sbrk_r+0x1a>
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20000590 	.word	0x20000590

08007238 <__malloc_lock>:
 8007238:	4770      	bx	lr

0800723a <__malloc_unlock>:
 800723a:	4770      	bx	lr

0800723c <_realloc_r>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	4607      	mov	r7, r0
 8007240:	4614      	mov	r4, r2
 8007242:	460e      	mov	r6, r1
 8007244:	b921      	cbnz	r1, 8007250 <_realloc_r+0x14>
 8007246:	4611      	mov	r1, r2
 8007248:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800724c:	f7ff bf7e 	b.w	800714c <_malloc_r>
 8007250:	b922      	cbnz	r2, 800725c <_realloc_r+0x20>
 8007252:	f7ff ff2d 	bl	80070b0 <_free_r>
 8007256:	4625      	mov	r5, r4
 8007258:	4628      	mov	r0, r5
 800725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725c:	f000 f814 	bl	8007288 <_malloc_usable_size_r>
 8007260:	4284      	cmp	r4, r0
 8007262:	d90f      	bls.n	8007284 <_realloc_r+0x48>
 8007264:	4621      	mov	r1, r4
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ff70 	bl	800714c <_malloc_r>
 800726c:	4605      	mov	r5, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d0f2      	beq.n	8007258 <_realloc_r+0x1c>
 8007272:	4631      	mov	r1, r6
 8007274:	4622      	mov	r2, r4
 8007276:	f7ff ff07 	bl	8007088 <memcpy>
 800727a:	4631      	mov	r1, r6
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ff17 	bl	80070b0 <_free_r>
 8007282:	e7e9      	b.n	8007258 <_realloc_r+0x1c>
 8007284:	4635      	mov	r5, r6
 8007286:	e7e7      	b.n	8007258 <_realloc_r+0x1c>

08007288 <_malloc_usable_size_r>:
 8007288:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800728c:	2800      	cmp	r0, #0
 800728e:	f1a0 0004 	sub.w	r0, r0, #4
 8007292:	bfbc      	itt	lt
 8007294:	580b      	ldrlt	r3, [r1, r0]
 8007296:	18c0      	addlt	r0, r0, r3
 8007298:	4770      	bx	lr
	...

0800729c <sqrtf>:
 800729c:	b510      	push	{r4, lr}
 800729e:	ed2d 8b02 	vpush	{d8}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	eeb0 8a40 	vmov.f32	s16, s0
 80072a8:	f000 f848 	bl	800733c <__ieee754_sqrtf>
 80072ac:	4b21      	ldr	r3, [pc, #132]	; (8007334 <sqrtf+0x98>)
 80072ae:	f993 4000 	ldrsb.w	r4, [r3]
 80072b2:	1c63      	adds	r3, r4, #1
 80072b4:	d02c      	beq.n	8007310 <sqrtf+0x74>
 80072b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80072ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072be:	d627      	bvs.n	8007310 <sqrtf+0x74>
 80072c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80072c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c8:	d522      	bpl.n	8007310 <sqrtf+0x74>
 80072ca:	2301      	movs	r3, #1
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <sqrtf+0x9c>)
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	ee18 0a10 	vmov	r0, s16
 80072d6:	2300      	movs	r3, #0
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	f7f9 f8bd 	bl	8000458 <__aeabi_f2d>
 80072de:	2200      	movs	r2, #0
 80072e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e8:	2300      	movs	r3, #0
 80072ea:	b9ac      	cbnz	r4, 8007318 <sqrtf+0x7c>
 80072ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072f0:	4668      	mov	r0, sp
 80072f2:	f000 f86a 	bl	80073ca <matherr>
 80072f6:	b1b8      	cbz	r0, 8007328 <sqrtf+0x8c>
 80072f8:	9b08      	ldr	r3, [sp, #32]
 80072fa:	b11b      	cbz	r3, 8007304 <sqrtf+0x68>
 80072fc:	f7ff fe8a 	bl	8007014 <__errno>
 8007300:	9b08      	ldr	r3, [sp, #32]
 8007302:	6003      	str	r3, [r0, #0]
 8007304:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007308:	f7f9 fb0c 	bl	8000924 <__aeabi_d2f>
 800730c:	ee00 0a10 	vmov	s0, r0
 8007310:	b00a      	add	sp, #40	; 0x28
 8007312:	ecbd 8b02 	vpop	{d8}
 8007316:	bd10      	pop	{r4, pc}
 8007318:	4610      	mov	r0, r2
 800731a:	4619      	mov	r1, r3
 800731c:	f7f9 fa1a 	bl	8000754 <__aeabi_ddiv>
 8007320:	2c02      	cmp	r4, #2
 8007322:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007326:	d1e3      	bne.n	80072f0 <sqrtf+0x54>
 8007328:	f7ff fe74 	bl	8007014 <__errno>
 800732c:	2321      	movs	r3, #33	; 0x21
 800732e:	6003      	str	r3, [r0, #0]
 8007330:	e7e2      	b.n	80072f8 <sqrtf+0x5c>
 8007332:	bf00      	nop
 8007334:	20000074 	.word	0x20000074
 8007338:	08007df8 	.word	0x08007df8

0800733c <__ieee754_sqrtf>:
 800733c:	ee10 2a10 	vmov	r2, s0
 8007340:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007344:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	d302      	bcc.n	8007352 <__ieee754_sqrtf+0x16>
 800734c:	eea0 0a00 	vfma.f32	s0, s0, s0
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	b3b1      	cbz	r1, 80073c2 <__ieee754_sqrtf+0x86>
 8007354:	2a00      	cmp	r2, #0
 8007356:	da04      	bge.n	8007362 <__ieee754_sqrtf+0x26>
 8007358:	ee70 7a40 	vsub.f32	s15, s0, s0
 800735c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007366:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800736a:	d204      	bcs.n	8007376 <__ieee754_sqrtf+0x3a>
 800736c:	2100      	movs	r1, #0
 800736e:	0210      	lsls	r0, r2, #8
 8007370:	d528      	bpl.n	80073c4 <__ieee754_sqrtf+0x88>
 8007372:	3901      	subs	r1, #1
 8007374:	1a5b      	subs	r3, r3, r1
 8007376:	3b7f      	subs	r3, #127	; 0x7f
 8007378:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800737c:	07d9      	lsls	r1, r3, #31
 800737e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007382:	bf48      	it	mi
 8007384:	0052      	lslmi	r2, r2, #1
 8007386:	1059      	asrs	r1, r3, #1
 8007388:	2300      	movs	r3, #0
 800738a:	0052      	lsls	r2, r2, #1
 800738c:	2419      	movs	r4, #25
 800738e:	461e      	mov	r6, r3
 8007390:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007394:	1835      	adds	r5, r6, r0
 8007396:	4295      	cmp	r5, r2
 8007398:	bfde      	ittt	le
 800739a:	182e      	addle	r6, r5, r0
 800739c:	1b52      	suble	r2, r2, r5
 800739e:	181b      	addle	r3, r3, r0
 80073a0:	3c01      	subs	r4, #1
 80073a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073a6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80073aa:	d1f3      	bne.n	8007394 <__ieee754_sqrtf+0x58>
 80073ac:	b112      	cbz	r2, 80073b4 <__ieee754_sqrtf+0x78>
 80073ae:	3301      	adds	r3, #1
 80073b0:	f023 0301 	bic.w	r3, r3, #1
 80073b4:	105b      	asrs	r3, r3, #1
 80073b6:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80073ba:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80073be:	ee00 3a10 	vmov	s0, r3
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	0052      	lsls	r2, r2, #1
 80073c6:	3101      	adds	r1, #1
 80073c8:	e7d1      	b.n	800736e <__ieee754_sqrtf+0x32>

080073ca <matherr>:
 80073ca:	2000      	movs	r0, #0
 80073cc:	4770      	bx	lr
	...

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
